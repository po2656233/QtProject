// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cowcow.proto

#include "cowcow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_gamecomm_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInfo_gamecomm_2eproto;
namespace go {
class GameCowcowEnterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCowcowEnter> _instance;
} _GameCowcowEnter_default_instance_;
class GameCowcowHostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCowcowHost> _instance;
} _GameCowcowHost_default_instance_;
class GameCowcowSuperHostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCowcowSuperHost> _instance;
} _GameCowcowSuperHost_default_instance_;
class GameCowcowPlayingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCowcowPlaying> _instance;
} _GameCowcowPlaying_default_instance_;
class GameCowcowBetResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCowcowBetResult> _instance;
} _GameCowcowBetResult_default_instance_;
class GameCowcowOverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCowcowOver> _instance;
} _GameCowcowOver_default_instance_;
class GameCowcowCheckoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCowcowCheckout> _instance;
} _GameCowcowCheckout_default_instance_;
}  // namespace go
static void InitDefaultsGameCowcowEnter_cowcow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameCowcowEnter_default_instance_;
    new (ptr) ::go::GameCowcowEnter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameCowcowEnter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameCowcowEnter_cowcow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameCowcowEnter_cowcow_2eproto}, {
      &scc_info_PlayerInfo_gamecomm_2eproto.base,}};

static void InitDefaultsGameCowcowHost_cowcow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameCowcowHost_default_instance_;
    new (ptr) ::go::GameCowcowHost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameCowcowHost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameCowcowHost_cowcow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameCowcowHost_cowcow_2eproto}, {}};

static void InitDefaultsGameCowcowSuperHost_cowcow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameCowcowSuperHost_default_instance_;
    new (ptr) ::go::GameCowcowSuperHost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameCowcowSuperHost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameCowcowSuperHost_cowcow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameCowcowSuperHost_cowcow_2eproto}, {}};

static void InitDefaultsGameCowcowPlaying_cowcow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameCowcowPlaying_default_instance_;
    new (ptr) ::go::GameCowcowPlaying();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameCowcowPlaying::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameCowcowPlaying_cowcow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameCowcowPlaying_cowcow_2eproto}, {}};

static void InitDefaultsGameCowcowBetResult_cowcow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameCowcowBetResult_default_instance_;
    new (ptr) ::go::GameCowcowBetResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameCowcowBetResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameCowcowBetResult_cowcow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameCowcowBetResult_cowcow_2eproto}, {}};

static void InitDefaultsGameCowcowOver_cowcow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameCowcowOver_default_instance_;
    new (ptr) ::go::GameCowcowOver();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameCowcowOver::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameCowcowOver_cowcow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameCowcowOver_cowcow_2eproto}, {}};

static void InitDefaultsGameCowcowCheckout_cowcow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameCowcowCheckout_default_instance_;
    new (ptr) ::go::GameCowcowCheckout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameCowcowCheckout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameCowcowCheckout_cowcow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameCowcowCheckout_cowcow_2eproto}, {}};

void InitDefaults_cowcow_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameCowcowEnter_cowcow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameCowcowHost_cowcow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameCowcowSuperHost_cowcow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameCowcowPlaying_cowcow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameCowcowBetResult_cowcow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameCowcowOver_cowcow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameCowcowCheckout_cowcow_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cowcow_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cowcow_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cowcow_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cowcow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowEnter, userinfo_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowEnter, timestamp_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowEnter, chips_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowEnter, awardareas_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowEnter, freetime_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowEnter, bettime_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowEnter, opentime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowHost, userid_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowHost, iswant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowSuperHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowSuperHost, userid_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowSuperHost, iswant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowPlaying, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowPlaying, betarea_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowPlaying, betscore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowBetResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowBetResult, state_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowBetResult, hints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowOver, awardarea_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowOver, bankercard_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowOver, tiancard_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowOver, xuancard_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowOver, dicard_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowOver, huangcard_),
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowOver, cardvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowCheckout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameCowcowCheckout, acquire_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::go::GameCowcowEnter)},
  { 12, -1, sizeof(::go::GameCowcowHost)},
  { 19, -1, sizeof(::go::GameCowcowSuperHost)},
  { 26, -1, sizeof(::go::GameCowcowPlaying)},
  { 33, -1, sizeof(::go::GameCowcowBetResult)},
  { 40, -1, sizeof(::go::GameCowcowOver)},
  { 52, -1, sizeof(::go::GameCowcowCheckout)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameCowcowEnter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameCowcowHost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameCowcowSuperHost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameCowcowPlaying_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameCowcowBetResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameCowcowOver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameCowcowCheckout_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cowcow_2eproto = {
  {}, AddDescriptors_cowcow_2eproto, "cowcow.proto", schemas,
  file_default_instances, TableStruct_cowcow_2eproto::offsets,
  file_level_metadata_cowcow_2eproto, 7, file_level_enum_descriptors_cowcow_2eproto, file_level_service_descriptors_cowcow_2eproto,
};

const char descriptor_table_protodef_cowcow_2eproto[] =
  "\n\014cowcow.proto\022\002go\032\016gamecomm.proto\"\236\001\n\017G"
  "ameCowcowEnter\022 \n\010UserInfo\030\001 \001(\0132\016.go.Pl"
  "ayerInfo\022\021\n\tTimeStamp\030\002 \001(\003\022\r\n\005Chips\030\003 \003"
  "(\005\022\022\n\nAwardAreas\030\004 \003(\014\022\020\n\010FreeTime\030\005 \001(\r"
  "\022\017\n\007BetTime\030\006 \001(\r\022\020\n\010OpenTime\030\007 \001(\r\"0\n\016G"
  "ameCowcowHost\022\016\n\006UserID\030\001 \001(\004\022\016\n\006IsWant\030"
  "\002 \001(\010\"5\n\023GameCowcowSuperHost\022\016\n\006UserID\030\001"
  " \001(\004\022\016\n\006IsWant\030\002 \001(\010\"6\n\021GameCowcowPlayin"
  "g\022\017\n\007BetArea\030\001 \001(\005\022\020\n\010BetScore\030\002 \001(\003\"3\n\023"
  "GameCowcowBetResult\022\r\n\005State\030\001 \001(\005\022\r\n\005Hi"
  "nts\030\002 \001(\t\"\221\001\n\016GameCowcowOver\022\021\n\tAwardAre"
  "a\030\001 \001(\014\022\022\n\nBankerCard\030\002 \001(\014\022\020\n\010TianCard\030"
  "\003 \001(\014\022\020\n\010XuanCard\030\004 \001(\014\022\016\n\006DiCard\030\005 \001(\014\022"
  "\021\n\tHuangCard\030\006 \001(\014\022\021\n\tCardValue\030\007 \001(\014\"%\n"
  "\022GameCowcowCheckout\022\017\n\007Acquire\030\001 \001(\003b\006pr"
  "oto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cowcow_2eproto = {
  false, InitDefaults_cowcow_2eproto, 
  descriptor_table_protodef_cowcow_2eproto,
  "cowcow.proto", &assign_descriptors_table_cowcow_2eproto, 604,
};

void AddDescriptors_cowcow_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_gamecomm_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cowcow_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cowcow_2eproto = []() { AddDescriptors_cowcow_2eproto(); return true; }();
namespace go {

// ===================================================================

void GameCowcowEnter::InitAsDefaultInstance() {
  ::go::_GameCowcowEnter_default_instance_._instance.get_mutable()->userinfo_ = const_cast< ::go::PlayerInfo*>(
      ::go::PlayerInfo::internal_default_instance());
}
class GameCowcowEnter::HasBitSetters {
 public:
  static const ::go::PlayerInfo& userinfo(const GameCowcowEnter* msg);
};

const ::go::PlayerInfo&
GameCowcowEnter::HasBitSetters::userinfo(const GameCowcowEnter* msg) {
  return *msg->userinfo_;
}
void GameCowcowEnter::clear_userinfo() {
  if (GetArenaNoVirtual() == nullptr && userinfo_ != nullptr) {
    delete userinfo_;
  }
  userinfo_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCowcowEnter::kUserInfoFieldNumber;
const int GameCowcowEnter::kTimeStampFieldNumber;
const int GameCowcowEnter::kChipsFieldNumber;
const int GameCowcowEnter::kAwardAreasFieldNumber;
const int GameCowcowEnter::kFreeTimeFieldNumber;
const int GameCowcowEnter::kBetTimeFieldNumber;
const int GameCowcowEnter::kOpenTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCowcowEnter::GameCowcowEnter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameCowcowEnter)
}
GameCowcowEnter::GameCowcowEnter(const GameCowcowEnter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      chips_(from.chips_),
      awardareas_(from.awardareas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_userinfo()) {
    userinfo_ = new ::go::PlayerInfo(*from.userinfo_);
  } else {
    userinfo_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&opentime_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(opentime_));
  // @@protoc_insertion_point(copy_constructor:go.GameCowcowEnter)
}

void GameCowcowEnter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameCowcowEnter_cowcow_2eproto.base);
  ::memset(&userinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opentime_) -
      reinterpret_cast<char*>(&userinfo_)) + sizeof(opentime_));
}

GameCowcowEnter::~GameCowcowEnter() {
  // @@protoc_insertion_point(destructor:go.GameCowcowEnter)
  SharedDtor();
}

void GameCowcowEnter::SharedDtor() {
  if (this != internal_default_instance()) delete userinfo_;
}

void GameCowcowEnter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameCowcowEnter& GameCowcowEnter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameCowcowEnter_cowcow_2eproto.base);
  return *internal_default_instance();
}


void GameCowcowEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameCowcowEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chips_.Clear();
  awardareas_.Clear();
  if (GetArenaNoVirtual() == nullptr && userinfo_ != nullptr) {
    delete userinfo_;
  }
  userinfo_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opentime_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(opentime_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameCowcowEnter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameCowcowEnter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .go.PlayerInfo UserInfo = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::go::PlayerInfo::_InternalParse;
        object = msg->mutable_userinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 TimeStamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 Chips = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_chips();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_chips(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated bytes AwardAreas = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_awardareas();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // uint32 FreeTime = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_freetime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 BetTime = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_bettime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 OpenTime = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_opentime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameCowcowEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameCowcowEnter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .go.PlayerInfo UserInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TimeStamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Chips = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chips())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_chips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes AwardAreas = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_awardareas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FreeTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 BetTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bettime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 OpenTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opentime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameCowcowEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameCowcowEnter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameCowcowEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameCowcowEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.PlayerInfo UserInfo = 1;
  if (this->has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::userinfo(this), output);
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // repeated int32 Chips = 3;
  if (this->chips_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chips_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->chips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->chips(i), output);
  }

  // repeated bytes AwardAreas = 4;
  for (int i = 0, n = this->awardareas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->awardareas(i), output);
  }

  // uint32 FreeTime = 5;
  if (this->freetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->freetime(), output);
  }

  // uint32 BetTime = 6;
  if (this->bettime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bettime(), output);
  }

  // uint32 OpenTime = 7;
  if (this->opentime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->opentime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameCowcowEnter)
}

::google::protobuf::uint8* GameCowcowEnter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameCowcowEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.PlayerInfo UserInfo = 1;
  if (this->has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::userinfo(this), target);
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // repeated int32 Chips = 3;
  if (this->chips_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _chips_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->chips_, target);
  }

  // repeated bytes AwardAreas = 4;
  for (int i = 0, n = this->awardareas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->awardareas(i), target);
  }

  // uint32 FreeTime = 5;
  if (this->freetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->freetime(), target);
  }

  // uint32 BetTime = 6;
  if (this->bettime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bettime(), target);
  }

  // uint32 OpenTime = 7;
  if (this->opentime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->opentime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameCowcowEnter)
  return target;
}

size_t GameCowcowEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameCowcowEnter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Chips = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chips_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _chips_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes AwardAreas = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->awardareas_size());
  for (int i = 0, n = this->awardareas_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->awardareas(i));
  }

  // .go.PlayerInfo UserInfo = 1;
  if (this->has_userinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *userinfo_);
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // uint32 FreeTime = 5;
  if (this->freetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->freetime());
  }

  // uint32 BetTime = 6;
  if (this->bettime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bettime());
  }

  // uint32 OpenTime = 7;
  if (this->opentime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opentime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameCowcowEnter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameCowcowEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCowcowEnter* source =
      ::google::protobuf::DynamicCastToGenerated<GameCowcowEnter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameCowcowEnter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameCowcowEnter)
    MergeFrom(*source);
  }
}

void GameCowcowEnter::MergeFrom(const GameCowcowEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameCowcowEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chips_.MergeFrom(from.chips_);
  awardareas_.MergeFrom(from.awardareas_);
  if (from.has_userinfo()) {
    mutable_userinfo()->::go::PlayerInfo::MergeFrom(from.userinfo());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.freetime() != 0) {
    set_freetime(from.freetime());
  }
  if (from.bettime() != 0) {
    set_bettime(from.bettime());
  }
  if (from.opentime() != 0) {
    set_opentime(from.opentime());
  }
}

void GameCowcowEnter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameCowcowEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCowcowEnter::CopyFrom(const GameCowcowEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameCowcowEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCowcowEnter::IsInitialized() const {
  return true;
}

void GameCowcowEnter::Swap(GameCowcowEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCowcowEnter::InternalSwap(GameCowcowEnter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chips_.InternalSwap(&other->chips_);
  awardareas_.InternalSwap(CastToBase(&other->awardareas_));
  swap(userinfo_, other->userinfo_);
  swap(timestamp_, other->timestamp_);
  swap(freetime_, other->freetime_);
  swap(bettime_, other->bettime_);
  swap(opentime_, other->opentime_);
}

::google::protobuf::Metadata GameCowcowEnter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cowcow_2eproto);
  return ::file_level_metadata_cowcow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameCowcowHost::InitAsDefaultInstance() {
}
class GameCowcowHost::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCowcowHost::kUserIDFieldNumber;
const int GameCowcowHost::kIsWantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCowcowHost::GameCowcowHost()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameCowcowHost)
}
GameCowcowHost::GameCowcowHost(const GameCowcowHost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iswant_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
  // @@protoc_insertion_point(copy_constructor:go.GameCowcowHost)
}

void GameCowcowHost::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswant_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
}

GameCowcowHost::~GameCowcowHost() {
  // @@protoc_insertion_point(destructor:go.GameCowcowHost)
  SharedDtor();
}

void GameCowcowHost::SharedDtor() {
}

void GameCowcowHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameCowcowHost& GameCowcowHost::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameCowcowHost_cowcow_2eproto.base);
  return *internal_default_instance();
}


void GameCowcowHost::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameCowcowHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswant_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameCowcowHost::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameCowcowHost*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_userid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool IsWant = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_iswant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameCowcowHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameCowcowHost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsWant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameCowcowHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameCowcowHost)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameCowcowHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameCowcowHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iswant(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameCowcowHost)
}

::google::protobuf::uint8* GameCowcowHost::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameCowcowHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iswant(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameCowcowHost)
  return target;
}

size_t GameCowcowHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameCowcowHost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameCowcowHost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameCowcowHost)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCowcowHost* source =
      ::google::protobuf::DynamicCastToGenerated<GameCowcowHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameCowcowHost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameCowcowHost)
    MergeFrom(*source);
  }
}

void GameCowcowHost::MergeFrom(const GameCowcowHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameCowcowHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.iswant() != 0) {
    set_iswant(from.iswant());
  }
}

void GameCowcowHost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameCowcowHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCowcowHost::CopyFrom(const GameCowcowHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameCowcowHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCowcowHost::IsInitialized() const {
  return true;
}

void GameCowcowHost::Swap(GameCowcowHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCowcowHost::InternalSwap(GameCowcowHost* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(iswant_, other->iswant_);
}

::google::protobuf::Metadata GameCowcowHost::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cowcow_2eproto);
  return ::file_level_metadata_cowcow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameCowcowSuperHost::InitAsDefaultInstance() {
}
class GameCowcowSuperHost::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCowcowSuperHost::kUserIDFieldNumber;
const int GameCowcowSuperHost::kIsWantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCowcowSuperHost::GameCowcowSuperHost()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameCowcowSuperHost)
}
GameCowcowSuperHost::GameCowcowSuperHost(const GameCowcowSuperHost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iswant_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
  // @@protoc_insertion_point(copy_constructor:go.GameCowcowSuperHost)
}

void GameCowcowSuperHost::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswant_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
}

GameCowcowSuperHost::~GameCowcowSuperHost() {
  // @@protoc_insertion_point(destructor:go.GameCowcowSuperHost)
  SharedDtor();
}

void GameCowcowSuperHost::SharedDtor() {
}

void GameCowcowSuperHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameCowcowSuperHost& GameCowcowSuperHost::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameCowcowSuperHost_cowcow_2eproto.base);
  return *internal_default_instance();
}


void GameCowcowSuperHost::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameCowcowSuperHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswant_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameCowcowSuperHost::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameCowcowSuperHost*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_userid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool IsWant = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_iswant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameCowcowSuperHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameCowcowSuperHost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsWant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameCowcowSuperHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameCowcowSuperHost)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameCowcowSuperHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameCowcowSuperHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iswant(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameCowcowSuperHost)
}

::google::protobuf::uint8* GameCowcowSuperHost::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameCowcowSuperHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iswant(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameCowcowSuperHost)
  return target;
}

size_t GameCowcowSuperHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameCowcowSuperHost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameCowcowSuperHost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameCowcowSuperHost)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCowcowSuperHost* source =
      ::google::protobuf::DynamicCastToGenerated<GameCowcowSuperHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameCowcowSuperHost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameCowcowSuperHost)
    MergeFrom(*source);
  }
}

void GameCowcowSuperHost::MergeFrom(const GameCowcowSuperHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameCowcowSuperHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.iswant() != 0) {
    set_iswant(from.iswant());
  }
}

void GameCowcowSuperHost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameCowcowSuperHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCowcowSuperHost::CopyFrom(const GameCowcowSuperHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameCowcowSuperHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCowcowSuperHost::IsInitialized() const {
  return true;
}

void GameCowcowSuperHost::Swap(GameCowcowSuperHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCowcowSuperHost::InternalSwap(GameCowcowSuperHost* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(iswant_, other->iswant_);
}

::google::protobuf::Metadata GameCowcowSuperHost::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cowcow_2eproto);
  return ::file_level_metadata_cowcow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameCowcowPlaying::InitAsDefaultInstance() {
}
class GameCowcowPlaying::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCowcowPlaying::kBetAreaFieldNumber;
const int GameCowcowPlaying::kBetScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCowcowPlaying::GameCowcowPlaying()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameCowcowPlaying)
}
GameCowcowPlaying::GameCowcowPlaying(const GameCowcowPlaying& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&betscore_, &from.betscore_,
    static_cast<size_t>(reinterpret_cast<char*>(&betarea_) -
    reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
  // @@protoc_insertion_point(copy_constructor:go.GameCowcowPlaying)
}

void GameCowcowPlaying::SharedCtor() {
  ::memset(&betscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betarea_) -
      reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
}

GameCowcowPlaying::~GameCowcowPlaying() {
  // @@protoc_insertion_point(destructor:go.GameCowcowPlaying)
  SharedDtor();
}

void GameCowcowPlaying::SharedDtor() {
}

void GameCowcowPlaying::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameCowcowPlaying& GameCowcowPlaying::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameCowcowPlaying_cowcow_2eproto.base);
  return *internal_default_instance();
}


void GameCowcowPlaying::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameCowcowPlaying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&betscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betarea_) -
      reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameCowcowPlaying::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameCowcowPlaying*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 BetArea = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_betarea(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 BetScore = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_betscore(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameCowcowPlaying::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameCowcowPlaying)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 BetArea = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BetScore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameCowcowPlaying)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameCowcowPlaying)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameCowcowPlaying::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameCowcowPlaying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->betarea(), output);
  }

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->betscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameCowcowPlaying)
}

::google::protobuf::uint8* GameCowcowPlaying::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameCowcowPlaying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->betarea(), target);
  }

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->betscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameCowcowPlaying)
  return target;
}

size_t GameCowcowPlaying::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameCowcowPlaying)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->betscore());
  }

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->betarea());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameCowcowPlaying::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameCowcowPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCowcowPlaying* source =
      ::google::protobuf::DynamicCastToGenerated<GameCowcowPlaying>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameCowcowPlaying)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameCowcowPlaying)
    MergeFrom(*source);
  }
}

void GameCowcowPlaying::MergeFrom(const GameCowcowPlaying& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameCowcowPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.betscore() != 0) {
    set_betscore(from.betscore());
  }
  if (from.betarea() != 0) {
    set_betarea(from.betarea());
  }
}

void GameCowcowPlaying::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameCowcowPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCowcowPlaying::CopyFrom(const GameCowcowPlaying& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameCowcowPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCowcowPlaying::IsInitialized() const {
  return true;
}

void GameCowcowPlaying::Swap(GameCowcowPlaying* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCowcowPlaying::InternalSwap(GameCowcowPlaying* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(betscore_, other->betscore_);
  swap(betarea_, other->betarea_);
}

::google::protobuf::Metadata GameCowcowPlaying::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cowcow_2eproto);
  return ::file_level_metadata_cowcow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameCowcowBetResult::InitAsDefaultInstance() {
}
class GameCowcowBetResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCowcowBetResult::kStateFieldNumber;
const int GameCowcowBetResult::kHintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCowcowBetResult::GameCowcowBetResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameCowcowBetResult)
}
GameCowcowBetResult::GameCowcowBetResult(const GameCowcowBetResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hints().size() > 0) {
    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:go.GameCowcowBetResult)
}

void GameCowcowBetResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameCowcowBetResult_cowcow_2eproto.base);
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

GameCowcowBetResult::~GameCowcowBetResult() {
  // @@protoc_insertion_point(destructor:go.GameCowcowBetResult)
  SharedDtor();
}

void GameCowcowBetResult::SharedDtor() {
  hints_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameCowcowBetResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameCowcowBetResult& GameCowcowBetResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameCowcowBetResult_cowcow_2eproto.base);
  return *internal_default_instance();
}


void GameCowcowBetResult::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameCowcowBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameCowcowBetResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameCowcowBetResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 State = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string Hints = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("go.GameCowcowBetResult.Hints");
        object = msg->mutable_hints();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameCowcowBetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameCowcowBetResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 State = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Hints = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hints().data(), static_cast<int>(this->hints().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.GameCowcowBetResult.Hints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameCowcowBetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameCowcowBetResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameCowcowBetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameCowcowBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // string Hints = 2;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameCowcowBetResult.Hints");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hints(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameCowcowBetResult)
}

::google::protobuf::uint8* GameCowcowBetResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameCowcowBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // string Hints = 2;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameCowcowBetResult.Hints");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hints(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameCowcowBetResult)
  return target;
}

size_t GameCowcowBetResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameCowcowBetResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Hints = 2;
  if (this->hints().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hints());
  }

  // int32 State = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameCowcowBetResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameCowcowBetResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCowcowBetResult* source =
      ::google::protobuf::DynamicCastToGenerated<GameCowcowBetResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameCowcowBetResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameCowcowBetResult)
    MergeFrom(*source);
  }
}

void GameCowcowBetResult::MergeFrom(const GameCowcowBetResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameCowcowBetResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hints().size() > 0) {

    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GameCowcowBetResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameCowcowBetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCowcowBetResult::CopyFrom(const GameCowcowBetResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameCowcowBetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCowcowBetResult::IsInitialized() const {
  return true;
}

void GameCowcowBetResult::Swap(GameCowcowBetResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCowcowBetResult::InternalSwap(GameCowcowBetResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hints_.Swap(&other->hints_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::google::protobuf::Metadata GameCowcowBetResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cowcow_2eproto);
  return ::file_level_metadata_cowcow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameCowcowOver::InitAsDefaultInstance() {
}
class GameCowcowOver::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCowcowOver::kAwardAreaFieldNumber;
const int GameCowcowOver::kBankerCardFieldNumber;
const int GameCowcowOver::kTianCardFieldNumber;
const int GameCowcowOver::kXuanCardFieldNumber;
const int GameCowcowOver::kDiCardFieldNumber;
const int GameCowcowOver::kHuangCardFieldNumber;
const int GameCowcowOver::kCardValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCowcowOver::GameCowcowOver()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameCowcowOver)
}
GameCowcowOver::GameCowcowOver(const GameCowcowOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  awardarea_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.awardarea().size() > 0) {
    awardarea_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.awardarea_);
  }
  bankercard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bankercard().size() > 0) {
    bankercard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bankercard_);
  }
  tiancard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tiancard().size() > 0) {
    tiancard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tiancard_);
  }
  xuancard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.xuancard().size() > 0) {
    xuancard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xuancard_);
  }
  dicard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dicard().size() > 0) {
    dicard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dicard_);
  }
  huangcard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.huangcard().size() > 0) {
    huangcard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.huangcard_);
  }
  cardvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cardvalue().size() > 0) {
    cardvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardvalue_);
  }
  // @@protoc_insertion_point(copy_constructor:go.GameCowcowOver)
}

void GameCowcowOver::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameCowcowOver_cowcow_2eproto.base);
  awardarea_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bankercard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tiancard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xuancard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dicard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  huangcard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameCowcowOver::~GameCowcowOver() {
  // @@protoc_insertion_point(destructor:go.GameCowcowOver)
  SharedDtor();
}

void GameCowcowOver::SharedDtor() {
  awardarea_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bankercard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tiancard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xuancard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dicard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  huangcard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameCowcowOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameCowcowOver& GameCowcowOver::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameCowcowOver_cowcow_2eproto.base);
  return *internal_default_instance();
}


void GameCowcowOver::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameCowcowOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  awardarea_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bankercard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tiancard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xuancard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dicard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  huangcard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameCowcowOver::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameCowcowOver*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes AwardArea = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_awardarea();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes BankerCard = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_bankercard();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes TianCard = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_tiancard();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes XuanCard = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_xuancard();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes DiCard = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_dicard();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes HuangCard = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_huangcard();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes CardValue = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cardvalue();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameCowcowOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameCowcowOver)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes AwardArea = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_awardarea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes BankerCard = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bankercard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes TianCard = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tiancard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes XuanCard = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_xuancard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes DiCard = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dicard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes HuangCard = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_huangcard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes CardValue = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cardvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameCowcowOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameCowcowOver)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameCowcowOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameCowcowOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes AwardArea = 1;
  if (this->awardarea().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->awardarea(), output);
  }

  // bytes BankerCard = 2;
  if (this->bankercard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bankercard(), output);
  }

  // bytes TianCard = 3;
  if (this->tiancard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->tiancard(), output);
  }

  // bytes XuanCard = 4;
  if (this->xuancard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->xuancard(), output);
  }

  // bytes DiCard = 5;
  if (this->dicard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->dicard(), output);
  }

  // bytes HuangCard = 6;
  if (this->huangcard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->huangcard(), output);
  }

  // bytes CardValue = 7;
  if (this->cardvalue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->cardvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameCowcowOver)
}

::google::protobuf::uint8* GameCowcowOver::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameCowcowOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes AwardArea = 1;
  if (this->awardarea().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->awardarea(), target);
  }

  // bytes BankerCard = 2;
  if (this->bankercard().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bankercard(), target);
  }

  // bytes TianCard = 3;
  if (this->tiancard().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->tiancard(), target);
  }

  // bytes XuanCard = 4;
  if (this->xuancard().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->xuancard(), target);
  }

  // bytes DiCard = 5;
  if (this->dicard().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->dicard(), target);
  }

  // bytes HuangCard = 6;
  if (this->huangcard().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->huangcard(), target);
  }

  // bytes CardValue = 7;
  if (this->cardvalue().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->cardvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameCowcowOver)
  return target;
}

size_t GameCowcowOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameCowcowOver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes AwardArea = 1;
  if (this->awardarea().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->awardarea());
  }

  // bytes BankerCard = 2;
  if (this->bankercard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bankercard());
  }

  // bytes TianCard = 3;
  if (this->tiancard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tiancard());
  }

  // bytes XuanCard = 4;
  if (this->xuancard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->xuancard());
  }

  // bytes DiCard = 5;
  if (this->dicard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dicard());
  }

  // bytes HuangCard = 6;
  if (this->huangcard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->huangcard());
  }

  // bytes CardValue = 7;
  if (this->cardvalue().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cardvalue());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameCowcowOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameCowcowOver)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCowcowOver* source =
      ::google::protobuf::DynamicCastToGenerated<GameCowcowOver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameCowcowOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameCowcowOver)
    MergeFrom(*source);
  }
}

void GameCowcowOver::MergeFrom(const GameCowcowOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameCowcowOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.awardarea().size() > 0) {

    awardarea_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.awardarea_);
  }
  if (from.bankercard().size() > 0) {

    bankercard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bankercard_);
  }
  if (from.tiancard().size() > 0) {

    tiancard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tiancard_);
  }
  if (from.xuancard().size() > 0) {

    xuancard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xuancard_);
  }
  if (from.dicard().size() > 0) {

    dicard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dicard_);
  }
  if (from.huangcard().size() > 0) {

    huangcard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.huangcard_);
  }
  if (from.cardvalue().size() > 0) {

    cardvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardvalue_);
  }
}

void GameCowcowOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameCowcowOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCowcowOver::CopyFrom(const GameCowcowOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameCowcowOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCowcowOver::IsInitialized() const {
  return true;
}

void GameCowcowOver::Swap(GameCowcowOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCowcowOver::InternalSwap(GameCowcowOver* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  awardarea_.Swap(&other->awardarea_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bankercard_.Swap(&other->bankercard_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tiancard_.Swap(&other->tiancard_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  xuancard_.Swap(&other->xuancard_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dicard_.Swap(&other->dicard_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  huangcard_.Swap(&other->huangcard_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cardvalue_.Swap(&other->cardvalue_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GameCowcowOver::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cowcow_2eproto);
  return ::file_level_metadata_cowcow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameCowcowCheckout::InitAsDefaultInstance() {
}
class GameCowcowCheckout::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCowcowCheckout::kAcquireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCowcowCheckout::GameCowcowCheckout()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameCowcowCheckout)
}
GameCowcowCheckout::GameCowcowCheckout(const GameCowcowCheckout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acquire_ = from.acquire_;
  // @@protoc_insertion_point(copy_constructor:go.GameCowcowCheckout)
}

void GameCowcowCheckout::SharedCtor() {
  acquire_ = PROTOBUF_LONGLONG(0);
}

GameCowcowCheckout::~GameCowcowCheckout() {
  // @@protoc_insertion_point(destructor:go.GameCowcowCheckout)
  SharedDtor();
}

void GameCowcowCheckout::SharedDtor() {
}

void GameCowcowCheckout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameCowcowCheckout& GameCowcowCheckout::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameCowcowCheckout_cowcow_2eproto.base);
  return *internal_default_instance();
}


void GameCowcowCheckout::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameCowcowCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acquire_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameCowcowCheckout::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameCowcowCheckout*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 Acquire = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_acquire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameCowcowCheckout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameCowcowCheckout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 Acquire = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &acquire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameCowcowCheckout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameCowcowCheckout)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameCowcowCheckout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameCowcowCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Acquire = 1;
  if (this->acquire() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->acquire(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameCowcowCheckout)
}

::google::protobuf::uint8* GameCowcowCheckout::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameCowcowCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Acquire = 1;
  if (this->acquire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->acquire(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameCowcowCheckout)
  return target;
}

size_t GameCowcowCheckout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameCowcowCheckout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Acquire = 1;
  if (this->acquire() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->acquire());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameCowcowCheckout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameCowcowCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCowcowCheckout* source =
      ::google::protobuf::DynamicCastToGenerated<GameCowcowCheckout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameCowcowCheckout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameCowcowCheckout)
    MergeFrom(*source);
  }
}

void GameCowcowCheckout::MergeFrom(const GameCowcowCheckout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameCowcowCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acquire() != 0) {
    set_acquire(from.acquire());
  }
}

void GameCowcowCheckout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameCowcowCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCowcowCheckout::CopyFrom(const GameCowcowCheckout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameCowcowCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCowcowCheckout::IsInitialized() const {
  return true;
}

void GameCowcowCheckout::Swap(GameCowcowCheckout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCowcowCheckout::InternalSwap(GameCowcowCheckout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(acquire_, other->acquire_);
}

::google::protobuf::Metadata GameCowcowCheckout::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cowcow_2eproto);
  return ::file_level_metadata_cowcow_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace go
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::go::GameCowcowEnter* Arena::CreateMaybeMessage< ::go::GameCowcowEnter >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameCowcowEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameCowcowHost* Arena::CreateMaybeMessage< ::go::GameCowcowHost >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameCowcowHost >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameCowcowSuperHost* Arena::CreateMaybeMessage< ::go::GameCowcowSuperHost >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameCowcowSuperHost >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameCowcowPlaying* Arena::CreateMaybeMessage< ::go::GameCowcowPlaying >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameCowcowPlaying >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameCowcowBetResult* Arena::CreateMaybeMessage< ::go::GameCowcowBetResult >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameCowcowBetResult >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameCowcowOver* Arena::CreateMaybeMessage< ::go::GameCowcowOver >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameCowcowOver >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameCowcowCheckout* Arena::CreateMaybeMessage< ::go::GameCowcowCheckout >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameCowcowCheckout >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
