// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fishLord.proto

#include "fishLord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace go {
class GameFishLordEnterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameFishLordEnter> _instance;
} _GameFishLordEnter_default_instance_;
class GameFishLordPlayingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameFishLordPlaying> _instance;
} _GameFishLordPlaying_default_instance_;
class GameFishLordBetResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameFishLordBetResult> _instance;
} _GameFishLordBetResult_default_instance_;
class GameFishLordOverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameFishLordOver> _instance;
} _GameFishLordOver_default_instance_;
}  // namespace go
static void InitDefaultsGameFishLordEnter_fishLord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameFishLordEnter_default_instance_;
    new (ptr) ::go::GameFishLordEnter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameFishLordEnter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameFishLordEnter_fishLord_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameFishLordEnter_fishLord_2eproto}, {}};

static void InitDefaultsGameFishLordPlaying_fishLord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameFishLordPlaying_default_instance_;
    new (ptr) ::go::GameFishLordPlaying();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameFishLordPlaying::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameFishLordPlaying_fishLord_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameFishLordPlaying_fishLord_2eproto}, {}};

static void InitDefaultsGameFishLordBetResult_fishLord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameFishLordBetResult_default_instance_;
    new (ptr) ::go::GameFishLordBetResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameFishLordBetResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameFishLordBetResult_fishLord_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameFishLordBetResult_fishLord_2eproto}, {}};

static void InitDefaultsGameFishLordOver_fishLord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameFishLordOver_default_instance_;
    new (ptr) ::go::GameFishLordOver();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameFishLordOver::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameFishLordOver_fishLord_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameFishLordOver_fishLord_2eproto}, {}};

void InitDefaults_fishLord_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameFishLordEnter_fishLord_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameFishLordPlaying_fishLord_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameFishLordBetResult_fishLord_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameFishLordOver_fishLord_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_fishLord_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_fishLord_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_fishLord_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_fishLord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordEnter, awardareas_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordEnter, players_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordEnter, countdown_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordEnter, chips_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordEnter, odds_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordEnter, bankerscore_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordEnter, playerscore_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordEnter, acquire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordPlaying, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordPlaying, betarea_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordPlaying, betscore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordBetResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordBetResult, state_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordBetResult, hints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordOver, awardarea_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordOver, playercard_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordOver, bankercard_),
  PROTOBUF_FIELD_OFFSET(::go::GameFishLordOver, acquire_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::go::GameFishLordEnter)},
  { 13, -1, sizeof(::go::GameFishLordPlaying)},
  { 20, -1, sizeof(::go::GameFishLordBetResult)},
  { 27, -1, sizeof(::go::GameFishLordOver)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameFishLordEnter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameFishLordPlaying_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameFishLordBetResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameFishLordOver_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_fishLord_2eproto = {
  {}, AddDescriptors_fishLord_2eproto, "fishLord.proto", schemas,
  file_default_instances, TableStruct_fishLord_2eproto::offsets,
  file_level_metadata_fishLord_2eproto, 4, file_level_enum_descriptors_fishLord_2eproto, file_level_service_descriptors_fishLord_2eproto,
};

const char descriptor_table_protodef_fishLord_2eproto[] =
  "\n\016fishLord.proto\022\002go\"\243\001\n\021GameFishLordEnt"
  "er\022\022\n\nAwardAreas\030\001 \003(\005\022\017\n\007players\030\002 \003(\t\022"
  "\021\n\tCountdown\030\003 \001(\005\022\r\n\005Chips\030\004 \003(\005\022\014\n\004Odd"
  "s\030\005 \003(\005\022\023\n\013BankerScore\030\006 \001(\003\022\023\n\013PlayerSc"
  "ore\030\007 \001(\003\022\017\n\007Acquire\030\010 \001(\003\"8\n\023GameFishLo"
  "rdPlaying\022\017\n\007BetArea\030\001 \001(\005\022\020\n\010BetScore\030\002"
  " \001(\003\"5\n\025GameFishLordBetResult\022\r\n\005State\030\001"
  " \001(\005\022\r\n\005Hints\030\002 \001(\t\"^\n\020GameFishLordOver\022"
  "\021\n\tAwardArea\030\001 \003(\005\022\022\n\nPlayerCard\030\002 \003(\005\022\022"
  "\n\nBankerCard\030\003 \003(\005\022\017\n\007Acquire\030\004 \001(\003b\006pro"
  "to3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_fishLord_2eproto = {
  false, InitDefaults_fishLord_2eproto, 
  descriptor_table_protodef_fishLord_2eproto,
  "fishLord.proto", &assign_descriptors_table_fishLord_2eproto, 403,
};

void AddDescriptors_fishLord_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_fishLord_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fishLord_2eproto = []() { AddDescriptors_fishLord_2eproto(); return true; }();
namespace go {

// ===================================================================

void GameFishLordEnter::InitAsDefaultInstance() {
}
class GameFishLordEnter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameFishLordEnter::kAwardAreasFieldNumber;
const int GameFishLordEnter::kPlayersFieldNumber;
const int GameFishLordEnter::kCountdownFieldNumber;
const int GameFishLordEnter::kChipsFieldNumber;
const int GameFishLordEnter::kOddsFieldNumber;
const int GameFishLordEnter::kBankerScoreFieldNumber;
const int GameFishLordEnter::kPlayerScoreFieldNumber;
const int GameFishLordEnter::kAcquireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameFishLordEnter::GameFishLordEnter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameFishLordEnter)
}
GameFishLordEnter::GameFishLordEnter(const GameFishLordEnter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      awardareas_(from.awardareas_),
      players_(from.players_),
      chips_(from.chips_),
      odds_(from.odds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bankerscore_, &from.bankerscore_,
    static_cast<size_t>(reinterpret_cast<char*>(&countdown_) -
    reinterpret_cast<char*>(&bankerscore_)) + sizeof(countdown_));
  // @@protoc_insertion_point(copy_constructor:go.GameFishLordEnter)
}

void GameFishLordEnter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameFishLordEnter_fishLord_2eproto.base);
  ::memset(&bankerscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&countdown_) -
      reinterpret_cast<char*>(&bankerscore_)) + sizeof(countdown_));
}

GameFishLordEnter::~GameFishLordEnter() {
  // @@protoc_insertion_point(destructor:go.GameFishLordEnter)
  SharedDtor();
}

void GameFishLordEnter::SharedDtor() {
}

void GameFishLordEnter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameFishLordEnter& GameFishLordEnter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameFishLordEnter_fishLord_2eproto.base);
  return *internal_default_instance();
}


void GameFishLordEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameFishLordEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  awardareas_.Clear();
  players_.Clear();
  chips_.Clear();
  odds_.Clear();
  ::memset(&bankerscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&countdown_) -
      reinterpret_cast<char*>(&bankerscore_)) + sizeof(countdown_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameFishLordEnter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameFishLordEnter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 AwardAreas = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_awardareas();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_awardareas(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // repeated string players = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("go.GameFishLordEnter.players");
          object = msg->add_players();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // int32 Countdown = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_countdown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 Chips = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_chips();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          msg->add_chips(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      // repeated int32 Odds = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_odds();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          msg->add_odds(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      // int64 BankerScore = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_bankerscore(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 PlayerScore = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_playerscore(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 Acquire = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_acquire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameFishLordEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameFishLordEnter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 AwardAreas = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_awardareas())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_awardareas())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_players()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->players(this->players_size() - 1).data(),
            static_cast<int>(this->players(this->players_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.GameFishLordEnter.players"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Countdown = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Chips = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chips())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_chips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Odds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_odds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_odds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BankerScore = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bankerscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 PlayerScore = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Acquire = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &acquire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameFishLordEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameFishLordEnter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameFishLordEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameFishLordEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 AwardAreas = 1;
  if (this->awardareas_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_awardareas_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->awardareas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->awardareas(i), output);
  }

  // repeated string players = 2;
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->players(i).data(), static_cast<int>(this->players(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameFishLordEnter.players");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->players(i), output);
  }

  // int32 Countdown = 3;
  if (this->countdown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->countdown(), output);
  }

  // repeated int32 Chips = 4;
  if (this->chips_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chips_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->chips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->chips(i), output);
  }

  // repeated int32 Odds = 5;
  if (this->odds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_odds_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->odds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->odds(i), output);
  }

  // int64 BankerScore = 6;
  if (this->bankerscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->bankerscore(), output);
  }

  // int64 PlayerScore = 7;
  if (this->playerscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->playerscore(), output);
  }

  // int64 Acquire = 8;
  if (this->acquire() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->acquire(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameFishLordEnter)
}

::google::protobuf::uint8* GameFishLordEnter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameFishLordEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 AwardAreas = 1;
  if (this->awardareas_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _awardareas_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->awardareas_, target);
  }

  // repeated string players = 2;
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->players(i).data(), static_cast<int>(this->players(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameFishLordEnter.players");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->players(i), target);
  }

  // int32 Countdown = 3;
  if (this->countdown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->countdown(), target);
  }

  // repeated int32 Chips = 4;
  if (this->chips_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _chips_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->chips_, target);
  }

  // repeated int32 Odds = 5;
  if (this->odds_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _odds_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->odds_, target);
  }

  // int64 BankerScore = 6;
  if (this->bankerscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->bankerscore(), target);
  }

  // int64 PlayerScore = 7;
  if (this->playerscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->playerscore(), target);
  }

  // int64 Acquire = 8;
  if (this->acquire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->acquire(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameFishLordEnter)
  return target;
}

size_t GameFishLordEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameFishLordEnter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 AwardAreas = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->awardareas_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _awardareas_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string players = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->players_size());
  for (int i = 0, n = this->players_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->players(i));
  }

  // repeated int32 Chips = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chips_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _chips_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 Odds = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->odds_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _odds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 BankerScore = 6;
  if (this->bankerscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bankerscore());
  }

  // int64 PlayerScore = 7;
  if (this->playerscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->playerscore());
  }

  // int64 Acquire = 8;
  if (this->acquire() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->acquire());
  }

  // int32 Countdown = 3;
  if (this->countdown() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countdown());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameFishLordEnter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameFishLordEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameFishLordEnter* source =
      ::google::protobuf::DynamicCastToGenerated<GameFishLordEnter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameFishLordEnter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameFishLordEnter)
    MergeFrom(*source);
  }
}

void GameFishLordEnter::MergeFrom(const GameFishLordEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameFishLordEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  awardareas_.MergeFrom(from.awardareas_);
  players_.MergeFrom(from.players_);
  chips_.MergeFrom(from.chips_);
  odds_.MergeFrom(from.odds_);
  if (from.bankerscore() != 0) {
    set_bankerscore(from.bankerscore());
  }
  if (from.playerscore() != 0) {
    set_playerscore(from.playerscore());
  }
  if (from.acquire() != 0) {
    set_acquire(from.acquire());
  }
  if (from.countdown() != 0) {
    set_countdown(from.countdown());
  }
}

void GameFishLordEnter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameFishLordEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFishLordEnter::CopyFrom(const GameFishLordEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameFishLordEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFishLordEnter::IsInitialized() const {
  return true;
}

void GameFishLordEnter::Swap(GameFishLordEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameFishLordEnter::InternalSwap(GameFishLordEnter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  awardareas_.InternalSwap(&other->awardareas_);
  players_.InternalSwap(CastToBase(&other->players_));
  chips_.InternalSwap(&other->chips_);
  odds_.InternalSwap(&other->odds_);
  swap(bankerscore_, other->bankerscore_);
  swap(playerscore_, other->playerscore_);
  swap(acquire_, other->acquire_);
  swap(countdown_, other->countdown_);
}

::google::protobuf::Metadata GameFishLordEnter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_fishLord_2eproto);
  return ::file_level_metadata_fishLord_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameFishLordPlaying::InitAsDefaultInstance() {
}
class GameFishLordPlaying::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameFishLordPlaying::kBetAreaFieldNumber;
const int GameFishLordPlaying::kBetScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameFishLordPlaying::GameFishLordPlaying()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameFishLordPlaying)
}
GameFishLordPlaying::GameFishLordPlaying(const GameFishLordPlaying& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&betscore_, &from.betscore_,
    static_cast<size_t>(reinterpret_cast<char*>(&betarea_) -
    reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
  // @@protoc_insertion_point(copy_constructor:go.GameFishLordPlaying)
}

void GameFishLordPlaying::SharedCtor() {
  ::memset(&betscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betarea_) -
      reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
}

GameFishLordPlaying::~GameFishLordPlaying() {
  // @@protoc_insertion_point(destructor:go.GameFishLordPlaying)
  SharedDtor();
}

void GameFishLordPlaying::SharedDtor() {
}

void GameFishLordPlaying::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameFishLordPlaying& GameFishLordPlaying::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameFishLordPlaying_fishLord_2eproto.base);
  return *internal_default_instance();
}


void GameFishLordPlaying::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameFishLordPlaying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&betscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betarea_) -
      reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameFishLordPlaying::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameFishLordPlaying*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 BetArea = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_betarea(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 BetScore = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_betscore(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameFishLordPlaying::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameFishLordPlaying)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 BetArea = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BetScore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameFishLordPlaying)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameFishLordPlaying)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameFishLordPlaying::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameFishLordPlaying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->betarea(), output);
  }

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->betscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameFishLordPlaying)
}

::google::protobuf::uint8* GameFishLordPlaying::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameFishLordPlaying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->betarea(), target);
  }

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->betscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameFishLordPlaying)
  return target;
}

size_t GameFishLordPlaying::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameFishLordPlaying)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->betscore());
  }

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->betarea());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameFishLordPlaying::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameFishLordPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  const GameFishLordPlaying* source =
      ::google::protobuf::DynamicCastToGenerated<GameFishLordPlaying>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameFishLordPlaying)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameFishLordPlaying)
    MergeFrom(*source);
  }
}

void GameFishLordPlaying::MergeFrom(const GameFishLordPlaying& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameFishLordPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.betscore() != 0) {
    set_betscore(from.betscore());
  }
  if (from.betarea() != 0) {
    set_betarea(from.betarea());
  }
}

void GameFishLordPlaying::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameFishLordPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFishLordPlaying::CopyFrom(const GameFishLordPlaying& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameFishLordPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFishLordPlaying::IsInitialized() const {
  return true;
}

void GameFishLordPlaying::Swap(GameFishLordPlaying* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameFishLordPlaying::InternalSwap(GameFishLordPlaying* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(betscore_, other->betscore_);
  swap(betarea_, other->betarea_);
}

::google::protobuf::Metadata GameFishLordPlaying::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_fishLord_2eproto);
  return ::file_level_metadata_fishLord_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameFishLordBetResult::InitAsDefaultInstance() {
}
class GameFishLordBetResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameFishLordBetResult::kStateFieldNumber;
const int GameFishLordBetResult::kHintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameFishLordBetResult::GameFishLordBetResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameFishLordBetResult)
}
GameFishLordBetResult::GameFishLordBetResult(const GameFishLordBetResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hints().size() > 0) {
    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:go.GameFishLordBetResult)
}

void GameFishLordBetResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameFishLordBetResult_fishLord_2eproto.base);
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

GameFishLordBetResult::~GameFishLordBetResult() {
  // @@protoc_insertion_point(destructor:go.GameFishLordBetResult)
  SharedDtor();
}

void GameFishLordBetResult::SharedDtor() {
  hints_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameFishLordBetResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameFishLordBetResult& GameFishLordBetResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameFishLordBetResult_fishLord_2eproto.base);
  return *internal_default_instance();
}


void GameFishLordBetResult::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameFishLordBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameFishLordBetResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameFishLordBetResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 State = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string Hints = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("go.GameFishLordBetResult.Hints");
        object = msg->mutable_hints();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameFishLordBetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameFishLordBetResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 State = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Hints = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hints().data(), static_cast<int>(this->hints().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.GameFishLordBetResult.Hints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameFishLordBetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameFishLordBetResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameFishLordBetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameFishLordBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // string Hints = 2;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameFishLordBetResult.Hints");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hints(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameFishLordBetResult)
}

::google::protobuf::uint8* GameFishLordBetResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameFishLordBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // string Hints = 2;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameFishLordBetResult.Hints");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hints(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameFishLordBetResult)
  return target;
}

size_t GameFishLordBetResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameFishLordBetResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Hints = 2;
  if (this->hints().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hints());
  }

  // int32 State = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameFishLordBetResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameFishLordBetResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameFishLordBetResult* source =
      ::google::protobuf::DynamicCastToGenerated<GameFishLordBetResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameFishLordBetResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameFishLordBetResult)
    MergeFrom(*source);
  }
}

void GameFishLordBetResult::MergeFrom(const GameFishLordBetResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameFishLordBetResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hints().size() > 0) {

    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GameFishLordBetResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameFishLordBetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFishLordBetResult::CopyFrom(const GameFishLordBetResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameFishLordBetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFishLordBetResult::IsInitialized() const {
  return true;
}

void GameFishLordBetResult::Swap(GameFishLordBetResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameFishLordBetResult::InternalSwap(GameFishLordBetResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hints_.Swap(&other->hints_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::google::protobuf::Metadata GameFishLordBetResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_fishLord_2eproto);
  return ::file_level_metadata_fishLord_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameFishLordOver::InitAsDefaultInstance() {
}
class GameFishLordOver::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameFishLordOver::kAwardAreaFieldNumber;
const int GameFishLordOver::kPlayerCardFieldNumber;
const int GameFishLordOver::kBankerCardFieldNumber;
const int GameFishLordOver::kAcquireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameFishLordOver::GameFishLordOver()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameFishLordOver)
}
GameFishLordOver::GameFishLordOver(const GameFishLordOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      awardarea_(from.awardarea_),
      playercard_(from.playercard_),
      bankercard_(from.bankercard_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acquire_ = from.acquire_;
  // @@protoc_insertion_point(copy_constructor:go.GameFishLordOver)
}

void GameFishLordOver::SharedCtor() {
  acquire_ = PROTOBUF_LONGLONG(0);
}

GameFishLordOver::~GameFishLordOver() {
  // @@protoc_insertion_point(destructor:go.GameFishLordOver)
  SharedDtor();
}

void GameFishLordOver::SharedDtor() {
}

void GameFishLordOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameFishLordOver& GameFishLordOver::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameFishLordOver_fishLord_2eproto.base);
  return *internal_default_instance();
}


void GameFishLordOver::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameFishLordOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  awardarea_.Clear();
  playercard_.Clear();
  bankercard_.Clear();
  acquire_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameFishLordOver::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameFishLordOver*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 AwardArea = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_awardarea();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_awardarea(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // repeated int32 PlayerCard = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_playercard();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_playercard(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // repeated int32 BankerCard = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_bankercard();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_bankercard(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // int64 Acquire = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_acquire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameFishLordOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameFishLordOver)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 AwardArea = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_awardarea())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_awardarea())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 PlayerCard = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playercard())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_playercard())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 BankerCard = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bankercard())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_bankercard())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Acquire = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &acquire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameFishLordOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameFishLordOver)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameFishLordOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameFishLordOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 AwardArea = 1;
  if (this->awardarea_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_awardarea_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->awardarea_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->awardarea(i), output);
  }

  // repeated int32 PlayerCard = 2;
  if (this->playercard_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_playercard_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->playercard_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->playercard(i), output);
  }

  // repeated int32 BankerCard = 3;
  if (this->bankercard_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bankercard_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->bankercard_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->bankercard(i), output);
  }

  // int64 Acquire = 4;
  if (this->acquire() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->acquire(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameFishLordOver)
}

::google::protobuf::uint8* GameFishLordOver::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameFishLordOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 AwardArea = 1;
  if (this->awardarea_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _awardarea_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->awardarea_, target);
  }

  // repeated int32 PlayerCard = 2;
  if (this->playercard_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _playercard_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->playercard_, target);
  }

  // repeated int32 BankerCard = 3;
  if (this->bankercard_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _bankercard_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->bankercard_, target);
  }

  // int64 Acquire = 4;
  if (this->acquire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->acquire(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameFishLordOver)
  return target;
}

size_t GameFishLordOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameFishLordOver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 AwardArea = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->awardarea_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _awardarea_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 PlayerCard = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->playercard_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _playercard_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 BankerCard = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->bankercard_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _bankercard_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 Acquire = 4;
  if (this->acquire() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->acquire());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameFishLordOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameFishLordOver)
  GOOGLE_DCHECK_NE(&from, this);
  const GameFishLordOver* source =
      ::google::protobuf::DynamicCastToGenerated<GameFishLordOver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameFishLordOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameFishLordOver)
    MergeFrom(*source);
  }
}

void GameFishLordOver::MergeFrom(const GameFishLordOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameFishLordOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  awardarea_.MergeFrom(from.awardarea_);
  playercard_.MergeFrom(from.playercard_);
  bankercard_.MergeFrom(from.bankercard_);
  if (from.acquire() != 0) {
    set_acquire(from.acquire());
  }
}

void GameFishLordOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameFishLordOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFishLordOver::CopyFrom(const GameFishLordOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameFishLordOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFishLordOver::IsInitialized() const {
  return true;
}

void GameFishLordOver::Swap(GameFishLordOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameFishLordOver::InternalSwap(GameFishLordOver* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  awardarea_.InternalSwap(&other->awardarea_);
  playercard_.InternalSwap(&other->playercard_);
  bankercard_.InternalSwap(&other->bankercard_);
  swap(acquire_, other->acquire_);
}

::google::protobuf::Metadata GameFishLordOver::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_fishLord_2eproto);
  return ::file_level_metadata_fishLord_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace go
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::go::GameFishLordEnter* Arena::CreateMaybeMessage< ::go::GameFishLordEnter >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameFishLordEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameFishLordPlaying* Arena::CreateMaybeMessage< ::go::GameFishLordPlaying >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameFishLordPlaying >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameFishLordBetResult* Arena::CreateMaybeMessage< ::go::GameFishLordBetResult >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameFishLordBetResult >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameFishLordOver* Arena::CreateMaybeMessage< ::go::GameFishLordOver >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameFishLordOver >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
