// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong.proto

#ifndef PROTOBUF_INCLUDED_mahjong_2eproto
#define PROTOBUF_INCLUDED_mahjong_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gamecomm.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mahjong_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_mahjong_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_mahjong_2eproto();
namespace go {
class GameMahjongAward;
class GameMahjongAwardDefaultTypeInternal;
extern GameMahjongAwardDefaultTypeInternal _GameMahjongAward_default_instance_;
class GameMahjongBegins;
class GameMahjongBeginsDefaultTypeInternal;
extern GameMahjongBeginsDefaultTypeInternal _GameMahjongBegins_default_instance_;
class GameMahjongCheckout;
class GameMahjongCheckoutDefaultTypeInternal;
extern GameMahjongCheckoutDefaultTypeInternal _GameMahjongCheckout_default_instance_;
class GameMahjongEnter;
class GameMahjongEnterDefaultTypeInternal;
extern GameMahjongEnterDefaultTypeInternal _GameMahjongEnter_default_instance_;
class GameMahjongOperate;
class GameMahjongOperateDefaultTypeInternal;
extern GameMahjongOperateDefaultTypeInternal _GameMahjongOperate_default_instance_;
class GameMahjongOutcard;
class GameMahjongOutcardDefaultTypeInternal;
extern GameMahjongOutcardDefaultTypeInternal _GameMahjongOutcard_default_instance_;
class GameMahjongPlayer;
class GameMahjongPlayerDefaultTypeInternal;
extern GameMahjongPlayerDefaultTypeInternal _GameMahjongPlayer_default_instance_;
}  // namespace go
namespace google {
namespace protobuf {
template<> ::go::GameMahjongAward* Arena::CreateMaybeMessage<::go::GameMahjongAward>(Arena*);
template<> ::go::GameMahjongBegins* Arena::CreateMaybeMessage<::go::GameMahjongBegins>(Arena*);
template<> ::go::GameMahjongCheckout* Arena::CreateMaybeMessage<::go::GameMahjongCheckout>(Arena*);
template<> ::go::GameMahjongEnter* Arena::CreateMaybeMessage<::go::GameMahjongEnter>(Arena*);
template<> ::go::GameMahjongOperate* Arena::CreateMaybeMessage<::go::GameMahjongOperate>(Arena*);
template<> ::go::GameMahjongOutcard* Arena::CreateMaybeMessage<::go::GameMahjongOutcard>(Arena*);
template<> ::go::GameMahjongPlayer* Arena::CreateMaybeMessage<::go::GameMahjongPlayer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace go {

// ===================================================================

class GameMahjongEnter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameMahjongEnter) */ {
 public:
  GameMahjongEnter();
  virtual ~GameMahjongEnter();

  GameMahjongEnter(const GameMahjongEnter& from);

  inline GameMahjongEnter& operator=(const GameMahjongEnter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameMahjongEnter(GameMahjongEnter&& from) noexcept
    : GameMahjongEnter() {
    *this = ::std::move(from);
  }

  inline GameMahjongEnter& operator=(GameMahjongEnter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameMahjongEnter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMahjongEnter* internal_default_instance() {
    return reinterpret_cast<const GameMahjongEnter*>(
               &_GameMahjongEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameMahjongEnter* other);
  friend void swap(GameMahjongEnter& a, GameMahjongEnter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameMahjongEnter* New() const final {
    return CreateMaybeMessage<GameMahjongEnter>(nullptr);
  }

  GameMahjongEnter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameMahjongEnter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameMahjongEnter& from);
  void MergeFrom(const GameMahjongEnter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMahjongEnter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .go.UserList Players = 3;
  bool has_players() const;
  void clear_players();
  static const int kPlayersFieldNumber = 3;
  const ::go::UserList& players() const;
  ::go::UserList* release_players();
  ::go::UserList* mutable_players();
  void set_allocated_players(::go::UserList* players);

  // uint64 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // int64 TimeStamp = 2;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // uint32 FreeTime = 4;
  void clear_freetime();
  static const int kFreeTimeFieldNumber = 4;
  ::google::protobuf::uint32 freetime() const;
  void set_freetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:go.GameMahjongEnter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::go::UserList* players_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint32 freetime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mahjong_2eproto;
};
// -------------------------------------------------------------------

class GameMahjongPlayer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameMahjongPlayer) */ {
 public:
  GameMahjongPlayer();
  virtual ~GameMahjongPlayer();

  GameMahjongPlayer(const GameMahjongPlayer& from);

  inline GameMahjongPlayer& operator=(const GameMahjongPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameMahjongPlayer(GameMahjongPlayer&& from) noexcept
    : GameMahjongPlayer() {
    *this = ::std::move(from);
  }

  inline GameMahjongPlayer& operator=(GameMahjongPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameMahjongPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMahjongPlayer* internal_default_instance() {
    return reinterpret_cast<const GameMahjongPlayer*>(
               &_GameMahjongPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameMahjongPlayer* other);
  friend void swap(GameMahjongPlayer& a, GameMahjongPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameMahjongPlayer* New() const final {
    return CreateMaybeMessage<GameMahjongPlayer>(nullptr);
  }

  GameMahjongPlayer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameMahjongPlayer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameMahjongPlayer& from);
  void MergeFrom(const GameMahjongPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMahjongPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Cards = 3;
  void clear_cards();
  static const int kCardsFieldNumber = 3;
  const ::std::string& cards() const;
  void set_cards(const ::std::string& value);
  #if LANG_CXX11
  void set_cards(::std::string&& value);
  #endif
  void set_cards(const char* value);
  void set_cards(const void* value, size_t size);
  ::std::string* mutable_cards();
  ::std::string* release_cards();
  void set_allocated_cards(::std::string* cards);

  // uint64 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // uint32 Site = 2;
  void clear_site();
  static const int kSiteFieldNumber = 2;
  ::google::protobuf::uint32 site() const;
  void set_site(::google::protobuf::uint32 value);

  // bool IsBanker = 4;
  void clear_isbanker();
  static const int kIsBankerFieldNumber = 4;
  bool isbanker() const;
  void set_isbanker(bool value);

  // @@protoc_insertion_point(class_scope:go.GameMahjongPlayer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cards_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 site_;
  bool isbanker_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mahjong_2eproto;
};
// -------------------------------------------------------------------

class GameMahjongBegins final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameMahjongBegins) */ {
 public:
  GameMahjongBegins();
  virtual ~GameMahjongBegins();

  GameMahjongBegins(const GameMahjongBegins& from);

  inline GameMahjongBegins& operator=(const GameMahjongBegins& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameMahjongBegins(GameMahjongBegins&& from) noexcept
    : GameMahjongBegins() {
    *this = ::std::move(from);
  }

  inline GameMahjongBegins& operator=(GameMahjongBegins&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameMahjongBegins& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMahjongBegins* internal_default_instance() {
    return reinterpret_cast<const GameMahjongBegins*>(
               &_GameMahjongBegins_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GameMahjongBegins* other);
  friend void swap(GameMahjongBegins& a, GameMahjongBegins& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameMahjongBegins* New() const final {
    return CreateMaybeMessage<GameMahjongBegins>(nullptr);
  }

  GameMahjongBegins* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameMahjongBegins>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameMahjongBegins& from);
  void MergeFrom(const GameMahjongBegins& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMahjongBegins* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .go.GameMahjongPlayer PlayersInfo = 2;
  int playersinfo_size() const;
  void clear_playersinfo();
  static const int kPlayersInfoFieldNumber = 2;
  ::go::GameMahjongPlayer* mutable_playersinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::go::GameMahjongPlayer >*
      mutable_playersinfo();
  const ::go::GameMahjongPlayer& playersinfo(int index) const;
  ::go::GameMahjongPlayer* add_playersinfo();
  const ::google::protobuf::RepeatedPtrField< ::go::GameMahjongPlayer >&
      playersinfo() const;

  // bytes Dice = 1;
  void clear_dice();
  static const int kDiceFieldNumber = 1;
  const ::std::string& dice() const;
  void set_dice(const ::std::string& value);
  #if LANG_CXX11
  void set_dice(::std::string&& value);
  #endif
  void set_dice(const char* value);
  void set_dice(const void* value, size_t size);
  ::std::string* mutable_dice();
  ::std::string* release_dice();
  void set_allocated_dice(::std::string* dice);

  // @@protoc_insertion_point(class_scope:go.GameMahjongBegins)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::go::GameMahjongPlayer > playersinfo_;
  ::google::protobuf::internal::ArenaStringPtr dice_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mahjong_2eproto;
};
// -------------------------------------------------------------------

class GameMahjongOutcard final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameMahjongOutcard) */ {
 public:
  GameMahjongOutcard();
  virtual ~GameMahjongOutcard();

  GameMahjongOutcard(const GameMahjongOutcard& from);

  inline GameMahjongOutcard& operator=(const GameMahjongOutcard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameMahjongOutcard(GameMahjongOutcard&& from) noexcept
    : GameMahjongOutcard() {
    *this = ::std::move(from);
  }

  inline GameMahjongOutcard& operator=(GameMahjongOutcard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameMahjongOutcard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMahjongOutcard* internal_default_instance() {
    return reinterpret_cast<const GameMahjongOutcard*>(
               &_GameMahjongOutcard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GameMahjongOutcard* other);
  friend void swap(GameMahjongOutcard& a, GameMahjongOutcard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameMahjongOutcard* New() const final {
    return CreateMaybeMessage<GameMahjongOutcard>(nullptr);
  }

  GameMahjongOutcard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameMahjongOutcard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameMahjongOutcard& from);
  void MergeFrom(const GameMahjongOutcard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMahjongOutcard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Cards = 2;
  void clear_cards();
  static const int kCardsFieldNumber = 2;
  const ::std::string& cards() const;
  void set_cards(const ::std::string& value);
  #if LANG_CXX11
  void set_cards(::std::string&& value);
  #endif
  void set_cards(const char* value);
  void set_cards(const void* value, size_t size);
  ::std::string* mutable_cards();
  ::std::string* release_cards();
  void set_allocated_cards(::std::string* cards);

  // string Hints = 3;
  void clear_hints();
  static const int kHintsFieldNumber = 3;
  const ::std::string& hints() const;
  void set_hints(const ::std::string& value);
  #if LANG_CXX11
  void set_hints(::std::string&& value);
  #endif
  void set_hints(const char* value);
  void set_hints(const char* value, size_t size);
  ::std::string* mutable_hints();
  ::std::string* release_hints();
  void set_allocated_hints(::std::string* hints);

  // uint32 Site = 1;
  void clear_site();
  static const int kSiteFieldNumber = 1;
  ::google::protobuf::uint32 site() const;
  void set_site(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:go.GameMahjongOutcard)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cards_;
  ::google::protobuf::internal::ArenaStringPtr hints_;
  ::google::protobuf::uint32 site_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mahjong_2eproto;
};
// -------------------------------------------------------------------

class GameMahjongOperate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameMahjongOperate) */ {
 public:
  GameMahjongOperate();
  virtual ~GameMahjongOperate();

  GameMahjongOperate(const GameMahjongOperate& from);

  inline GameMahjongOperate& operator=(const GameMahjongOperate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameMahjongOperate(GameMahjongOperate&& from) noexcept
    : GameMahjongOperate() {
    *this = ::std::move(from);
  }

  inline GameMahjongOperate& operator=(GameMahjongOperate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameMahjongOperate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMahjongOperate* internal_default_instance() {
    return reinterpret_cast<const GameMahjongOperate*>(
               &_GameMahjongOperate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GameMahjongOperate* other);
  friend void swap(GameMahjongOperate& a, GameMahjongOperate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameMahjongOperate* New() const final {
    return CreateMaybeMessage<GameMahjongOperate>(nullptr);
  }

  GameMahjongOperate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameMahjongOperate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameMahjongOperate& from);
  void MergeFrom(const GameMahjongOperate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMahjongOperate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Cards = 2;
  void clear_cards();
  static const int kCardsFieldNumber = 2;
  const ::std::string& cards() const;
  void set_cards(const ::std::string& value);
  #if LANG_CXX11
  void set_cards(::std::string&& value);
  #endif
  void set_cards(const char* value);
  void set_cards(const void* value, size_t size);
  ::std::string* mutable_cards();
  ::std::string* release_cards();
  void set_allocated_cards(::std::string* cards);

  // string Hints = 3;
  void clear_hints();
  static const int kHintsFieldNumber = 3;
  const ::std::string& hints() const;
  void set_hints(const ::std::string& value);
  #if LANG_CXX11
  void set_hints(::std::string&& value);
  #endif
  void set_hints(const char* value);
  void set_hints(const char* value, size_t size);
  ::std::string* mutable_hints();
  ::std::string* release_hints();
  void set_allocated_hints(::std::string* hints);

  // int32 Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:go.GameMahjongOperate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cards_;
  ::google::protobuf::internal::ArenaStringPtr hints_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mahjong_2eproto;
};
// -------------------------------------------------------------------

class GameMahjongAward final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameMahjongAward) */ {
 public:
  GameMahjongAward();
  virtual ~GameMahjongAward();

  GameMahjongAward(const GameMahjongAward& from);

  inline GameMahjongAward& operator=(const GameMahjongAward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameMahjongAward(GameMahjongAward&& from) noexcept
    : GameMahjongAward() {
    *this = ::std::move(from);
  }

  inline GameMahjongAward& operator=(GameMahjongAward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameMahjongAward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMahjongAward* internal_default_instance() {
    return reinterpret_cast<const GameMahjongAward*>(
               &_GameMahjongAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GameMahjongAward* other);
  friend void swap(GameMahjongAward& a, GameMahjongAward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameMahjongAward* New() const final {
    return CreateMaybeMessage<GameMahjongAward>(nullptr);
  }

  GameMahjongAward* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameMahjongAward>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameMahjongAward& from);
  void MergeFrom(const GameMahjongAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMahjongAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Codes = 2;
  void clear_codes();
  static const int kCodesFieldNumber = 2;
  const ::std::string& codes() const;
  void set_codes(const ::std::string& value);
  #if LANG_CXX11
  void set_codes(::std::string&& value);
  #endif
  void set_codes(const char* value);
  void set_codes(const void* value, size_t size);
  ::std::string* mutable_codes();
  ::std::string* release_codes();
  void set_allocated_codes(::std::string* codes);

  // int64 GetGold = 3;
  void clear_getgold();
  static const int kGetGoldFieldNumber = 3;
  ::google::protobuf::int64 getgold() const;
  void set_getgold(::google::protobuf::int64 value);

  // uint32 Site = 1;
  void clear_site();
  static const int kSiteFieldNumber = 1;
  ::google::protobuf::uint32 site() const;
  void set_site(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:go.GameMahjongAward)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr codes_;
  ::google::protobuf::int64 getgold_;
  ::google::protobuf::uint32 site_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mahjong_2eproto;
};
// -------------------------------------------------------------------

class GameMahjongCheckout final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameMahjongCheckout) */ {
 public:
  GameMahjongCheckout();
  virtual ~GameMahjongCheckout();

  GameMahjongCheckout(const GameMahjongCheckout& from);

  inline GameMahjongCheckout& operator=(const GameMahjongCheckout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameMahjongCheckout(GameMahjongCheckout&& from) noexcept
    : GameMahjongCheckout() {
    *this = ::std::move(from);
  }

  inline GameMahjongCheckout& operator=(GameMahjongCheckout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameMahjongCheckout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMahjongCheckout* internal_default_instance() {
    return reinterpret_cast<const GameMahjongCheckout*>(
               &_GameMahjongCheckout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GameMahjongCheckout* other);
  friend void swap(GameMahjongCheckout& a, GameMahjongCheckout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameMahjongCheckout* New() const final {
    return CreateMaybeMessage<GameMahjongCheckout>(nullptr);
  }

  GameMahjongCheckout* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameMahjongCheckout>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameMahjongCheckout& from);
  void MergeFrom(const GameMahjongCheckout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMahjongCheckout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .go.GameMahjongAward players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  ::go::GameMahjongAward* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::go::GameMahjongAward >*
      mutable_players();
  const ::go::GameMahjongAward& players(int index) const;
  ::go::GameMahjongAward* add_players();
  const ::google::protobuf::RepeatedPtrField< ::go::GameMahjongAward >&
      players() const;

  // @@protoc_insertion_point(class_scope:go.GameMahjongCheckout)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::go::GameMahjongAward > players_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mahjong_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameMahjongEnter

// uint64 UserID = 1;
inline void GameMahjongEnter::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameMahjongEnter::userid() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongEnter.UserID)
  return userid_;
}
inline void GameMahjongEnter::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:go.GameMahjongEnter.UserID)
}

// int64 TimeStamp = 2;
inline void GameMahjongEnter::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameMahjongEnter::timestamp() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongEnter.TimeStamp)
  return timestamp_;
}
inline void GameMahjongEnter::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:go.GameMahjongEnter.TimeStamp)
}

// .go.UserList Players = 3;
inline bool GameMahjongEnter::has_players() const {
  return this != internal_default_instance() && players_ != nullptr;
}
inline const ::go::UserList& GameMahjongEnter::players() const {
  const ::go::UserList* p = players_;
  // @@protoc_insertion_point(field_get:go.GameMahjongEnter.Players)
  return p != nullptr ? *p : *reinterpret_cast<const ::go::UserList*>(
      &::go::_UserList_default_instance_);
}
inline ::go::UserList* GameMahjongEnter::release_players() {
  // @@protoc_insertion_point(field_release:go.GameMahjongEnter.Players)
  
  ::go::UserList* temp = players_;
  players_ = nullptr;
  return temp;
}
inline ::go::UserList* GameMahjongEnter::mutable_players() {
  
  if (players_ == nullptr) {
    auto* p = CreateMaybeMessage<::go::UserList>(GetArenaNoVirtual());
    players_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.GameMahjongEnter.Players)
  return players_;
}
inline void GameMahjongEnter::set_allocated_players(::go::UserList* players) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(players_);
  }
  if (players) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      players = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, players, submessage_arena);
    }
    
  } else {
    
  }
  players_ = players;
  // @@protoc_insertion_point(field_set_allocated:go.GameMahjongEnter.Players)
}

// uint32 FreeTime = 4;
inline void GameMahjongEnter::clear_freetime() {
  freetime_ = 0u;
}
inline ::google::protobuf::uint32 GameMahjongEnter::freetime() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongEnter.FreeTime)
  return freetime_;
}
inline void GameMahjongEnter::set_freetime(::google::protobuf::uint32 value) {
  
  freetime_ = value;
  // @@protoc_insertion_point(field_set:go.GameMahjongEnter.FreeTime)
}

// -------------------------------------------------------------------

// GameMahjongPlayer

// uint64 UserID = 1;
inline void GameMahjongPlayer::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameMahjongPlayer::userid() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongPlayer.UserID)
  return userid_;
}
inline void GameMahjongPlayer::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:go.GameMahjongPlayer.UserID)
}

// uint32 Site = 2;
inline void GameMahjongPlayer::clear_site() {
  site_ = 0u;
}
inline ::google::protobuf::uint32 GameMahjongPlayer::site() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongPlayer.Site)
  return site_;
}
inline void GameMahjongPlayer::set_site(::google::protobuf::uint32 value) {
  
  site_ = value;
  // @@protoc_insertion_point(field_set:go.GameMahjongPlayer.Site)
}

// bytes Cards = 3;
inline void GameMahjongPlayer::clear_cards() {
  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameMahjongPlayer::cards() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongPlayer.Cards)
  return cards_.GetNoArena();
}
inline void GameMahjongPlayer::set_cards(const ::std::string& value) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameMahjongPlayer.Cards)
}
#if LANG_CXX11
inline void GameMahjongPlayer::set_cards(::std::string&& value) {
  
  cards_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameMahjongPlayer.Cards)
}
#endif
inline void GameMahjongPlayer::set_cards(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameMahjongPlayer.Cards)
}
inline void GameMahjongPlayer::set_cards(const void* value, size_t size) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameMahjongPlayer.Cards)
}
inline ::std::string* GameMahjongPlayer::mutable_cards() {
  
  // @@protoc_insertion_point(field_mutable:go.GameMahjongPlayer.Cards)
  return cards_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameMahjongPlayer::release_cards() {
  // @@protoc_insertion_point(field_release:go.GameMahjongPlayer.Cards)
  
  return cards_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameMahjongPlayer::set_allocated_cards(::std::string* cards) {
  if (cards != nullptr) {
    
  } else {
    
  }
  cards_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cards);
  // @@protoc_insertion_point(field_set_allocated:go.GameMahjongPlayer.Cards)
}

// bool IsBanker = 4;
inline void GameMahjongPlayer::clear_isbanker() {
  isbanker_ = false;
}
inline bool GameMahjongPlayer::isbanker() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongPlayer.IsBanker)
  return isbanker_;
}
inline void GameMahjongPlayer::set_isbanker(bool value) {
  
  isbanker_ = value;
  // @@protoc_insertion_point(field_set:go.GameMahjongPlayer.IsBanker)
}

// -------------------------------------------------------------------

// GameMahjongBegins

// bytes Dice = 1;
inline void GameMahjongBegins::clear_dice() {
  dice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameMahjongBegins::dice() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongBegins.Dice)
  return dice_.GetNoArena();
}
inline void GameMahjongBegins::set_dice(const ::std::string& value) {
  
  dice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameMahjongBegins.Dice)
}
#if LANG_CXX11
inline void GameMahjongBegins::set_dice(::std::string&& value) {
  
  dice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameMahjongBegins.Dice)
}
#endif
inline void GameMahjongBegins::set_dice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameMahjongBegins.Dice)
}
inline void GameMahjongBegins::set_dice(const void* value, size_t size) {
  
  dice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameMahjongBegins.Dice)
}
inline ::std::string* GameMahjongBegins::mutable_dice() {
  
  // @@protoc_insertion_point(field_mutable:go.GameMahjongBegins.Dice)
  return dice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameMahjongBegins::release_dice() {
  // @@protoc_insertion_point(field_release:go.GameMahjongBegins.Dice)
  
  return dice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameMahjongBegins::set_allocated_dice(::std::string* dice) {
  if (dice != nullptr) {
    
  } else {
    
  }
  dice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dice);
  // @@protoc_insertion_point(field_set_allocated:go.GameMahjongBegins.Dice)
}

// repeated .go.GameMahjongPlayer PlayersInfo = 2;
inline int GameMahjongBegins::playersinfo_size() const {
  return playersinfo_.size();
}
inline void GameMahjongBegins::clear_playersinfo() {
  playersinfo_.Clear();
}
inline ::go::GameMahjongPlayer* GameMahjongBegins::mutable_playersinfo(int index) {
  // @@protoc_insertion_point(field_mutable:go.GameMahjongBegins.PlayersInfo)
  return playersinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::go::GameMahjongPlayer >*
GameMahjongBegins::mutable_playersinfo() {
  // @@protoc_insertion_point(field_mutable_list:go.GameMahjongBegins.PlayersInfo)
  return &playersinfo_;
}
inline const ::go::GameMahjongPlayer& GameMahjongBegins::playersinfo(int index) const {
  // @@protoc_insertion_point(field_get:go.GameMahjongBegins.PlayersInfo)
  return playersinfo_.Get(index);
}
inline ::go::GameMahjongPlayer* GameMahjongBegins::add_playersinfo() {
  // @@protoc_insertion_point(field_add:go.GameMahjongBegins.PlayersInfo)
  return playersinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::go::GameMahjongPlayer >&
GameMahjongBegins::playersinfo() const {
  // @@protoc_insertion_point(field_list:go.GameMahjongBegins.PlayersInfo)
  return playersinfo_;
}

// -------------------------------------------------------------------

// GameMahjongOutcard

// uint32 Site = 1;
inline void GameMahjongOutcard::clear_site() {
  site_ = 0u;
}
inline ::google::protobuf::uint32 GameMahjongOutcard::site() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongOutcard.Site)
  return site_;
}
inline void GameMahjongOutcard::set_site(::google::protobuf::uint32 value) {
  
  site_ = value;
  // @@protoc_insertion_point(field_set:go.GameMahjongOutcard.Site)
}

// bytes Cards = 2;
inline void GameMahjongOutcard::clear_cards() {
  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameMahjongOutcard::cards() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongOutcard.Cards)
  return cards_.GetNoArena();
}
inline void GameMahjongOutcard::set_cards(const ::std::string& value) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameMahjongOutcard.Cards)
}
#if LANG_CXX11
inline void GameMahjongOutcard::set_cards(::std::string&& value) {
  
  cards_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameMahjongOutcard.Cards)
}
#endif
inline void GameMahjongOutcard::set_cards(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameMahjongOutcard.Cards)
}
inline void GameMahjongOutcard::set_cards(const void* value, size_t size) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameMahjongOutcard.Cards)
}
inline ::std::string* GameMahjongOutcard::mutable_cards() {
  
  // @@protoc_insertion_point(field_mutable:go.GameMahjongOutcard.Cards)
  return cards_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameMahjongOutcard::release_cards() {
  // @@protoc_insertion_point(field_release:go.GameMahjongOutcard.Cards)
  
  return cards_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameMahjongOutcard::set_allocated_cards(::std::string* cards) {
  if (cards != nullptr) {
    
  } else {
    
  }
  cards_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cards);
  // @@protoc_insertion_point(field_set_allocated:go.GameMahjongOutcard.Cards)
}

// string Hints = 3;
inline void GameMahjongOutcard::clear_hints() {
  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameMahjongOutcard::hints() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongOutcard.Hints)
  return hints_.GetNoArena();
}
inline void GameMahjongOutcard::set_hints(const ::std::string& value) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameMahjongOutcard.Hints)
}
#if LANG_CXX11
inline void GameMahjongOutcard::set_hints(::std::string&& value) {
  
  hints_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameMahjongOutcard.Hints)
}
#endif
inline void GameMahjongOutcard::set_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameMahjongOutcard.Hints)
}
inline void GameMahjongOutcard::set_hints(const char* value, size_t size) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameMahjongOutcard.Hints)
}
inline ::std::string* GameMahjongOutcard::mutable_hints() {
  
  // @@protoc_insertion_point(field_mutable:go.GameMahjongOutcard.Hints)
  return hints_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameMahjongOutcard::release_hints() {
  // @@protoc_insertion_point(field_release:go.GameMahjongOutcard.Hints)
  
  return hints_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameMahjongOutcard::set_allocated_hints(::std::string* hints) {
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hints);
  // @@protoc_insertion_point(field_set_allocated:go.GameMahjongOutcard.Hints)
}

// -------------------------------------------------------------------

// GameMahjongOperate

// int32 Code = 1;
inline void GameMahjongOperate::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 GameMahjongOperate::code() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongOperate.Code)
  return code_;
}
inline void GameMahjongOperate::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:go.GameMahjongOperate.Code)
}

// bytes Cards = 2;
inline void GameMahjongOperate::clear_cards() {
  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameMahjongOperate::cards() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongOperate.Cards)
  return cards_.GetNoArena();
}
inline void GameMahjongOperate::set_cards(const ::std::string& value) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameMahjongOperate.Cards)
}
#if LANG_CXX11
inline void GameMahjongOperate::set_cards(::std::string&& value) {
  
  cards_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameMahjongOperate.Cards)
}
#endif
inline void GameMahjongOperate::set_cards(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameMahjongOperate.Cards)
}
inline void GameMahjongOperate::set_cards(const void* value, size_t size) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameMahjongOperate.Cards)
}
inline ::std::string* GameMahjongOperate::mutable_cards() {
  
  // @@protoc_insertion_point(field_mutable:go.GameMahjongOperate.Cards)
  return cards_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameMahjongOperate::release_cards() {
  // @@protoc_insertion_point(field_release:go.GameMahjongOperate.Cards)
  
  return cards_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameMahjongOperate::set_allocated_cards(::std::string* cards) {
  if (cards != nullptr) {
    
  } else {
    
  }
  cards_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cards);
  // @@protoc_insertion_point(field_set_allocated:go.GameMahjongOperate.Cards)
}

// string Hints = 3;
inline void GameMahjongOperate::clear_hints() {
  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameMahjongOperate::hints() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongOperate.Hints)
  return hints_.GetNoArena();
}
inline void GameMahjongOperate::set_hints(const ::std::string& value) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameMahjongOperate.Hints)
}
#if LANG_CXX11
inline void GameMahjongOperate::set_hints(::std::string&& value) {
  
  hints_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameMahjongOperate.Hints)
}
#endif
inline void GameMahjongOperate::set_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameMahjongOperate.Hints)
}
inline void GameMahjongOperate::set_hints(const char* value, size_t size) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameMahjongOperate.Hints)
}
inline ::std::string* GameMahjongOperate::mutable_hints() {
  
  // @@protoc_insertion_point(field_mutable:go.GameMahjongOperate.Hints)
  return hints_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameMahjongOperate::release_hints() {
  // @@protoc_insertion_point(field_release:go.GameMahjongOperate.Hints)
  
  return hints_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameMahjongOperate::set_allocated_hints(::std::string* hints) {
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hints);
  // @@protoc_insertion_point(field_set_allocated:go.GameMahjongOperate.Hints)
}

// -------------------------------------------------------------------

// GameMahjongAward

// uint32 Site = 1;
inline void GameMahjongAward::clear_site() {
  site_ = 0u;
}
inline ::google::protobuf::uint32 GameMahjongAward::site() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongAward.Site)
  return site_;
}
inline void GameMahjongAward::set_site(::google::protobuf::uint32 value) {
  
  site_ = value;
  // @@protoc_insertion_point(field_set:go.GameMahjongAward.Site)
}

// bytes Codes = 2;
inline void GameMahjongAward::clear_codes() {
  codes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameMahjongAward::codes() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongAward.Codes)
  return codes_.GetNoArena();
}
inline void GameMahjongAward::set_codes(const ::std::string& value) {
  
  codes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameMahjongAward.Codes)
}
#if LANG_CXX11
inline void GameMahjongAward::set_codes(::std::string&& value) {
  
  codes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameMahjongAward.Codes)
}
#endif
inline void GameMahjongAward::set_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  codes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameMahjongAward.Codes)
}
inline void GameMahjongAward::set_codes(const void* value, size_t size) {
  
  codes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameMahjongAward.Codes)
}
inline ::std::string* GameMahjongAward::mutable_codes() {
  
  // @@protoc_insertion_point(field_mutable:go.GameMahjongAward.Codes)
  return codes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameMahjongAward::release_codes() {
  // @@protoc_insertion_point(field_release:go.GameMahjongAward.Codes)
  
  return codes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameMahjongAward::set_allocated_codes(::std::string* codes) {
  if (codes != nullptr) {
    
  } else {
    
  }
  codes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codes);
  // @@protoc_insertion_point(field_set_allocated:go.GameMahjongAward.Codes)
}

// int64 GetGold = 3;
inline void GameMahjongAward::clear_getgold() {
  getgold_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameMahjongAward::getgold() const {
  // @@protoc_insertion_point(field_get:go.GameMahjongAward.GetGold)
  return getgold_;
}
inline void GameMahjongAward::set_getgold(::google::protobuf::int64 value) {
  
  getgold_ = value;
  // @@protoc_insertion_point(field_set:go.GameMahjongAward.GetGold)
}

// -------------------------------------------------------------------

// GameMahjongCheckout

// repeated .go.GameMahjongAward players = 1;
inline int GameMahjongCheckout::players_size() const {
  return players_.size();
}
inline void GameMahjongCheckout::clear_players() {
  players_.Clear();
}
inline ::go::GameMahjongAward* GameMahjongCheckout::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:go.GameMahjongCheckout.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::go::GameMahjongAward >*
GameMahjongCheckout::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:go.GameMahjongCheckout.players)
  return &players_;
}
inline const ::go::GameMahjongAward& GameMahjongCheckout::players(int index) const {
  // @@protoc_insertion_point(field_get:go.GameMahjongCheckout.players)
  return players_.Get(index);
}
inline ::go::GameMahjongAward* GameMahjongCheckout::add_players() {
  // @@protoc_insertion_point(field_add:go.GameMahjongCheckout.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::go::GameMahjongAward >&
GameMahjongCheckout::players() const {
  // @@protoc_insertion_point(field_list:go.GameMahjongCheckout.players)
  return players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace go

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_mahjong_2eproto
