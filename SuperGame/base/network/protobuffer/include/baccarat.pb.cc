// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: baccarat.proto

#include "baccarat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_gamecomm_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInfo_gamecomm_2eproto;
namespace go {
class GameBaccaratEnterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameBaccaratEnter> _instance;
} _GameBaccaratEnter_default_instance_;
class GameBaccaratHostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameBaccaratHost> _instance;
} _GameBaccaratHost_default_instance_;
class GameBaccaratSuperHostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameBaccaratSuperHost> _instance;
} _GameBaccaratSuperHost_default_instance_;
class GameBaccaratBetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameBaccaratBet> _instance;
} _GameBaccaratBet_default_instance_;
class GameBaccaratBetResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameBaccaratBetResult> _instance;
} _GameBaccaratBetResult_default_instance_;
class GameBaccaratOverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameBaccaratOver> _instance;
} _GameBaccaratOver_default_instance_;
class GameBaccaratCheckoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameBaccaratCheckout> _instance;
} _GameBaccaratCheckout_default_instance_;
}  // namespace go
static void InitDefaultsGameBaccaratEnter_baccarat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameBaccaratEnter_default_instance_;
    new (ptr) ::go::GameBaccaratEnter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameBaccaratEnter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameBaccaratEnter_baccarat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameBaccaratEnter_baccarat_2eproto}, {
      &scc_info_PlayerInfo_gamecomm_2eproto.base,}};

static void InitDefaultsGameBaccaratHost_baccarat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameBaccaratHost_default_instance_;
    new (ptr) ::go::GameBaccaratHost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameBaccaratHost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameBaccaratHost_baccarat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameBaccaratHost_baccarat_2eproto}, {}};

static void InitDefaultsGameBaccaratSuperHost_baccarat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameBaccaratSuperHost_default_instance_;
    new (ptr) ::go::GameBaccaratSuperHost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameBaccaratSuperHost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameBaccaratSuperHost_baccarat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameBaccaratSuperHost_baccarat_2eproto}, {}};

static void InitDefaultsGameBaccaratBet_baccarat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameBaccaratBet_default_instance_;
    new (ptr) ::go::GameBaccaratBet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameBaccaratBet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameBaccaratBet_baccarat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameBaccaratBet_baccarat_2eproto}, {}};

static void InitDefaultsGameBaccaratBetResult_baccarat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameBaccaratBetResult_default_instance_;
    new (ptr) ::go::GameBaccaratBetResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameBaccaratBetResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameBaccaratBetResult_baccarat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameBaccaratBetResult_baccarat_2eproto}, {}};

static void InitDefaultsGameBaccaratOver_baccarat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameBaccaratOver_default_instance_;
    new (ptr) ::go::GameBaccaratOver();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameBaccaratOver::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameBaccaratOver_baccarat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameBaccaratOver_baccarat_2eproto}, {}};

static void InitDefaultsGameBaccaratCheckout_baccarat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameBaccaratCheckout_default_instance_;
    new (ptr) ::go::GameBaccaratCheckout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameBaccaratCheckout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameBaccaratCheckout_baccarat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameBaccaratCheckout_baccarat_2eproto}, {}};

void InitDefaults_baccarat_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameBaccaratEnter_baccarat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameBaccaratHost_baccarat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameBaccaratSuperHost_baccarat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameBaccaratBet_baccarat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameBaccaratBetResult_baccarat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameBaccaratOver_baccarat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameBaccaratCheckout_baccarat_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_baccarat_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_baccarat_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_baccarat_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_baccarat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratEnter, userinfo_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratEnter, timestamp_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratEnter, chips_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratEnter, awardareas_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratEnter, freetime_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratEnter, bettime_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratEnter, opentime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratHost, userid_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratHost, iswant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratSuperHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratSuperHost, userid_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratSuperHost, iswant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratBet, betarea_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratBet, betscore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratBetResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratBetResult, state_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratBetResult, hints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratOver, awardarea_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratOver, playercard_),
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratOver, bankercard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratCheckout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameBaccaratCheckout, acquire_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::go::GameBaccaratEnter)},
  { 12, -1, sizeof(::go::GameBaccaratHost)},
  { 19, -1, sizeof(::go::GameBaccaratSuperHost)},
  { 26, -1, sizeof(::go::GameBaccaratBet)},
  { 33, -1, sizeof(::go::GameBaccaratBetResult)},
  { 40, -1, sizeof(::go::GameBaccaratOver)},
  { 48, -1, sizeof(::go::GameBaccaratCheckout)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameBaccaratEnter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameBaccaratHost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameBaccaratSuperHost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameBaccaratBet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameBaccaratBetResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameBaccaratOver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameBaccaratCheckout_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_baccarat_2eproto = {
  {}, AddDescriptors_baccarat_2eproto, "baccarat.proto", schemas,
  file_default_instances, TableStruct_baccarat_2eproto::offsets,
  file_level_metadata_baccarat_2eproto, 7, file_level_enum_descriptors_baccarat_2eproto, file_level_service_descriptors_baccarat_2eproto,
};

const char descriptor_table_protodef_baccarat_2eproto[] =
  "\n\016baccarat.proto\022\002go\032\016gamecomm.proto\"\240\001\n"
  "\021GameBaccaratEnter\022 \n\010UserInfo\030\001 \001(\0132\016.g"
  "o.PlayerInfo\022\021\n\tTimeStamp\030\002 \001(\003\022\r\n\005Chips"
  "\030\003 \003(\005\022\022\n\nAwardAreas\030\004 \003(\014\022\020\n\010FreeTime\030\005"
  " \001(\r\022\017\n\007BetTime\030\006 \001(\r\022\020\n\010OpenTime\030\007 \001(\r\""
  "2\n\020GameBaccaratHost\022\016\n\006UserID\030\001 \001(\004\022\016\n\006I"
  "sWant\030\002 \001(\010\"7\n\025GameBaccaratSuperHost\022\016\n\006"
  "UserID\030\001 \001(\004\022\016\n\006IsWant\030\002 \001(\010\"4\n\017GameBacc"
  "aratBet\022\017\n\007BetArea\030\001 \001(\005\022\020\n\010BetScore\030\002 \001"
  "(\003\"5\n\025GameBaccaratBetResult\022\r\n\005State\030\001 \001"
  "(\005\022\r\n\005Hints\030\002 \001(\t\"M\n\020GameBaccaratOver\022\021\n"
  "\tAwardArea\030\001 \001(\014\022\022\n\nPlayerCard\030\002 \001(\014\022\022\n\n"
  "BankerCard\030\003 \001(\014\"\'\n\024GameBaccaratCheckout"
  "\022\017\n\007Acquire\030\001 \001(\003b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_baccarat_2eproto = {
  false, InitDefaults_baccarat_2eproto, 
  descriptor_table_protodef_baccarat_2eproto,
  "baccarat.proto", &assign_descriptors_table_baccarat_2eproto, 545,
};

void AddDescriptors_baccarat_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_gamecomm_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_baccarat_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_baccarat_2eproto = []() { AddDescriptors_baccarat_2eproto(); return true; }();
namespace go {

// ===================================================================

void GameBaccaratEnter::InitAsDefaultInstance() {
  ::go::_GameBaccaratEnter_default_instance_._instance.get_mutable()->userinfo_ = const_cast< ::go::PlayerInfo*>(
      ::go::PlayerInfo::internal_default_instance());
}
class GameBaccaratEnter::HasBitSetters {
 public:
  static const ::go::PlayerInfo& userinfo(const GameBaccaratEnter* msg);
};

const ::go::PlayerInfo&
GameBaccaratEnter::HasBitSetters::userinfo(const GameBaccaratEnter* msg) {
  return *msg->userinfo_;
}
void GameBaccaratEnter::clear_userinfo() {
  if (GetArenaNoVirtual() == nullptr && userinfo_ != nullptr) {
    delete userinfo_;
  }
  userinfo_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBaccaratEnter::kUserInfoFieldNumber;
const int GameBaccaratEnter::kTimeStampFieldNumber;
const int GameBaccaratEnter::kChipsFieldNumber;
const int GameBaccaratEnter::kAwardAreasFieldNumber;
const int GameBaccaratEnter::kFreeTimeFieldNumber;
const int GameBaccaratEnter::kBetTimeFieldNumber;
const int GameBaccaratEnter::kOpenTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBaccaratEnter::GameBaccaratEnter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameBaccaratEnter)
}
GameBaccaratEnter::GameBaccaratEnter(const GameBaccaratEnter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      chips_(from.chips_),
      awardareas_(from.awardareas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_userinfo()) {
    userinfo_ = new ::go::PlayerInfo(*from.userinfo_);
  } else {
    userinfo_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&opentime_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(opentime_));
  // @@protoc_insertion_point(copy_constructor:go.GameBaccaratEnter)
}

void GameBaccaratEnter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameBaccaratEnter_baccarat_2eproto.base);
  ::memset(&userinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opentime_) -
      reinterpret_cast<char*>(&userinfo_)) + sizeof(opentime_));
}

GameBaccaratEnter::~GameBaccaratEnter() {
  // @@protoc_insertion_point(destructor:go.GameBaccaratEnter)
  SharedDtor();
}

void GameBaccaratEnter::SharedDtor() {
  if (this != internal_default_instance()) delete userinfo_;
}

void GameBaccaratEnter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameBaccaratEnter& GameBaccaratEnter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameBaccaratEnter_baccarat_2eproto.base);
  return *internal_default_instance();
}


void GameBaccaratEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameBaccaratEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chips_.Clear();
  awardareas_.Clear();
  if (GetArenaNoVirtual() == nullptr && userinfo_ != nullptr) {
    delete userinfo_;
  }
  userinfo_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opentime_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(opentime_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameBaccaratEnter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameBaccaratEnter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .go.PlayerInfo UserInfo = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::go::PlayerInfo::_InternalParse;
        object = msg->mutable_userinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 TimeStamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 Chips = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_chips();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_chips(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated bytes AwardAreas = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_awardareas();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // uint32 FreeTime = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_freetime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 BetTime = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_bettime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 OpenTime = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_opentime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameBaccaratEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameBaccaratEnter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .go.PlayerInfo UserInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TimeStamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Chips = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chips())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_chips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes AwardAreas = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_awardareas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FreeTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 BetTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bettime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 OpenTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opentime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameBaccaratEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameBaccaratEnter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameBaccaratEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameBaccaratEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.PlayerInfo UserInfo = 1;
  if (this->has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::userinfo(this), output);
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // repeated int32 Chips = 3;
  if (this->chips_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chips_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->chips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->chips(i), output);
  }

  // repeated bytes AwardAreas = 4;
  for (int i = 0, n = this->awardareas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->awardareas(i), output);
  }

  // uint32 FreeTime = 5;
  if (this->freetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->freetime(), output);
  }

  // uint32 BetTime = 6;
  if (this->bettime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bettime(), output);
  }

  // uint32 OpenTime = 7;
  if (this->opentime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->opentime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameBaccaratEnter)
}

::google::protobuf::uint8* GameBaccaratEnter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameBaccaratEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.PlayerInfo UserInfo = 1;
  if (this->has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::userinfo(this), target);
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // repeated int32 Chips = 3;
  if (this->chips_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _chips_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->chips_, target);
  }

  // repeated bytes AwardAreas = 4;
  for (int i = 0, n = this->awardareas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->awardareas(i), target);
  }

  // uint32 FreeTime = 5;
  if (this->freetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->freetime(), target);
  }

  // uint32 BetTime = 6;
  if (this->bettime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bettime(), target);
  }

  // uint32 OpenTime = 7;
  if (this->opentime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->opentime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameBaccaratEnter)
  return target;
}

size_t GameBaccaratEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameBaccaratEnter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Chips = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chips_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _chips_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes AwardAreas = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->awardareas_size());
  for (int i = 0, n = this->awardareas_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->awardareas(i));
  }

  // .go.PlayerInfo UserInfo = 1;
  if (this->has_userinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *userinfo_);
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // uint32 FreeTime = 5;
  if (this->freetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->freetime());
  }

  // uint32 BetTime = 6;
  if (this->bettime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bettime());
  }

  // uint32 OpenTime = 7;
  if (this->opentime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opentime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameBaccaratEnter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameBaccaratEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBaccaratEnter* source =
      ::google::protobuf::DynamicCastToGenerated<GameBaccaratEnter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameBaccaratEnter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameBaccaratEnter)
    MergeFrom(*source);
  }
}

void GameBaccaratEnter::MergeFrom(const GameBaccaratEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameBaccaratEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chips_.MergeFrom(from.chips_);
  awardareas_.MergeFrom(from.awardareas_);
  if (from.has_userinfo()) {
    mutable_userinfo()->::go::PlayerInfo::MergeFrom(from.userinfo());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.freetime() != 0) {
    set_freetime(from.freetime());
  }
  if (from.bettime() != 0) {
    set_bettime(from.bettime());
  }
  if (from.opentime() != 0) {
    set_opentime(from.opentime());
  }
}

void GameBaccaratEnter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameBaccaratEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBaccaratEnter::CopyFrom(const GameBaccaratEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameBaccaratEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBaccaratEnter::IsInitialized() const {
  return true;
}

void GameBaccaratEnter::Swap(GameBaccaratEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBaccaratEnter::InternalSwap(GameBaccaratEnter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chips_.InternalSwap(&other->chips_);
  awardareas_.InternalSwap(CastToBase(&other->awardareas_));
  swap(userinfo_, other->userinfo_);
  swap(timestamp_, other->timestamp_);
  swap(freetime_, other->freetime_);
  swap(bettime_, other->bettime_);
  swap(opentime_, other->opentime_);
}

::google::protobuf::Metadata GameBaccaratEnter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_baccarat_2eproto);
  return ::file_level_metadata_baccarat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameBaccaratHost::InitAsDefaultInstance() {
}
class GameBaccaratHost::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBaccaratHost::kUserIDFieldNumber;
const int GameBaccaratHost::kIsWantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBaccaratHost::GameBaccaratHost()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameBaccaratHost)
}
GameBaccaratHost::GameBaccaratHost(const GameBaccaratHost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iswant_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
  // @@protoc_insertion_point(copy_constructor:go.GameBaccaratHost)
}

void GameBaccaratHost::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswant_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
}

GameBaccaratHost::~GameBaccaratHost() {
  // @@protoc_insertion_point(destructor:go.GameBaccaratHost)
  SharedDtor();
}

void GameBaccaratHost::SharedDtor() {
}

void GameBaccaratHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameBaccaratHost& GameBaccaratHost::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameBaccaratHost_baccarat_2eproto.base);
  return *internal_default_instance();
}


void GameBaccaratHost::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameBaccaratHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswant_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameBaccaratHost::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameBaccaratHost*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_userid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool IsWant = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_iswant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameBaccaratHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameBaccaratHost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsWant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameBaccaratHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameBaccaratHost)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameBaccaratHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameBaccaratHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iswant(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameBaccaratHost)
}

::google::protobuf::uint8* GameBaccaratHost::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameBaccaratHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iswant(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameBaccaratHost)
  return target;
}

size_t GameBaccaratHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameBaccaratHost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameBaccaratHost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameBaccaratHost)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBaccaratHost* source =
      ::google::protobuf::DynamicCastToGenerated<GameBaccaratHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameBaccaratHost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameBaccaratHost)
    MergeFrom(*source);
  }
}

void GameBaccaratHost::MergeFrom(const GameBaccaratHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameBaccaratHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.iswant() != 0) {
    set_iswant(from.iswant());
  }
}

void GameBaccaratHost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameBaccaratHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBaccaratHost::CopyFrom(const GameBaccaratHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameBaccaratHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBaccaratHost::IsInitialized() const {
  return true;
}

void GameBaccaratHost::Swap(GameBaccaratHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBaccaratHost::InternalSwap(GameBaccaratHost* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(iswant_, other->iswant_);
}

::google::protobuf::Metadata GameBaccaratHost::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_baccarat_2eproto);
  return ::file_level_metadata_baccarat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameBaccaratSuperHost::InitAsDefaultInstance() {
}
class GameBaccaratSuperHost::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBaccaratSuperHost::kUserIDFieldNumber;
const int GameBaccaratSuperHost::kIsWantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBaccaratSuperHost::GameBaccaratSuperHost()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameBaccaratSuperHost)
}
GameBaccaratSuperHost::GameBaccaratSuperHost(const GameBaccaratSuperHost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iswant_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
  // @@protoc_insertion_point(copy_constructor:go.GameBaccaratSuperHost)
}

void GameBaccaratSuperHost::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswant_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
}

GameBaccaratSuperHost::~GameBaccaratSuperHost() {
  // @@protoc_insertion_point(destructor:go.GameBaccaratSuperHost)
  SharedDtor();
}

void GameBaccaratSuperHost::SharedDtor() {
}

void GameBaccaratSuperHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameBaccaratSuperHost& GameBaccaratSuperHost::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameBaccaratSuperHost_baccarat_2eproto.base);
  return *internal_default_instance();
}


void GameBaccaratSuperHost::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameBaccaratSuperHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswant_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(iswant_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameBaccaratSuperHost::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameBaccaratSuperHost*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_userid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool IsWant = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_iswant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameBaccaratSuperHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameBaccaratSuperHost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsWant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameBaccaratSuperHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameBaccaratSuperHost)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameBaccaratSuperHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameBaccaratSuperHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iswant(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameBaccaratSuperHost)
}

::google::protobuf::uint8* GameBaccaratSuperHost::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameBaccaratSuperHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iswant(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameBaccaratSuperHost)
  return target;
}

size_t GameBaccaratSuperHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameBaccaratSuperHost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // bool IsWant = 2;
  if (this->iswant() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameBaccaratSuperHost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameBaccaratSuperHost)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBaccaratSuperHost* source =
      ::google::protobuf::DynamicCastToGenerated<GameBaccaratSuperHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameBaccaratSuperHost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameBaccaratSuperHost)
    MergeFrom(*source);
  }
}

void GameBaccaratSuperHost::MergeFrom(const GameBaccaratSuperHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameBaccaratSuperHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.iswant() != 0) {
    set_iswant(from.iswant());
  }
}

void GameBaccaratSuperHost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameBaccaratSuperHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBaccaratSuperHost::CopyFrom(const GameBaccaratSuperHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameBaccaratSuperHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBaccaratSuperHost::IsInitialized() const {
  return true;
}

void GameBaccaratSuperHost::Swap(GameBaccaratSuperHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBaccaratSuperHost::InternalSwap(GameBaccaratSuperHost* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(iswant_, other->iswant_);
}

::google::protobuf::Metadata GameBaccaratSuperHost::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_baccarat_2eproto);
  return ::file_level_metadata_baccarat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameBaccaratBet::InitAsDefaultInstance() {
}
class GameBaccaratBet::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBaccaratBet::kBetAreaFieldNumber;
const int GameBaccaratBet::kBetScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBaccaratBet::GameBaccaratBet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameBaccaratBet)
}
GameBaccaratBet::GameBaccaratBet(const GameBaccaratBet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&betscore_, &from.betscore_,
    static_cast<size_t>(reinterpret_cast<char*>(&betarea_) -
    reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
  // @@protoc_insertion_point(copy_constructor:go.GameBaccaratBet)
}

void GameBaccaratBet::SharedCtor() {
  ::memset(&betscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betarea_) -
      reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
}

GameBaccaratBet::~GameBaccaratBet() {
  // @@protoc_insertion_point(destructor:go.GameBaccaratBet)
  SharedDtor();
}

void GameBaccaratBet::SharedDtor() {
}

void GameBaccaratBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameBaccaratBet& GameBaccaratBet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameBaccaratBet_baccarat_2eproto.base);
  return *internal_default_instance();
}


void GameBaccaratBet::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameBaccaratBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&betscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betarea_) -
      reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameBaccaratBet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameBaccaratBet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 BetArea = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_betarea(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 BetScore = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_betscore(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameBaccaratBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameBaccaratBet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 BetArea = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BetScore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameBaccaratBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameBaccaratBet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameBaccaratBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameBaccaratBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->betarea(), output);
  }

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->betscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameBaccaratBet)
}

::google::protobuf::uint8* GameBaccaratBet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameBaccaratBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->betarea(), target);
  }

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->betscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameBaccaratBet)
  return target;
}

size_t GameBaccaratBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameBaccaratBet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->betscore());
  }

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->betarea());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameBaccaratBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameBaccaratBet)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBaccaratBet* source =
      ::google::protobuf::DynamicCastToGenerated<GameBaccaratBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameBaccaratBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameBaccaratBet)
    MergeFrom(*source);
  }
}

void GameBaccaratBet::MergeFrom(const GameBaccaratBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameBaccaratBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.betscore() != 0) {
    set_betscore(from.betscore());
  }
  if (from.betarea() != 0) {
    set_betarea(from.betarea());
  }
}

void GameBaccaratBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameBaccaratBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBaccaratBet::CopyFrom(const GameBaccaratBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameBaccaratBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBaccaratBet::IsInitialized() const {
  return true;
}

void GameBaccaratBet::Swap(GameBaccaratBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBaccaratBet::InternalSwap(GameBaccaratBet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(betscore_, other->betscore_);
  swap(betarea_, other->betarea_);
}

::google::protobuf::Metadata GameBaccaratBet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_baccarat_2eproto);
  return ::file_level_metadata_baccarat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameBaccaratBetResult::InitAsDefaultInstance() {
}
class GameBaccaratBetResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBaccaratBetResult::kStateFieldNumber;
const int GameBaccaratBetResult::kHintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBaccaratBetResult::GameBaccaratBetResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameBaccaratBetResult)
}
GameBaccaratBetResult::GameBaccaratBetResult(const GameBaccaratBetResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hints().size() > 0) {
    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:go.GameBaccaratBetResult)
}

void GameBaccaratBetResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameBaccaratBetResult_baccarat_2eproto.base);
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

GameBaccaratBetResult::~GameBaccaratBetResult() {
  // @@protoc_insertion_point(destructor:go.GameBaccaratBetResult)
  SharedDtor();
}

void GameBaccaratBetResult::SharedDtor() {
  hints_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameBaccaratBetResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameBaccaratBetResult& GameBaccaratBetResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameBaccaratBetResult_baccarat_2eproto.base);
  return *internal_default_instance();
}


void GameBaccaratBetResult::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameBaccaratBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameBaccaratBetResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameBaccaratBetResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 State = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string Hints = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("go.GameBaccaratBetResult.Hints");
        object = msg->mutable_hints();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameBaccaratBetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameBaccaratBetResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 State = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Hints = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hints().data(), static_cast<int>(this->hints().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.GameBaccaratBetResult.Hints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameBaccaratBetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameBaccaratBetResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameBaccaratBetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameBaccaratBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // string Hints = 2;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameBaccaratBetResult.Hints");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hints(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameBaccaratBetResult)
}

::google::protobuf::uint8* GameBaccaratBetResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameBaccaratBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // string Hints = 2;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameBaccaratBetResult.Hints");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hints(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameBaccaratBetResult)
  return target;
}

size_t GameBaccaratBetResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameBaccaratBetResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Hints = 2;
  if (this->hints().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hints());
  }

  // int32 State = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameBaccaratBetResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameBaccaratBetResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBaccaratBetResult* source =
      ::google::protobuf::DynamicCastToGenerated<GameBaccaratBetResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameBaccaratBetResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameBaccaratBetResult)
    MergeFrom(*source);
  }
}

void GameBaccaratBetResult::MergeFrom(const GameBaccaratBetResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameBaccaratBetResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hints().size() > 0) {

    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GameBaccaratBetResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameBaccaratBetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBaccaratBetResult::CopyFrom(const GameBaccaratBetResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameBaccaratBetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBaccaratBetResult::IsInitialized() const {
  return true;
}

void GameBaccaratBetResult::Swap(GameBaccaratBetResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBaccaratBetResult::InternalSwap(GameBaccaratBetResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hints_.Swap(&other->hints_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::google::protobuf::Metadata GameBaccaratBetResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_baccarat_2eproto);
  return ::file_level_metadata_baccarat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameBaccaratOver::InitAsDefaultInstance() {
}
class GameBaccaratOver::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBaccaratOver::kAwardAreaFieldNumber;
const int GameBaccaratOver::kPlayerCardFieldNumber;
const int GameBaccaratOver::kBankerCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBaccaratOver::GameBaccaratOver()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameBaccaratOver)
}
GameBaccaratOver::GameBaccaratOver(const GameBaccaratOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  awardarea_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.awardarea().size() > 0) {
    awardarea_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.awardarea_);
  }
  playercard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playercard().size() > 0) {
    playercard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playercard_);
  }
  bankercard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bankercard().size() > 0) {
    bankercard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bankercard_);
  }
  // @@protoc_insertion_point(copy_constructor:go.GameBaccaratOver)
}

void GameBaccaratOver::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameBaccaratOver_baccarat_2eproto.base);
  awardarea_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playercard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bankercard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameBaccaratOver::~GameBaccaratOver() {
  // @@protoc_insertion_point(destructor:go.GameBaccaratOver)
  SharedDtor();
}

void GameBaccaratOver::SharedDtor() {
  awardarea_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playercard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bankercard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameBaccaratOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameBaccaratOver& GameBaccaratOver::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameBaccaratOver_baccarat_2eproto.base);
  return *internal_default_instance();
}


void GameBaccaratOver::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameBaccaratOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  awardarea_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playercard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bankercard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameBaccaratOver::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameBaccaratOver*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes AwardArea = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_awardarea();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes PlayerCard = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_playercard();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes BankerCard = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_bankercard();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameBaccaratOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameBaccaratOver)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes AwardArea = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_awardarea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes PlayerCard = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playercard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes BankerCard = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bankercard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameBaccaratOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameBaccaratOver)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameBaccaratOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameBaccaratOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes AwardArea = 1;
  if (this->awardarea().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->awardarea(), output);
  }

  // bytes PlayerCard = 2;
  if (this->playercard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->playercard(), output);
  }

  // bytes BankerCard = 3;
  if (this->bankercard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->bankercard(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameBaccaratOver)
}

::google::protobuf::uint8* GameBaccaratOver::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameBaccaratOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes AwardArea = 1;
  if (this->awardarea().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->awardarea(), target);
  }

  // bytes PlayerCard = 2;
  if (this->playercard().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->playercard(), target);
  }

  // bytes BankerCard = 3;
  if (this->bankercard().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->bankercard(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameBaccaratOver)
  return target;
}

size_t GameBaccaratOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameBaccaratOver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes AwardArea = 1;
  if (this->awardarea().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->awardarea());
  }

  // bytes PlayerCard = 2;
  if (this->playercard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->playercard());
  }

  // bytes BankerCard = 3;
  if (this->bankercard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bankercard());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameBaccaratOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameBaccaratOver)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBaccaratOver* source =
      ::google::protobuf::DynamicCastToGenerated<GameBaccaratOver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameBaccaratOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameBaccaratOver)
    MergeFrom(*source);
  }
}

void GameBaccaratOver::MergeFrom(const GameBaccaratOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameBaccaratOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.awardarea().size() > 0) {

    awardarea_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.awardarea_);
  }
  if (from.playercard().size() > 0) {

    playercard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playercard_);
  }
  if (from.bankercard().size() > 0) {

    bankercard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bankercard_);
  }
}

void GameBaccaratOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameBaccaratOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBaccaratOver::CopyFrom(const GameBaccaratOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameBaccaratOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBaccaratOver::IsInitialized() const {
  return true;
}

void GameBaccaratOver::Swap(GameBaccaratOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBaccaratOver::InternalSwap(GameBaccaratOver* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  awardarea_.Swap(&other->awardarea_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playercard_.Swap(&other->playercard_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bankercard_.Swap(&other->bankercard_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GameBaccaratOver::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_baccarat_2eproto);
  return ::file_level_metadata_baccarat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameBaccaratCheckout::InitAsDefaultInstance() {
}
class GameBaccaratCheckout::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBaccaratCheckout::kAcquireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBaccaratCheckout::GameBaccaratCheckout()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameBaccaratCheckout)
}
GameBaccaratCheckout::GameBaccaratCheckout(const GameBaccaratCheckout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acquire_ = from.acquire_;
  // @@protoc_insertion_point(copy_constructor:go.GameBaccaratCheckout)
}

void GameBaccaratCheckout::SharedCtor() {
  acquire_ = PROTOBUF_LONGLONG(0);
}

GameBaccaratCheckout::~GameBaccaratCheckout() {
  // @@protoc_insertion_point(destructor:go.GameBaccaratCheckout)
  SharedDtor();
}

void GameBaccaratCheckout::SharedDtor() {
}

void GameBaccaratCheckout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameBaccaratCheckout& GameBaccaratCheckout::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameBaccaratCheckout_baccarat_2eproto.base);
  return *internal_default_instance();
}


void GameBaccaratCheckout::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameBaccaratCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acquire_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameBaccaratCheckout::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameBaccaratCheckout*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 Acquire = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_acquire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameBaccaratCheckout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameBaccaratCheckout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 Acquire = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &acquire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameBaccaratCheckout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameBaccaratCheckout)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameBaccaratCheckout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameBaccaratCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Acquire = 1;
  if (this->acquire() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->acquire(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameBaccaratCheckout)
}

::google::protobuf::uint8* GameBaccaratCheckout::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameBaccaratCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Acquire = 1;
  if (this->acquire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->acquire(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameBaccaratCheckout)
  return target;
}

size_t GameBaccaratCheckout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameBaccaratCheckout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Acquire = 1;
  if (this->acquire() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->acquire());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameBaccaratCheckout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameBaccaratCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBaccaratCheckout* source =
      ::google::protobuf::DynamicCastToGenerated<GameBaccaratCheckout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameBaccaratCheckout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameBaccaratCheckout)
    MergeFrom(*source);
  }
}

void GameBaccaratCheckout::MergeFrom(const GameBaccaratCheckout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameBaccaratCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acquire() != 0) {
    set_acquire(from.acquire());
  }
}

void GameBaccaratCheckout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameBaccaratCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBaccaratCheckout::CopyFrom(const GameBaccaratCheckout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameBaccaratCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBaccaratCheckout::IsInitialized() const {
  return true;
}

void GameBaccaratCheckout::Swap(GameBaccaratCheckout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBaccaratCheckout::InternalSwap(GameBaccaratCheckout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(acquire_, other->acquire_);
}

::google::protobuf::Metadata GameBaccaratCheckout::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_baccarat_2eproto);
  return ::file_level_metadata_baccarat_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace go
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::go::GameBaccaratEnter* Arena::CreateMaybeMessage< ::go::GameBaccaratEnter >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameBaccaratEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameBaccaratHost* Arena::CreateMaybeMessage< ::go::GameBaccaratHost >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameBaccaratHost >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameBaccaratSuperHost* Arena::CreateMaybeMessage< ::go::GameBaccaratSuperHost >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameBaccaratSuperHost >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameBaccaratBet* Arena::CreateMaybeMessage< ::go::GameBaccaratBet >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameBaccaratBet >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameBaccaratBetResult* Arena::CreateMaybeMessage< ::go::GameBaccaratBetResult >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameBaccaratBetResult >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameBaccaratOver* Arena::CreateMaybeMessage< ::go::GameBaccaratOver >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameBaccaratOver >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameBaccaratCheckout* Arena::CreateMaybeMessage< ::go::GameBaccaratCheckout >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameBaccaratCheckout >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
