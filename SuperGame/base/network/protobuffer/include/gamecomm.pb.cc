// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamecomm.proto

#include "gamecomm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_gamecomm_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameRecord_gamecomm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gamecomm_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInfo_gamecomm_2eproto;
namespace go {
class PlayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfo> _instance;
} _PlayerInfo_default_instance_;
class UserListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserList> _instance;
} _UserList_default_instance_;
class PlayerRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRecord> _instance;
} _PlayerRecord_default_instance_;
class GameReadyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameReady> _instance;
} _GameReady_default_instance_;
class GameBetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameBet> _instance;
} _GameBet_default_instance_;
class GameBetResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameBetResult> _instance;
} _GameBetResult_default_instance_;
class GameHostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameHost> _instance;
} _GameHost_default_instance_;
class GameSuperHostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSuperHost> _instance;
} _GameSuperHost_default_instance_;
class GameRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameRecord> _instance;
} _GameRecord_default_instance_;
class GameRecordListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameRecordList> _instance;
} _GameRecordList_default_instance_;
class GameResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameResult> _instance;
} _GameResult_default_instance_;
}  // namespace go
static void InitDefaultsPlayerInfo_gamecomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_PlayerInfo_default_instance_;
    new (ptr) ::go::PlayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::PlayerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInfo_gamecomm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerInfo_gamecomm_2eproto}, {}};

static void InitDefaultsUserList_gamecomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_UserList_default_instance_;
    new (ptr) ::go::UserList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::UserList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserList_gamecomm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserList_gamecomm_2eproto}, {
      &scc_info_PlayerInfo_gamecomm_2eproto.base,}};

static void InitDefaultsPlayerRecord_gamecomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_PlayerRecord_default_instance_;
    new (ptr) ::go::PlayerRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::PlayerRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerRecord_gamecomm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerRecord_gamecomm_2eproto}, {
      &scc_info_PlayerInfo_gamecomm_2eproto.base,}};

static void InitDefaultsGameReady_gamecomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameReady_default_instance_;
    new (ptr) ::go::GameReady();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameReady::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameReady_gamecomm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameReady_gamecomm_2eproto}, {}};

static void InitDefaultsGameBet_gamecomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameBet_default_instance_;
    new (ptr) ::go::GameBet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameBet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameBet_gamecomm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameBet_gamecomm_2eproto}, {}};

static void InitDefaultsGameBetResult_gamecomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameBetResult_default_instance_;
    new (ptr) ::go::GameBetResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameBetResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameBetResult_gamecomm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameBetResult_gamecomm_2eproto}, {}};

static void InitDefaultsGameHost_gamecomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameHost_default_instance_;
    new (ptr) ::go::GameHost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameHost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameHost_gamecomm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameHost_gamecomm_2eproto}, {}};

static void InitDefaultsGameSuperHost_gamecomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameSuperHost_default_instance_;
    new (ptr) ::go::GameSuperHost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameSuperHost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameSuperHost_gamecomm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameSuperHost_gamecomm_2eproto}, {}};

static void InitDefaultsGameRecord_gamecomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameRecord_default_instance_;
    new (ptr) ::go::GameRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameRecord_gamecomm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameRecord_gamecomm_2eproto}, {}};

static void InitDefaultsGameRecordList_gamecomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameRecordList_default_instance_;
    new (ptr) ::go::GameRecordList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameRecordList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameRecordList_gamecomm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameRecordList_gamecomm_2eproto}, {
      &scc_info_GameRecord_gamecomm_2eproto.base,}};

static void InitDefaultsGameResult_gamecomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameResult_default_instance_;
    new (ptr) ::go::GameResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameResult_gamecomm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameResult_gamecomm_2eproto}, {}};

void InitDefaults_gamecomm_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerInfo_gamecomm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserList_gamecomm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerRecord_gamecomm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameReady_gamecomm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameBet_gamecomm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameBetResult_gamecomm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameHost_gamecomm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameSuperHost_gamecomm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameRecord_gamecomm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameRecordList_gamecomm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameResult_gamecomm_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_gamecomm_2eproto[11];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_gamecomm_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_gamecomm_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_gamecomm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::PlayerInfo, userid_),
  PROTOBUF_FIELD_OFFSET(::go::PlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::go::PlayerInfo, age_),
  PROTOBUF_FIELD_OFFSET(::go::PlayerInfo, sex_),
  PROTOBUF_FIELD_OFFSET(::go::PlayerInfo, gold_),
  PROTOBUF_FIELD_OFFSET(::go::PlayerInfo, viplevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::UserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::UserList, allinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::PlayerRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::PlayerRecord, user_),
  PROTOBUF_FIELD_OFFSET(::go::PlayerRecord, twice_),
  PROTOBUF_FIELD_OFFSET(::go::PlayerRecord, ranking_),
  PROTOBUF_FIELD_OFFSET(::go::PlayerRecord, bankroll_),
  PROTOBUF_FIELD_OFFSET(::go::PlayerRecord, winlos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameReady, userid_),
  PROTOBUF_FIELD_OFFSET(::go::GameReady, isready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameBet, betarea_),
  PROTOBUF_FIELD_OFFSET(::go::GameBet, betscore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameBetResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameBetResult, userid_),
  PROTOBUF_FIELD_OFFSET(::go::GameBetResult, state_),
  PROTOBUF_FIELD_OFFSET(::go::GameBetResult, hints_),
  PROTOBUF_FIELD_OFFSET(::go::GameBetResult, betarea_),
  PROTOBUF_FIELD_OFFSET(::go::GameBetResult, betscore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameHost, iswant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameSuperHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameSuperHost, iswant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameRecord, pork_),
  PROTOBUF_FIELD_OFFSET(::go::GameRecord, type_),
  PROTOBUF_FIELD_OFFSET(::go::GameRecord, iswon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameRecordList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameResult, flag_),
  PROTOBUF_FIELD_OFFSET(::go::GameResult, reason_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::go::PlayerInfo)},
  { 11, -1, sizeof(::go::UserList)},
  { 17, -1, sizeof(::go::PlayerRecord)},
  { 27, -1, sizeof(::go::GameReady)},
  { 34, -1, sizeof(::go::GameBet)},
  { 41, -1, sizeof(::go::GameBetResult)},
  { 51, -1, sizeof(::go::GameHost)},
  { 57, -1, sizeof(::go::GameSuperHost)},
  { 63, -1, sizeof(::go::GameRecord)},
  { 71, -1, sizeof(::go::GameRecordList)},
  { 77, -1, sizeof(::go::GameResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_UserList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_PlayerRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameReady_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameBet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameBetResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameHost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameSuperHost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameRecordList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameResult_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_gamecomm_2eproto = {
  {}, AddDescriptors_gamecomm_2eproto, "gamecomm.proto", schemas,
  file_default_instances, TableStruct_gamecomm_2eproto::offsets,
  file_level_metadata_gamecomm_2eproto, 11, file_level_enum_descriptors_gamecomm_2eproto, file_level_service_descriptors_gamecomm_2eproto,
};

const char descriptor_table_protodef_gamecomm_2eproto[] =
  "\n\016gamecomm.proto\022\002go\"d\n\nPlayerInfo\022\016\n\006Us"
  "erID\030\001 \001(\004\022\014\n\004Name\030\002 \001(\t\022\013\n\003Age\030\003 \001(\005\022\013\n"
  "\003Sex\030\004 \001(\005\022\014\n\004Gold\030\005 \001(\003\022\020\n\010VipLevel\030\006 \001"
  "(\005\",\n\010UserList\022 \n\010AllInfos\030\001 \003(\0132\016.go.Pl"
  "ayerInfo\"n\n\014PlayerRecord\022\034\n\004User\030\001 \001(\0132\016"
  ".go.PlayerInfo\022\r\n\005Twice\030\002 \001(\005\022\017\n\007Ranking"
  "\030\003 \001(\005\022\020\n\010Bankroll\030\004 \001(\005\022\016\n\006WinLos\030\005 \001(\003"
  "\",\n\tGameReady\022\016\n\006UserID\030\001 \001(\004\022\017\n\007IsReady"
  "\030\002 \001(\010\",\n\007GameBet\022\017\n\007BetArea\030\001 \001(\005\022\020\n\010Be"
  "tScore\030\002 \001(\003\"`\n\rGameBetResult\022\016\n\006UserID\030"
  "\001 \001(\004\022\r\n\005State\030\002 \001(\005\022\r\n\005Hints\030\003 \001(\t\022\017\n\007B"
  "etArea\030\004 \001(\005\022\020\n\010BetScore\030\005 \001(\003\"\032\n\010GameHo"
  "st\022\016\n\006IsWant\030\001 \001(\010\"\037\n\rGameSuperHost\022\016\n\006I"
  "sWant\030\001 \001(\010\"7\n\nGameRecord\022\014\n\004Pork\030\001 \001(\014\022"
  "\014\n\004Type\030\002 \001(\005\022\r\n\005isWon\030\003 \001(\010\".\n\016GameReco"
  "rdList\022\034\n\004list\030\001 \003(\0132\016.go.GameRecord\"*\n\n"
  "GameResult\022\014\n\004Flag\030\001 \001(\005\022\016\n\006Reason\030\002 \001(\014"
  "b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_gamecomm_2eproto = {
  false, InitDefaults_gamecomm_2eproto, 
  descriptor_table_protodef_gamecomm_2eproto,
  "gamecomm.proto", &assign_descriptors_table_gamecomm_2eproto, 688,
};

void AddDescriptors_gamecomm_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_gamecomm_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gamecomm_2eproto = []() { AddDescriptors_gamecomm_2eproto(); return true; }();
namespace go {

// ===================================================================

void PlayerInfo::InitAsDefaultInstance() {
}
class PlayerInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kUserIDFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kAgeFieldNumber;
const int PlayerInfo::kSexFieldNumber;
const int PlayerInfo::kGoldFieldNumber;
const int PlayerInfo::kVipLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&viplevel_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(viplevel_));
  // @@protoc_insertion_point(copy_constructor:go.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerInfo_gamecomm_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viplevel_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(viplevel_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:go.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfo& PlayerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerInfo_gamecomm_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:go.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viplevel_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(viplevel_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_userid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string Name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("go.PlayerInfo.Name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 Age = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_age(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 Sex = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_sex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 Gold = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_gold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 VipLevel = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_viplevel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.PlayerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.PlayerInfo.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Age = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Sex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Gold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 VipLevel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.PlayerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.PlayerInfo.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 Age = 3;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age(), output);
  }

  // int32 Sex = 4;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // int64 Gold = 5;
  if (this->gold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gold(), output);
  }

  // int32 VipLevel = 6;
  if (this->viplevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->viplevel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.PlayerInfo.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 Age = 3;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->age(), target);
  }

  // int32 Sex = 4;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // int64 Gold = 5;
  if (this->gold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gold(), target);
  }

  // int32 VipLevel = 6;
  if (this->viplevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->viplevel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.PlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // int32 Age = 3;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // int32 Sex = 4;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  // int64 Gold = 5;
  if (this->gold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gold());
  }

  // int32 VipLevel = 6;
  if (this->viplevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->viplevel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.gold() != 0) {
    set_gold(from.gold());
  }
  if (from.viplevel() != 0) {
    set_viplevel(from.viplevel());
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(age_, other->age_);
  swap(sex_, other->sex_);
  swap(gold_, other->gold_);
  swap(viplevel_, other->viplevel_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gamecomm_2eproto);
  return ::file_level_metadata_gamecomm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserList::InitAsDefaultInstance() {
}
class UserList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserList::kAllInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserList::UserList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.UserList)
}
UserList::UserList(const UserList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      allinfos_(from.allinfos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:go.UserList)
}

void UserList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserList_gamecomm_2eproto.base);
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:go.UserList)
  SharedDtor();
}

void UserList::SharedDtor() {
}

void UserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserList& UserList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserList_gamecomm_2eproto.base);
  return *internal_default_instance();
}


void UserList::Clear() {
// @@protoc_insertion_point(message_clear_start:go.UserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allinfos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .go.PlayerInfo AllInfos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::go::PlayerInfo::_InternalParse;
          object = msg->add_allinfos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.UserList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .go.PlayerInfo AllInfos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_allinfos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.UserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.UserList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.UserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .go.PlayerInfo AllInfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allinfos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->allinfos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.UserList)
}

::google::protobuf::uint8* UserList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.UserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .go.PlayerInfo AllInfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allinfos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->allinfos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.UserList)
  return target;
}

size_t UserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.UserList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .go.PlayerInfo AllInfos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->allinfos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->allinfos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.UserList)
  GOOGLE_DCHECK_NE(&from, this);
  const UserList* source =
      ::google::protobuf::DynamicCastToGenerated<UserList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.UserList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.UserList)
    MergeFrom(*source);
  }
}

void UserList::MergeFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.UserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allinfos_.MergeFrom(from.allinfos_);
}

void UserList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserList::CopyFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {
  return true;
}

void UserList::Swap(UserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserList::InternalSwap(UserList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&allinfos_)->InternalSwap(CastToBase(&other->allinfos_));
}

::google::protobuf::Metadata UserList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gamecomm_2eproto);
  return ::file_level_metadata_gamecomm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerRecord::InitAsDefaultInstance() {
  ::go::_PlayerRecord_default_instance_._instance.get_mutable()->user_ = const_cast< ::go::PlayerInfo*>(
      ::go::PlayerInfo::internal_default_instance());
}
class PlayerRecord::HasBitSetters {
 public:
  static const ::go::PlayerInfo& user(const PlayerRecord* msg);
};

const ::go::PlayerInfo&
PlayerRecord::HasBitSetters::user(const PlayerRecord* msg) {
  return *msg->user_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRecord::kUserFieldNumber;
const int PlayerRecord::kTwiceFieldNumber;
const int PlayerRecord::kRankingFieldNumber;
const int PlayerRecord::kBankrollFieldNumber;
const int PlayerRecord::kWinLosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRecord::PlayerRecord()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.PlayerRecord)
}
PlayerRecord::PlayerRecord(const PlayerRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::go::PlayerInfo(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&twice_, &from.twice_,
    static_cast<size_t>(reinterpret_cast<char*>(&bankroll_) -
    reinterpret_cast<char*>(&twice_)) + sizeof(bankroll_));
  // @@protoc_insertion_point(copy_constructor:go.PlayerRecord)
}

void PlayerRecord::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerRecord_gamecomm_2eproto.base);
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bankroll_) -
      reinterpret_cast<char*>(&user_)) + sizeof(bankroll_));
}

PlayerRecord::~PlayerRecord() {
  // @@protoc_insertion_point(destructor:go.PlayerRecord)
  SharedDtor();
}

void PlayerRecord::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
}

void PlayerRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerRecord& PlayerRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerRecord_gamecomm_2eproto.base);
  return *internal_default_instance();
}


void PlayerRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:go.PlayerRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&twice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bankroll_) -
      reinterpret_cast<char*>(&twice_)) + sizeof(bankroll_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerRecord::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerRecord*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .go.PlayerInfo User = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::go::PlayerInfo::_InternalParse;
        object = msg->mutable_user();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 Twice = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_twice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 Ranking = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ranking(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 Bankroll = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bankroll(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 WinLos = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_winlos(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.PlayerRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .go.PlayerInfo User = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Twice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &twice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ranking = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Bankroll = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankroll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 WinLos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winlos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.PlayerRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.PlayerRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.PlayerRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.PlayerInfo User = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::user(this), output);
  }

  // int32 Twice = 2;
  if (this->twice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->twice(), output);
  }

  // int32 Ranking = 3;
  if (this->ranking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }

  // int32 Bankroll = 4;
  if (this->bankroll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bankroll(), output);
  }

  // int64 WinLos = 5;
  if (this->winlos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->winlos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.PlayerRecord)
}

::google::protobuf::uint8* PlayerRecord::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.PlayerRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.PlayerInfo User = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::user(this), target);
  }

  // int32 Twice = 2;
  if (this->twice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->twice(), target);
  }

  // int32 Ranking = 3;
  if (this->ranking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }

  // int32 Bankroll = 4;
  if (this->bankroll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bankroll(), target);
  }

  // int64 WinLos = 5;
  if (this->winlos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->winlos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.PlayerRecord)
  return target;
}

size_t PlayerRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.PlayerRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .go.PlayerInfo User = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // int32 Twice = 2;
  if (this->twice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->twice());
  }

  // int32 Ranking = 3;
  if (this->ranking() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ranking());
  }

  // int64 WinLos = 5;
  if (this->winlos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->winlos());
  }

  // int32 Bankroll = 4;
  if (this->bankroll() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bankroll());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.PlayerRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRecord* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.PlayerRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.PlayerRecord)
    MergeFrom(*source);
  }
}

void PlayerRecord::MergeFrom(const PlayerRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.PlayerRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->::go::PlayerInfo::MergeFrom(from.user());
  }
  if (from.twice() != 0) {
    set_twice(from.twice());
  }
  if (from.ranking() != 0) {
    set_ranking(from.ranking());
  }
  if (from.winlos() != 0) {
    set_winlos(from.winlos());
  }
  if (from.bankroll() != 0) {
    set_bankroll(from.bankroll());
  }
}

void PlayerRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.PlayerRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRecord::CopyFrom(const PlayerRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.PlayerRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRecord::IsInitialized() const {
  return true;
}

void PlayerRecord::Swap(PlayerRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRecord::InternalSwap(PlayerRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_, other->user_);
  swap(twice_, other->twice_);
  swap(ranking_, other->ranking_);
  swap(winlos_, other->winlos_);
  swap(bankroll_, other->bankroll_);
}

::google::protobuf::Metadata PlayerRecord::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gamecomm_2eproto);
  return ::file_level_metadata_gamecomm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameReady::InitAsDefaultInstance() {
}
class GameReady::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameReady::kUserIDFieldNumber;
const int GameReady::kIsReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameReady::GameReady()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameReady)
}
GameReady::GameReady(const GameReady& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isready_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(isready_));
  // @@protoc_insertion_point(copy_constructor:go.GameReady)
}

void GameReady::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isready_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(isready_));
}

GameReady::~GameReady() {
  // @@protoc_insertion_point(destructor:go.GameReady)
  SharedDtor();
}

void GameReady::SharedDtor() {
}

void GameReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameReady& GameReady::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameReady_gamecomm_2eproto.base);
  return *internal_default_instance();
}


void GameReady::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isready_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(isready_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameReady::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameReady*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_userid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool IsReady = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_isready(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameReady)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsReady = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameReady)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // bool IsReady = 2;
  if (this->isready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isready(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameReady)
}

::google::protobuf::uint8* GameReady::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // bool IsReady = 2;
  if (this->isready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isready(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameReady)
  return target;
}

size_t GameReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameReady)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // bool IsReady = 2;
  if (this->isready() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameReady)
  GOOGLE_DCHECK_NE(&from, this);
  const GameReady* source =
      ::google::protobuf::DynamicCastToGenerated<GameReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameReady)
    MergeFrom(*source);
  }
}

void GameReady::MergeFrom(const GameReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.isready() != 0) {
    set_isready(from.isready());
  }
}

void GameReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameReady::CopyFrom(const GameReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameReady::IsInitialized() const {
  return true;
}

void GameReady::Swap(GameReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameReady::InternalSwap(GameReady* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(isready_, other->isready_);
}

::google::protobuf::Metadata GameReady::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gamecomm_2eproto);
  return ::file_level_metadata_gamecomm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameBet::InitAsDefaultInstance() {
}
class GameBet::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBet::kBetAreaFieldNumber;
const int GameBet::kBetScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBet::GameBet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameBet)
}
GameBet::GameBet(const GameBet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&betscore_, &from.betscore_,
    static_cast<size_t>(reinterpret_cast<char*>(&betarea_) -
    reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
  // @@protoc_insertion_point(copy_constructor:go.GameBet)
}

void GameBet::SharedCtor() {
  ::memset(&betscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betarea_) -
      reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
}

GameBet::~GameBet() {
  // @@protoc_insertion_point(destructor:go.GameBet)
  SharedDtor();
}

void GameBet::SharedDtor() {
}

void GameBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameBet& GameBet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameBet_gamecomm_2eproto.base);
  return *internal_default_instance();
}


void GameBet::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&betscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betarea_) -
      reinterpret_cast<char*>(&betscore_)) + sizeof(betarea_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameBet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameBet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 BetArea = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_betarea(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 BetScore = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_betscore(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameBet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 BetArea = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BetScore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameBet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->betarea(), output);
  }

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->betscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameBet)
}

::google::protobuf::uint8* GameBet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->betarea(), target);
  }

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->betscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameBet)
  return target;
}

size_t GameBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameBet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 BetScore = 2;
  if (this->betscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->betscore());
  }

  // int32 BetArea = 1;
  if (this->betarea() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->betarea());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameBet)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBet* source =
      ::google::protobuf::DynamicCastToGenerated<GameBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameBet)
    MergeFrom(*source);
  }
}

void GameBet::MergeFrom(const GameBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.betscore() != 0) {
    set_betscore(from.betscore());
  }
  if (from.betarea() != 0) {
    set_betarea(from.betarea());
  }
}

void GameBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBet::CopyFrom(const GameBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBet::IsInitialized() const {
  return true;
}

void GameBet::Swap(GameBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBet::InternalSwap(GameBet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(betscore_, other->betscore_);
  swap(betarea_, other->betarea_);
}

::google::protobuf::Metadata GameBet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gamecomm_2eproto);
  return ::file_level_metadata_gamecomm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameBetResult::InitAsDefaultInstance() {
}
class GameBetResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBetResult::kUserIDFieldNumber;
const int GameBetResult::kStateFieldNumber;
const int GameBetResult::kHintsFieldNumber;
const int GameBetResult::kBetAreaFieldNumber;
const int GameBetResult::kBetScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBetResult::GameBetResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameBetResult)
}
GameBetResult::GameBetResult(const GameBetResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hints().size() > 0) {
    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&betscore_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(betscore_));
  // @@protoc_insertion_point(copy_constructor:go.GameBetResult)
}

void GameBetResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameBetResult_gamecomm_2eproto.base);
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betscore_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(betscore_));
}

GameBetResult::~GameBetResult() {
  // @@protoc_insertion_point(destructor:go.GameBetResult)
  SharedDtor();
}

void GameBetResult::SharedDtor() {
  hints_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameBetResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameBetResult& GameBetResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameBetResult_gamecomm_2eproto.base);
  return *internal_default_instance();
}


void GameBetResult::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betscore_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(betscore_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameBetResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameBetResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_userid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 State = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string Hints = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("go.GameBetResult.Hints");
        object = msg->mutable_hints();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 BetArea = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_betarea(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 BetScore = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_betscore(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameBetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameBetResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 State = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Hints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hints().data(), static_cast<int>(this->hints().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.GameBetResult.Hints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BetArea = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BetScore = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameBetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameBetResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameBetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // int32 State = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameBetResult.Hints");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hints(), output);
  }

  // int32 BetArea = 4;
  if (this->betarea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->betarea(), output);
  }

  // int64 BetScore = 5;
  if (this->betscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->betscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameBetResult)
}

::google::protobuf::uint8* GameBetResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameBetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // int32 State = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameBetResult.Hints");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hints(), target);
  }

  // int32 BetArea = 4;
  if (this->betarea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->betarea(), target);
  }

  // int64 BetScore = 5;
  if (this->betscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->betscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameBetResult)
  return target;
}

size_t GameBetResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameBetResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Hints = 3;
  if (this->hints().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hints());
  }

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // int32 State = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  // int32 BetArea = 4;
  if (this->betarea() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->betarea());
  }

  // int64 BetScore = 5;
  if (this->betscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->betscore());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameBetResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameBetResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBetResult* source =
      ::google::protobuf::DynamicCastToGenerated<GameBetResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameBetResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameBetResult)
    MergeFrom(*source);
  }
}

void GameBetResult::MergeFrom(const GameBetResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameBetResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hints().size() > 0) {

    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.betarea() != 0) {
    set_betarea(from.betarea());
  }
  if (from.betscore() != 0) {
    set_betscore(from.betscore());
  }
}

void GameBetResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameBetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBetResult::CopyFrom(const GameBetResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameBetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBetResult::IsInitialized() const {
  return true;
}

void GameBetResult::Swap(GameBetResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBetResult::InternalSwap(GameBetResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hints_.Swap(&other->hints_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(state_, other->state_);
  swap(betarea_, other->betarea_);
  swap(betscore_, other->betscore_);
}

::google::protobuf::Metadata GameBetResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gamecomm_2eproto);
  return ::file_level_metadata_gamecomm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameHost::InitAsDefaultInstance() {
}
class GameHost::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameHost::kIsWantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameHost::GameHost()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameHost)
}
GameHost::GameHost(const GameHost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  iswant_ = from.iswant_;
  // @@protoc_insertion_point(copy_constructor:go.GameHost)
}

void GameHost::SharedCtor() {
  iswant_ = false;
}

GameHost::~GameHost() {
  // @@protoc_insertion_point(destructor:go.GameHost)
  SharedDtor();
}

void GameHost::SharedDtor() {
}

void GameHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameHost& GameHost::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameHost_gamecomm_2eproto.base);
  return *internal_default_instance();
}


void GameHost::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iswant_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameHost::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameHost*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool IsWant = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_iswant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameHost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool IsWant = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameHost)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsWant = 1;
  if (this->iswant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswant(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameHost)
}

::google::protobuf::uint8* GameHost::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsWant = 1;
  if (this->iswant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iswant(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameHost)
  return target;
}

size_t GameHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameHost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool IsWant = 1;
  if (this->iswant() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameHost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameHost)
  GOOGLE_DCHECK_NE(&from, this);
  const GameHost* source =
      ::google::protobuf::DynamicCastToGenerated<GameHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameHost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameHost)
    MergeFrom(*source);
  }
}

void GameHost::MergeFrom(const GameHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iswant() != 0) {
    set_iswant(from.iswant());
  }
}

void GameHost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameHost::CopyFrom(const GameHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameHost::IsInitialized() const {
  return true;
}

void GameHost::Swap(GameHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameHost::InternalSwap(GameHost* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(iswant_, other->iswant_);
}

::google::protobuf::Metadata GameHost::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gamecomm_2eproto);
  return ::file_level_metadata_gamecomm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameSuperHost::InitAsDefaultInstance() {
}
class GameSuperHost::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSuperHost::kIsWantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSuperHost::GameSuperHost()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameSuperHost)
}
GameSuperHost::GameSuperHost(const GameSuperHost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  iswant_ = from.iswant_;
  // @@protoc_insertion_point(copy_constructor:go.GameSuperHost)
}

void GameSuperHost::SharedCtor() {
  iswant_ = false;
}

GameSuperHost::~GameSuperHost() {
  // @@protoc_insertion_point(destructor:go.GameSuperHost)
  SharedDtor();
}

void GameSuperHost::SharedDtor() {
}

void GameSuperHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSuperHost& GameSuperHost::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameSuperHost_gamecomm_2eproto.base);
  return *internal_default_instance();
}


void GameSuperHost::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameSuperHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iswant_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSuperHost::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameSuperHost*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool IsWant = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_iswant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSuperHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameSuperHost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool IsWant = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameSuperHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameSuperHost)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSuperHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameSuperHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsWant = 1;
  if (this->iswant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswant(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameSuperHost)
}

::google::protobuf::uint8* GameSuperHost::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameSuperHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsWant = 1;
  if (this->iswant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iswant(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameSuperHost)
  return target;
}

size_t GameSuperHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameSuperHost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool IsWant = 1;
  if (this->iswant() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSuperHost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameSuperHost)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSuperHost* source =
      ::google::protobuf::DynamicCastToGenerated<GameSuperHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameSuperHost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameSuperHost)
    MergeFrom(*source);
  }
}

void GameSuperHost::MergeFrom(const GameSuperHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameSuperHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iswant() != 0) {
    set_iswant(from.iswant());
  }
}

void GameSuperHost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameSuperHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSuperHost::CopyFrom(const GameSuperHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameSuperHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSuperHost::IsInitialized() const {
  return true;
}

void GameSuperHost::Swap(GameSuperHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSuperHost::InternalSwap(GameSuperHost* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(iswant_, other->iswant_);
}

::google::protobuf::Metadata GameSuperHost::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gamecomm_2eproto);
  return ::file_level_metadata_gamecomm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameRecord::InitAsDefaultInstance() {
}
class GameRecord::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameRecord::kPorkFieldNumber;
const int GameRecord::kTypeFieldNumber;
const int GameRecord::kIsWonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameRecord::GameRecord()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameRecord)
}
GameRecord::GameRecord(const GameRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pork_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pork().size() > 0) {
    pork_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pork_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&iswon_) -
    reinterpret_cast<char*>(&type_)) + sizeof(iswon_));
  // @@protoc_insertion_point(copy_constructor:go.GameRecord)
}

void GameRecord::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameRecord_gamecomm_2eproto.base);
  pork_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswon_) -
      reinterpret_cast<char*>(&type_)) + sizeof(iswon_));
}

GameRecord::~GameRecord() {
  // @@protoc_insertion_point(destructor:go.GameRecord)
  SharedDtor();
}

void GameRecord::SharedDtor() {
  pork_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameRecord& GameRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameRecord_gamecomm_2eproto.base);
  return *internal_default_instance();
}


void GameRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pork_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswon_) -
      reinterpret_cast<char*>(&type_)) + sizeof(iswon_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameRecord::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameRecord*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes Pork = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pork();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 Type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isWon = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_iswon(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes Pork = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pork()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isWon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Pork = 1;
  if (this->pork().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pork(), output);
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // bool isWon = 3;
  if (this->iswon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iswon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameRecord)
}

::google::protobuf::uint8* GameRecord::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Pork = 1;
  if (this->pork().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pork(), target);
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // bool isWon = 3;
  if (this->iswon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iswon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameRecord)
  return target;
}

size_t GameRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Pork = 1;
  if (this->pork().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pork());
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // bool isWon = 3;
  if (this->iswon() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GameRecord* source =
      ::google::protobuf::DynamicCastToGenerated<GameRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameRecord)
    MergeFrom(*source);
  }
}

void GameRecord::MergeFrom(const GameRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pork().size() > 0) {

    pork_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pork_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.iswon() != 0) {
    set_iswon(from.iswon());
  }
}

void GameRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRecord::CopyFrom(const GameRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRecord::IsInitialized() const {
  return true;
}

void GameRecord::Swap(GameRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameRecord::InternalSwap(GameRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pork_.Swap(&other->pork_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(iswon_, other->iswon_);
}

::google::protobuf::Metadata GameRecord::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gamecomm_2eproto);
  return ::file_level_metadata_gamecomm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameRecordList::InitAsDefaultInstance() {
}
class GameRecordList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameRecordList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameRecordList::GameRecordList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameRecordList)
}
GameRecordList::GameRecordList(const GameRecordList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:go.GameRecordList)
}

void GameRecordList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameRecordList_gamecomm_2eproto.base);
}

GameRecordList::~GameRecordList() {
  // @@protoc_insertion_point(destructor:go.GameRecordList)
  SharedDtor();
}

void GameRecordList::SharedDtor() {
}

void GameRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameRecordList& GameRecordList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameRecordList_gamecomm_2eproto.base);
  return *internal_default_instance();
}


void GameRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameRecordList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameRecordList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .go.GameRecord list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::go::GameRecord::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameRecordList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .go.GameRecord list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameRecordList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .go.GameRecord list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameRecordList)
}

::google::protobuf::uint8* GameRecordList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .go.GameRecord list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameRecordList)
  return target;
}

size_t GameRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameRecordList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .go.GameRecord list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameRecordList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const GameRecordList* source =
      ::google::protobuf::DynamicCastToGenerated<GameRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameRecordList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameRecordList)
    MergeFrom(*source);
  }
}

void GameRecordList::MergeFrom(const GameRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void GameRecordList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRecordList::CopyFrom(const GameRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRecordList::IsInitialized() const {
  return true;
}

void GameRecordList::Swap(GameRecordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameRecordList::InternalSwap(GameRecordList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata GameRecordList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gamecomm_2eproto);
  return ::file_level_metadata_gamecomm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameResult::InitAsDefaultInstance() {
}
class GameResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameResult::kFlagFieldNumber;
const int GameResult::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameResult::GameResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameResult)
}
GameResult::GameResult(const GameResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:go.GameResult)
}

void GameResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameResult_gamecomm_2eproto.base);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

GameResult::~GameResult() {
  // @@protoc_insertion_point(destructor:go.GameResult)
  SharedDtor();
}

void GameResult::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameResult& GameResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameResult_gamecomm_2eproto.base);
  return *internal_default_instance();
}


void GameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes Reason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_reason();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // bytes Reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameResult)
}

::google::protobuf::uint8* GameResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // bytes Reason = 2;
  if (this->reason().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameResult)
  return target;
}

size_t GameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reason());
  }

  // int32 Flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResult* source =
      ::google::protobuf::DynamicCastToGenerated<GameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameResult)
    MergeFrom(*source);
  }
}

void GameResult::MergeFrom(const GameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void GameResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResult::CopyFrom(const GameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResult::IsInitialized() const {
  return true;
}

void GameResult::Swap(GameResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameResult::InternalSwap(GameResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata GameResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gamecomm_2eproto);
  return ::file_level_metadata_gamecomm_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace go
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::go::PlayerInfo* Arena::CreateMaybeMessage< ::go::PlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::go::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::go::UserList* Arena::CreateMaybeMessage< ::go::UserList >(Arena* arena) {
  return Arena::CreateInternal< ::go::UserList >(arena);
}
template<> PROTOBUF_NOINLINE ::go::PlayerRecord* Arena::CreateMaybeMessage< ::go::PlayerRecord >(Arena* arena) {
  return Arena::CreateInternal< ::go::PlayerRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameReady* Arena::CreateMaybeMessage< ::go::GameReady >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameReady >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameBet* Arena::CreateMaybeMessage< ::go::GameBet >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameBet >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameBetResult* Arena::CreateMaybeMessage< ::go::GameBetResult >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameBetResult >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameHost* Arena::CreateMaybeMessage< ::go::GameHost >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameHost >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameSuperHost* Arena::CreateMaybeMessage< ::go::GameSuperHost >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameSuperHost >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameRecord* Arena::CreateMaybeMessage< ::go::GameRecord >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameRecordList* Arena::CreateMaybeMessage< ::go::GameRecordList >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameRecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameResult* Arena::CreateMaybeMessage< ::go::GameResult >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameResult >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
