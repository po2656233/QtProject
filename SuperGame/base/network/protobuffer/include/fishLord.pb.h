// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fishLord.proto

#ifndef PROTOBUF_INCLUDED_fishLord_2eproto
#define PROTOBUF_INCLUDED_fishLord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fishLord_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_fishLord_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_fishLord_2eproto();
namespace go {
class GameFishLordBetResult;
class GameFishLordBetResultDefaultTypeInternal;
extern GameFishLordBetResultDefaultTypeInternal _GameFishLordBetResult_default_instance_;
class GameFishLordEnter;
class GameFishLordEnterDefaultTypeInternal;
extern GameFishLordEnterDefaultTypeInternal _GameFishLordEnter_default_instance_;
class GameFishLordOver;
class GameFishLordOverDefaultTypeInternal;
extern GameFishLordOverDefaultTypeInternal _GameFishLordOver_default_instance_;
class GameFishLordPlaying;
class GameFishLordPlayingDefaultTypeInternal;
extern GameFishLordPlayingDefaultTypeInternal _GameFishLordPlaying_default_instance_;
}  // namespace go
namespace google {
namespace protobuf {
template<> ::go::GameFishLordBetResult* Arena::CreateMaybeMessage<::go::GameFishLordBetResult>(Arena*);
template<> ::go::GameFishLordEnter* Arena::CreateMaybeMessage<::go::GameFishLordEnter>(Arena*);
template<> ::go::GameFishLordOver* Arena::CreateMaybeMessage<::go::GameFishLordOver>(Arena*);
template<> ::go::GameFishLordPlaying* Arena::CreateMaybeMessage<::go::GameFishLordPlaying>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace go {

// ===================================================================

class GameFishLordEnter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameFishLordEnter) */ {
 public:
  GameFishLordEnter();
  virtual ~GameFishLordEnter();

  GameFishLordEnter(const GameFishLordEnter& from);

  inline GameFishLordEnter& operator=(const GameFishLordEnter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameFishLordEnter(GameFishLordEnter&& from) noexcept
    : GameFishLordEnter() {
    *this = ::std::move(from);
  }

  inline GameFishLordEnter& operator=(GameFishLordEnter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameFishLordEnter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameFishLordEnter* internal_default_instance() {
    return reinterpret_cast<const GameFishLordEnter*>(
               &_GameFishLordEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameFishLordEnter* other);
  friend void swap(GameFishLordEnter& a, GameFishLordEnter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameFishLordEnter* New() const final {
    return CreateMaybeMessage<GameFishLordEnter>(nullptr);
  }

  GameFishLordEnter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameFishLordEnter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameFishLordEnter& from);
  void MergeFrom(const GameFishLordEnter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameFishLordEnter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 AwardAreas = 1;
  int awardareas_size() const;
  void clear_awardareas();
  static const int kAwardAreasFieldNumber = 1;
  ::google::protobuf::int32 awardareas(int index) const;
  void set_awardareas(int index, ::google::protobuf::int32 value);
  void add_awardareas(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      awardareas() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_awardareas();

  // repeated string players = 2;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 2;
  const ::std::string& players(int index) const;
  ::std::string* mutable_players(int index);
  void set_players(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_players(int index, ::std::string&& value);
  #endif
  void set_players(int index, const char* value);
  void set_players(int index, const char* value, size_t size);
  ::std::string* add_players();
  void add_players(const ::std::string& value);
  #if LANG_CXX11
  void add_players(::std::string&& value);
  #endif
  void add_players(const char* value);
  void add_players(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& players() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_players();

  // repeated int32 Chips = 4;
  int chips_size() const;
  void clear_chips();
  static const int kChipsFieldNumber = 4;
  ::google::protobuf::int32 chips(int index) const;
  void set_chips(int index, ::google::protobuf::int32 value);
  void add_chips(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chips() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chips();

  // repeated int32 Odds = 5;
  int odds_size() const;
  void clear_odds();
  static const int kOddsFieldNumber = 5;
  ::google::protobuf::int32 odds(int index) const;
  void set_odds(int index, ::google::protobuf::int32 value);
  void add_odds(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      odds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_odds();

  // int64 BankerScore = 6;
  void clear_bankerscore();
  static const int kBankerScoreFieldNumber = 6;
  ::google::protobuf::int64 bankerscore() const;
  void set_bankerscore(::google::protobuf::int64 value);

  // int64 PlayerScore = 7;
  void clear_playerscore();
  static const int kPlayerScoreFieldNumber = 7;
  ::google::protobuf::int64 playerscore() const;
  void set_playerscore(::google::protobuf::int64 value);

  // int64 Acquire = 8;
  void clear_acquire();
  static const int kAcquireFieldNumber = 8;
  ::google::protobuf::int64 acquire() const;
  void set_acquire(::google::protobuf::int64 value);

  // int32 Countdown = 3;
  void clear_countdown();
  static const int kCountdownFieldNumber = 3;
  ::google::protobuf::int32 countdown() const;
  void set_countdown(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:go.GameFishLordEnter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > awardareas_;
  mutable std::atomic<int> _awardareas_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> players_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chips_;
  mutable std::atomic<int> _chips_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > odds_;
  mutable std::atomic<int> _odds_cached_byte_size_;
  ::google::protobuf::int64 bankerscore_;
  ::google::protobuf::int64 playerscore_;
  ::google::protobuf::int64 acquire_;
  ::google::protobuf::int32 countdown_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fishLord_2eproto;
};
// -------------------------------------------------------------------

class GameFishLordPlaying final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameFishLordPlaying) */ {
 public:
  GameFishLordPlaying();
  virtual ~GameFishLordPlaying();

  GameFishLordPlaying(const GameFishLordPlaying& from);

  inline GameFishLordPlaying& operator=(const GameFishLordPlaying& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameFishLordPlaying(GameFishLordPlaying&& from) noexcept
    : GameFishLordPlaying() {
    *this = ::std::move(from);
  }

  inline GameFishLordPlaying& operator=(GameFishLordPlaying&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameFishLordPlaying& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameFishLordPlaying* internal_default_instance() {
    return reinterpret_cast<const GameFishLordPlaying*>(
               &_GameFishLordPlaying_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameFishLordPlaying* other);
  friend void swap(GameFishLordPlaying& a, GameFishLordPlaying& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameFishLordPlaying* New() const final {
    return CreateMaybeMessage<GameFishLordPlaying>(nullptr);
  }

  GameFishLordPlaying* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameFishLordPlaying>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameFishLordPlaying& from);
  void MergeFrom(const GameFishLordPlaying& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameFishLordPlaying* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 BetScore = 2;
  void clear_betscore();
  static const int kBetScoreFieldNumber = 2;
  ::google::protobuf::int64 betscore() const;
  void set_betscore(::google::protobuf::int64 value);

  // int32 BetArea = 1;
  void clear_betarea();
  static const int kBetAreaFieldNumber = 1;
  ::google::protobuf::int32 betarea() const;
  void set_betarea(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:go.GameFishLordPlaying)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 betscore_;
  ::google::protobuf::int32 betarea_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fishLord_2eproto;
};
// -------------------------------------------------------------------

class GameFishLordBetResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameFishLordBetResult) */ {
 public:
  GameFishLordBetResult();
  virtual ~GameFishLordBetResult();

  GameFishLordBetResult(const GameFishLordBetResult& from);

  inline GameFishLordBetResult& operator=(const GameFishLordBetResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameFishLordBetResult(GameFishLordBetResult&& from) noexcept
    : GameFishLordBetResult() {
    *this = ::std::move(from);
  }

  inline GameFishLordBetResult& operator=(GameFishLordBetResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameFishLordBetResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameFishLordBetResult* internal_default_instance() {
    return reinterpret_cast<const GameFishLordBetResult*>(
               &_GameFishLordBetResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GameFishLordBetResult* other);
  friend void swap(GameFishLordBetResult& a, GameFishLordBetResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameFishLordBetResult* New() const final {
    return CreateMaybeMessage<GameFishLordBetResult>(nullptr);
  }

  GameFishLordBetResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameFishLordBetResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameFishLordBetResult& from);
  void MergeFrom(const GameFishLordBetResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameFishLordBetResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Hints = 2;
  void clear_hints();
  static const int kHintsFieldNumber = 2;
  const ::std::string& hints() const;
  void set_hints(const ::std::string& value);
  #if LANG_CXX11
  void set_hints(::std::string&& value);
  #endif
  void set_hints(const char* value);
  void set_hints(const char* value, size_t size);
  ::std::string* mutable_hints();
  ::std::string* release_hints();
  void set_allocated_hints(::std::string* hints);

  // int32 State = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:go.GameFishLordBetResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hints_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fishLord_2eproto;
};
// -------------------------------------------------------------------

class GameFishLordOver final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameFishLordOver) */ {
 public:
  GameFishLordOver();
  virtual ~GameFishLordOver();

  GameFishLordOver(const GameFishLordOver& from);

  inline GameFishLordOver& operator=(const GameFishLordOver& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameFishLordOver(GameFishLordOver&& from) noexcept
    : GameFishLordOver() {
    *this = ::std::move(from);
  }

  inline GameFishLordOver& operator=(GameFishLordOver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameFishLordOver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameFishLordOver* internal_default_instance() {
    return reinterpret_cast<const GameFishLordOver*>(
               &_GameFishLordOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GameFishLordOver* other);
  friend void swap(GameFishLordOver& a, GameFishLordOver& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameFishLordOver* New() const final {
    return CreateMaybeMessage<GameFishLordOver>(nullptr);
  }

  GameFishLordOver* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameFishLordOver>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameFishLordOver& from);
  void MergeFrom(const GameFishLordOver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameFishLordOver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 AwardArea = 1;
  int awardarea_size() const;
  void clear_awardarea();
  static const int kAwardAreaFieldNumber = 1;
  ::google::protobuf::int32 awardarea(int index) const;
  void set_awardarea(int index, ::google::protobuf::int32 value);
  void add_awardarea(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      awardarea() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_awardarea();

  // repeated int32 PlayerCard = 2;
  int playercard_size() const;
  void clear_playercard();
  static const int kPlayerCardFieldNumber = 2;
  ::google::protobuf::int32 playercard(int index) const;
  void set_playercard(int index, ::google::protobuf::int32 value);
  void add_playercard(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      playercard() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_playercard();

  // repeated int32 BankerCard = 3;
  int bankercard_size() const;
  void clear_bankercard();
  static const int kBankerCardFieldNumber = 3;
  ::google::protobuf::int32 bankercard(int index) const;
  void set_bankercard(int index, ::google::protobuf::int32 value);
  void add_bankercard(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bankercard() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bankercard();

  // int64 Acquire = 4;
  void clear_acquire();
  static const int kAcquireFieldNumber = 4;
  ::google::protobuf::int64 acquire() const;
  void set_acquire(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:go.GameFishLordOver)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > awardarea_;
  mutable std::atomic<int> _awardarea_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > playercard_;
  mutable std::atomic<int> _playercard_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bankercard_;
  mutable std::atomic<int> _bankercard_cached_byte_size_;
  ::google::protobuf::int64 acquire_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fishLord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameFishLordEnter

// repeated int32 AwardAreas = 1;
inline int GameFishLordEnter::awardareas_size() const {
  return awardareas_.size();
}
inline void GameFishLordEnter::clear_awardareas() {
  awardareas_.Clear();
}
inline ::google::protobuf::int32 GameFishLordEnter::awardareas(int index) const {
  // @@protoc_insertion_point(field_get:go.GameFishLordEnter.AwardAreas)
  return awardareas_.Get(index);
}
inline void GameFishLordEnter::set_awardareas(int index, ::google::protobuf::int32 value) {
  awardareas_.Set(index, value);
  // @@protoc_insertion_point(field_set:go.GameFishLordEnter.AwardAreas)
}
inline void GameFishLordEnter::add_awardareas(::google::protobuf::int32 value) {
  awardareas_.Add(value);
  // @@protoc_insertion_point(field_add:go.GameFishLordEnter.AwardAreas)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameFishLordEnter::awardareas() const {
  // @@protoc_insertion_point(field_list:go.GameFishLordEnter.AwardAreas)
  return awardareas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameFishLordEnter::mutable_awardareas() {
  // @@protoc_insertion_point(field_mutable_list:go.GameFishLordEnter.AwardAreas)
  return &awardareas_;
}

// repeated string players = 2;
inline int GameFishLordEnter::players_size() const {
  return players_.size();
}
inline void GameFishLordEnter::clear_players() {
  players_.Clear();
}
inline const ::std::string& GameFishLordEnter::players(int index) const {
  // @@protoc_insertion_point(field_get:go.GameFishLordEnter.players)
  return players_.Get(index);
}
inline ::std::string* GameFishLordEnter::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:go.GameFishLordEnter.players)
  return players_.Mutable(index);
}
inline void GameFishLordEnter::set_players(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:go.GameFishLordEnter.players)
  players_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GameFishLordEnter::set_players(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:go.GameFishLordEnter.players)
  players_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GameFishLordEnter::set_players(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  players_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:go.GameFishLordEnter.players)
}
inline void GameFishLordEnter::set_players(int index, const char* value, size_t size) {
  players_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:go.GameFishLordEnter.players)
}
inline ::std::string* GameFishLordEnter::add_players() {
  // @@protoc_insertion_point(field_add_mutable:go.GameFishLordEnter.players)
  return players_.Add();
}
inline void GameFishLordEnter::add_players(const ::std::string& value) {
  players_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:go.GameFishLordEnter.players)
}
#if LANG_CXX11
inline void GameFishLordEnter::add_players(::std::string&& value) {
  players_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:go.GameFishLordEnter.players)
}
#endif
inline void GameFishLordEnter::add_players(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  players_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:go.GameFishLordEnter.players)
}
inline void GameFishLordEnter::add_players(const char* value, size_t size) {
  players_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:go.GameFishLordEnter.players)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GameFishLordEnter::players() const {
  // @@protoc_insertion_point(field_list:go.GameFishLordEnter.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GameFishLordEnter::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:go.GameFishLordEnter.players)
  return &players_;
}

// int32 Countdown = 3;
inline void GameFishLordEnter::clear_countdown() {
  countdown_ = 0;
}
inline ::google::protobuf::int32 GameFishLordEnter::countdown() const {
  // @@protoc_insertion_point(field_get:go.GameFishLordEnter.Countdown)
  return countdown_;
}
inline void GameFishLordEnter::set_countdown(::google::protobuf::int32 value) {
  
  countdown_ = value;
  // @@protoc_insertion_point(field_set:go.GameFishLordEnter.Countdown)
}

// repeated int32 Chips = 4;
inline int GameFishLordEnter::chips_size() const {
  return chips_.size();
}
inline void GameFishLordEnter::clear_chips() {
  chips_.Clear();
}
inline ::google::protobuf::int32 GameFishLordEnter::chips(int index) const {
  // @@protoc_insertion_point(field_get:go.GameFishLordEnter.Chips)
  return chips_.Get(index);
}
inline void GameFishLordEnter::set_chips(int index, ::google::protobuf::int32 value) {
  chips_.Set(index, value);
  // @@protoc_insertion_point(field_set:go.GameFishLordEnter.Chips)
}
inline void GameFishLordEnter::add_chips(::google::protobuf::int32 value) {
  chips_.Add(value);
  // @@protoc_insertion_point(field_add:go.GameFishLordEnter.Chips)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameFishLordEnter::chips() const {
  // @@protoc_insertion_point(field_list:go.GameFishLordEnter.Chips)
  return chips_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameFishLordEnter::mutable_chips() {
  // @@protoc_insertion_point(field_mutable_list:go.GameFishLordEnter.Chips)
  return &chips_;
}

// repeated int32 Odds = 5;
inline int GameFishLordEnter::odds_size() const {
  return odds_.size();
}
inline void GameFishLordEnter::clear_odds() {
  odds_.Clear();
}
inline ::google::protobuf::int32 GameFishLordEnter::odds(int index) const {
  // @@protoc_insertion_point(field_get:go.GameFishLordEnter.Odds)
  return odds_.Get(index);
}
inline void GameFishLordEnter::set_odds(int index, ::google::protobuf::int32 value) {
  odds_.Set(index, value);
  // @@protoc_insertion_point(field_set:go.GameFishLordEnter.Odds)
}
inline void GameFishLordEnter::add_odds(::google::protobuf::int32 value) {
  odds_.Add(value);
  // @@protoc_insertion_point(field_add:go.GameFishLordEnter.Odds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameFishLordEnter::odds() const {
  // @@protoc_insertion_point(field_list:go.GameFishLordEnter.Odds)
  return odds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameFishLordEnter::mutable_odds() {
  // @@protoc_insertion_point(field_mutable_list:go.GameFishLordEnter.Odds)
  return &odds_;
}

// int64 BankerScore = 6;
inline void GameFishLordEnter::clear_bankerscore() {
  bankerscore_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameFishLordEnter::bankerscore() const {
  // @@protoc_insertion_point(field_get:go.GameFishLordEnter.BankerScore)
  return bankerscore_;
}
inline void GameFishLordEnter::set_bankerscore(::google::protobuf::int64 value) {
  
  bankerscore_ = value;
  // @@protoc_insertion_point(field_set:go.GameFishLordEnter.BankerScore)
}

// int64 PlayerScore = 7;
inline void GameFishLordEnter::clear_playerscore() {
  playerscore_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameFishLordEnter::playerscore() const {
  // @@protoc_insertion_point(field_get:go.GameFishLordEnter.PlayerScore)
  return playerscore_;
}
inline void GameFishLordEnter::set_playerscore(::google::protobuf::int64 value) {
  
  playerscore_ = value;
  // @@protoc_insertion_point(field_set:go.GameFishLordEnter.PlayerScore)
}

// int64 Acquire = 8;
inline void GameFishLordEnter::clear_acquire() {
  acquire_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameFishLordEnter::acquire() const {
  // @@protoc_insertion_point(field_get:go.GameFishLordEnter.Acquire)
  return acquire_;
}
inline void GameFishLordEnter::set_acquire(::google::protobuf::int64 value) {
  
  acquire_ = value;
  // @@protoc_insertion_point(field_set:go.GameFishLordEnter.Acquire)
}

// -------------------------------------------------------------------

// GameFishLordPlaying

// int32 BetArea = 1;
inline void GameFishLordPlaying::clear_betarea() {
  betarea_ = 0;
}
inline ::google::protobuf::int32 GameFishLordPlaying::betarea() const {
  // @@protoc_insertion_point(field_get:go.GameFishLordPlaying.BetArea)
  return betarea_;
}
inline void GameFishLordPlaying::set_betarea(::google::protobuf::int32 value) {
  
  betarea_ = value;
  // @@protoc_insertion_point(field_set:go.GameFishLordPlaying.BetArea)
}

// int64 BetScore = 2;
inline void GameFishLordPlaying::clear_betscore() {
  betscore_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameFishLordPlaying::betscore() const {
  // @@protoc_insertion_point(field_get:go.GameFishLordPlaying.BetScore)
  return betscore_;
}
inline void GameFishLordPlaying::set_betscore(::google::protobuf::int64 value) {
  
  betscore_ = value;
  // @@protoc_insertion_point(field_set:go.GameFishLordPlaying.BetScore)
}

// -------------------------------------------------------------------

// GameFishLordBetResult

// int32 State = 1;
inline void GameFishLordBetResult::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 GameFishLordBetResult::state() const {
  // @@protoc_insertion_point(field_get:go.GameFishLordBetResult.State)
  return state_;
}
inline void GameFishLordBetResult::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:go.GameFishLordBetResult.State)
}

// string Hints = 2;
inline void GameFishLordBetResult::clear_hints() {
  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameFishLordBetResult::hints() const {
  // @@protoc_insertion_point(field_get:go.GameFishLordBetResult.Hints)
  return hints_.GetNoArena();
}
inline void GameFishLordBetResult::set_hints(const ::std::string& value) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameFishLordBetResult.Hints)
}
#if LANG_CXX11
inline void GameFishLordBetResult::set_hints(::std::string&& value) {
  
  hints_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameFishLordBetResult.Hints)
}
#endif
inline void GameFishLordBetResult::set_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameFishLordBetResult.Hints)
}
inline void GameFishLordBetResult::set_hints(const char* value, size_t size) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameFishLordBetResult.Hints)
}
inline ::std::string* GameFishLordBetResult::mutable_hints() {
  
  // @@protoc_insertion_point(field_mutable:go.GameFishLordBetResult.Hints)
  return hints_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameFishLordBetResult::release_hints() {
  // @@protoc_insertion_point(field_release:go.GameFishLordBetResult.Hints)
  
  return hints_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameFishLordBetResult::set_allocated_hints(::std::string* hints) {
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hints);
  // @@protoc_insertion_point(field_set_allocated:go.GameFishLordBetResult.Hints)
}

// -------------------------------------------------------------------

// GameFishLordOver

// repeated int32 AwardArea = 1;
inline int GameFishLordOver::awardarea_size() const {
  return awardarea_.size();
}
inline void GameFishLordOver::clear_awardarea() {
  awardarea_.Clear();
}
inline ::google::protobuf::int32 GameFishLordOver::awardarea(int index) const {
  // @@protoc_insertion_point(field_get:go.GameFishLordOver.AwardArea)
  return awardarea_.Get(index);
}
inline void GameFishLordOver::set_awardarea(int index, ::google::protobuf::int32 value) {
  awardarea_.Set(index, value);
  // @@protoc_insertion_point(field_set:go.GameFishLordOver.AwardArea)
}
inline void GameFishLordOver::add_awardarea(::google::protobuf::int32 value) {
  awardarea_.Add(value);
  // @@protoc_insertion_point(field_add:go.GameFishLordOver.AwardArea)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameFishLordOver::awardarea() const {
  // @@protoc_insertion_point(field_list:go.GameFishLordOver.AwardArea)
  return awardarea_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameFishLordOver::mutable_awardarea() {
  // @@protoc_insertion_point(field_mutable_list:go.GameFishLordOver.AwardArea)
  return &awardarea_;
}

// repeated int32 PlayerCard = 2;
inline int GameFishLordOver::playercard_size() const {
  return playercard_.size();
}
inline void GameFishLordOver::clear_playercard() {
  playercard_.Clear();
}
inline ::google::protobuf::int32 GameFishLordOver::playercard(int index) const {
  // @@protoc_insertion_point(field_get:go.GameFishLordOver.PlayerCard)
  return playercard_.Get(index);
}
inline void GameFishLordOver::set_playercard(int index, ::google::protobuf::int32 value) {
  playercard_.Set(index, value);
  // @@protoc_insertion_point(field_set:go.GameFishLordOver.PlayerCard)
}
inline void GameFishLordOver::add_playercard(::google::protobuf::int32 value) {
  playercard_.Add(value);
  // @@protoc_insertion_point(field_add:go.GameFishLordOver.PlayerCard)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameFishLordOver::playercard() const {
  // @@protoc_insertion_point(field_list:go.GameFishLordOver.PlayerCard)
  return playercard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameFishLordOver::mutable_playercard() {
  // @@protoc_insertion_point(field_mutable_list:go.GameFishLordOver.PlayerCard)
  return &playercard_;
}

// repeated int32 BankerCard = 3;
inline int GameFishLordOver::bankercard_size() const {
  return bankercard_.size();
}
inline void GameFishLordOver::clear_bankercard() {
  bankercard_.Clear();
}
inline ::google::protobuf::int32 GameFishLordOver::bankercard(int index) const {
  // @@protoc_insertion_point(field_get:go.GameFishLordOver.BankerCard)
  return bankercard_.Get(index);
}
inline void GameFishLordOver::set_bankercard(int index, ::google::protobuf::int32 value) {
  bankercard_.Set(index, value);
  // @@protoc_insertion_point(field_set:go.GameFishLordOver.BankerCard)
}
inline void GameFishLordOver::add_bankercard(::google::protobuf::int32 value) {
  bankercard_.Add(value);
  // @@protoc_insertion_point(field_add:go.GameFishLordOver.BankerCard)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameFishLordOver::bankercard() const {
  // @@protoc_insertion_point(field_list:go.GameFishLordOver.BankerCard)
  return bankercard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameFishLordOver::mutable_bankercard() {
  // @@protoc_insertion_point(field_mutable_list:go.GameFishLordOver.BankerCard)
  return &bankercard_;
}

// int64 Acquire = 4;
inline void GameFishLordOver::clear_acquire() {
  acquire_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameFishLordOver::acquire() const {
  // @@protoc_insertion_point(field_get:go.GameFishLordOver.Acquire)
  return acquire_;
}
inline void GameFishLordOver::set_acquire(::google::protobuf::int64 value) {
  
  acquire_ = value;
  // @@protoc_insertion_point(field_set:go.GameFishLordOver.Acquire)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace go

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_fishLord_2eproto
