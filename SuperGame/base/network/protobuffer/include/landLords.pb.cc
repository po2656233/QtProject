// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: landLords.proto

#include "landLords.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_gamecomm_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserList_gamecomm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_landLords_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameLandLordsAward_landLords_2eproto;
namespace go {
class GameLandLordsEnterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLandLordsEnter> _instance;
} _GameLandLordsEnter_default_instance_;
class GameLandLordsPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLandLordsPlayer> _instance;
} _GameLandLordsPlayer_default_instance_;
class GameLandLordsBeginsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLandLordsBegins> _instance;
} _GameLandLordsBegins_default_instance_;
class GameLandLordsOutcardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLandLordsOutcard> _instance;
} _GameLandLordsOutcard_default_instance_;
class GameLandLordsOperateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLandLordsOperate> _instance;
} _GameLandLordsOperate_default_instance_;
class GameLandLordsAwardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLandLordsAward> _instance;
} _GameLandLordsAward_default_instance_;
class GameLandLordsCheckoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLandLordsCheckout> _instance;
} _GameLandLordsCheckout_default_instance_;
}  // namespace go
static void InitDefaultsGameLandLordsEnter_landLords_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameLandLordsEnter_default_instance_;
    new (ptr) ::go::GameLandLordsEnter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameLandLordsEnter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameLandLordsEnter_landLords_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameLandLordsEnter_landLords_2eproto}, {
      &scc_info_UserList_gamecomm_2eproto.base,}};

static void InitDefaultsGameLandLordsPlayer_landLords_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameLandLordsPlayer_default_instance_;
    new (ptr) ::go::GameLandLordsPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameLandLordsPlayer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLandLordsPlayer_landLords_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLandLordsPlayer_landLords_2eproto}, {}};

static void InitDefaultsGameLandLordsBegins_landLords_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameLandLordsBegins_default_instance_;
    new (ptr) ::go::GameLandLordsBegins();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameLandLordsBegins::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLandLordsBegins_landLords_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLandLordsBegins_landLords_2eproto}, {}};

static void InitDefaultsGameLandLordsOutcard_landLords_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameLandLordsOutcard_default_instance_;
    new (ptr) ::go::GameLandLordsOutcard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameLandLordsOutcard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLandLordsOutcard_landLords_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLandLordsOutcard_landLords_2eproto}, {}};

static void InitDefaultsGameLandLordsOperate_landLords_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameLandLordsOperate_default_instance_;
    new (ptr) ::go::GameLandLordsOperate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameLandLordsOperate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLandLordsOperate_landLords_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLandLordsOperate_landLords_2eproto}, {}};

static void InitDefaultsGameLandLordsAward_landLords_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameLandLordsAward_default_instance_;
    new (ptr) ::go::GameLandLordsAward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameLandLordsAward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLandLordsAward_landLords_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLandLordsAward_landLords_2eproto}, {}};

static void InitDefaultsGameLandLordsCheckout_landLords_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameLandLordsCheckout_default_instance_;
    new (ptr) ::go::GameLandLordsCheckout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameLandLordsCheckout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameLandLordsCheckout_landLords_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameLandLordsCheckout_landLords_2eproto}, {
      &scc_info_GameLandLordsAward_landLords_2eproto.base,}};

void InitDefaults_landLords_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameLandLordsEnter_landLords_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLandLordsPlayer_landLords_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLandLordsBegins_landLords_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLandLordsOutcard_landLords_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLandLordsOperate_landLords_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLandLordsAward_landLords_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLandLordsCheckout_landLords_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_landLords_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_landLords_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_landLords_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_landLords_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsEnter, userid_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsEnter, timestamp_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsEnter, players_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsEnter, freetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsPlayer, userid_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsPlayer, site_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsPlayer, cards_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsPlayer, isbanker_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsBegins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsBegins, cardsbottom_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsBegins, cardshand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsOutcard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsOutcard, site_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsOutcard, cards_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsOutcard, hints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsOperate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsOperate, code_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsOperate, cards_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsOperate, hints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsAward, site_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsAward, codes_),
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsAward, getgold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsCheckout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameLandLordsCheckout, players_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::go::GameLandLordsEnter)},
  { 9, -1, sizeof(::go::GameLandLordsPlayer)},
  { 18, -1, sizeof(::go::GameLandLordsBegins)},
  { 25, -1, sizeof(::go::GameLandLordsOutcard)},
  { 33, -1, sizeof(::go::GameLandLordsOperate)},
  { 41, -1, sizeof(::go::GameLandLordsAward)},
  { 49, -1, sizeof(::go::GameLandLordsCheckout)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameLandLordsEnter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameLandLordsPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameLandLordsBegins_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameLandLordsOutcard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameLandLordsOperate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameLandLordsAward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameLandLordsCheckout_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_landLords_2eproto = {
  {}, AddDescriptors_landLords_2eproto, "landLords.proto", schemas,
  file_default_instances, TableStruct_landLords_2eproto::offsets,
  file_level_metadata_landLords_2eproto, 7, file_level_enum_descriptors_landLords_2eproto, file_level_service_descriptors_landLords_2eproto,
};

const char descriptor_table_protodef_landLords_2eproto[] =
  "\n\017landLords.proto\022\002go\032\016gamecomm.proto\"h\n"
  "\022GameLandLordsEnter\022\016\n\006UserID\030\001 \001(\004\022\021\n\tT"
  "imeStamp\030\002 \001(\003\022\035\n\007Players\030\003 \001(\0132\014.go.Use"
  "rList\022\020\n\010FreeTime\030\004 \001(\r\"T\n\023GameLandLords"
  "Player\022\016\n\006UserID\030\001 \001(\004\022\014\n\004Site\030\002 \001(\r\022\r\n\005"
  "Cards\030\003 \001(\014\022\020\n\010IsBanker\030\004 \001(\010\"=\n\023GameLan"
  "dLordsBegins\022\023\n\013CardsBottom\030\001 \001(\014\022\021\n\tCar"
  "dsHand\030\002 \001(\014\"B\n\024GameLandLordsOutcard\022\014\n\004"
  "Site\030\001 \001(\r\022\r\n\005Cards\030\002 \001(\014\022\r\n\005Hints\030\003 \001(\t"
  "\"B\n\024GameLandLordsOperate\022\014\n\004Code\030\001 \001(\005\022\r"
  "\n\005Cards\030\002 \001(\014\022\r\n\005Hints\030\003 \001(\t\"B\n\022GameLand"
  "LordsAward\022\014\n\004Site\030\001 \001(\r\022\r\n\005Codes\030\002 \001(\014\022"
  "\017\n\007GetGold\030\003 \001(\003\"@\n\025GameLandLordsCheckou"
  "t\022\'\n\007players\030\001 \003(\0132\026.go.GameLandLordsAwa"
  "rdb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_landLords_2eproto = {
  false, InitDefaults_landLords_2eproto, 
  descriptor_table_protodef_landLords_2eproto,
  "landLords.proto", &assign_descriptors_table_landLords_2eproto, 570,
};

void AddDescriptors_landLords_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_gamecomm_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_landLords_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_landLords_2eproto = []() { AddDescriptors_landLords_2eproto(); return true; }();
namespace go {

// ===================================================================

void GameLandLordsEnter::InitAsDefaultInstance() {
  ::go::_GameLandLordsEnter_default_instance_._instance.get_mutable()->players_ = const_cast< ::go::UserList*>(
      ::go::UserList::internal_default_instance());
}
class GameLandLordsEnter::HasBitSetters {
 public:
  static const ::go::UserList& players(const GameLandLordsEnter* msg);
};

const ::go::UserList&
GameLandLordsEnter::HasBitSetters::players(const GameLandLordsEnter* msg) {
  return *msg->players_;
}
void GameLandLordsEnter::clear_players() {
  if (GetArenaNoVirtual() == nullptr && players_ != nullptr) {
    delete players_;
  }
  players_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLandLordsEnter::kUserIDFieldNumber;
const int GameLandLordsEnter::kTimeStampFieldNumber;
const int GameLandLordsEnter::kPlayersFieldNumber;
const int GameLandLordsEnter::kFreeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLandLordsEnter::GameLandLordsEnter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameLandLordsEnter)
}
GameLandLordsEnter::GameLandLordsEnter(const GameLandLordsEnter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_players()) {
    players_ = new ::go::UserList(*from.players_);
  } else {
    players_ = nullptr;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&freetime_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(freetime_));
  // @@protoc_insertion_point(copy_constructor:go.GameLandLordsEnter)
}

void GameLandLordsEnter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameLandLordsEnter_landLords_2eproto.base);
  ::memset(&players_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freetime_) -
      reinterpret_cast<char*>(&players_)) + sizeof(freetime_));
}

GameLandLordsEnter::~GameLandLordsEnter() {
  // @@protoc_insertion_point(destructor:go.GameLandLordsEnter)
  SharedDtor();
}

void GameLandLordsEnter::SharedDtor() {
  if (this != internal_default_instance()) delete players_;
}

void GameLandLordsEnter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLandLordsEnter& GameLandLordsEnter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLandLordsEnter_landLords_2eproto.base);
  return *internal_default_instance();
}


void GameLandLordsEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameLandLordsEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && players_ != nullptr) {
    delete players_;
  }
  players_ = nullptr;
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freetime_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(freetime_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLandLordsEnter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLandLordsEnter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_userid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 TimeStamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .go.UserList Players = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::go::UserList::_InternalParse;
        object = msg->mutable_players();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 FreeTime = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_freetime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLandLordsEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameLandLordsEnter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TimeStamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .go.UserList Players = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FreeTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameLandLordsEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameLandLordsEnter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLandLordsEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameLandLordsEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // .go.UserList Players = 3;
  if (this->has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::players(this), output);
  }

  // uint32 FreeTime = 4;
  if (this->freetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->freetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameLandLordsEnter)
}

::google::protobuf::uint8* GameLandLordsEnter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameLandLordsEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // .go.UserList Players = 3;
  if (this->has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::players(this), target);
  }

  // uint32 FreeTime = 4;
  if (this->freetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->freetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameLandLordsEnter)
  return target;
}

size_t GameLandLordsEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameLandLordsEnter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .go.UserList Players = 3;
  if (this->has_players()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *players_);
  }

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // uint32 FreeTime = 4;
  if (this->freetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->freetime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLandLordsEnter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameLandLordsEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLandLordsEnter* source =
      ::google::protobuf::DynamicCastToGenerated<GameLandLordsEnter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameLandLordsEnter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameLandLordsEnter)
    MergeFrom(*source);
  }
}

void GameLandLordsEnter::MergeFrom(const GameLandLordsEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameLandLordsEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_players()) {
    mutable_players()->::go::UserList::MergeFrom(from.players());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.freetime() != 0) {
    set_freetime(from.freetime());
  }
}

void GameLandLordsEnter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameLandLordsEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLandLordsEnter::CopyFrom(const GameLandLordsEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameLandLordsEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLandLordsEnter::IsInitialized() const {
  return true;
}

void GameLandLordsEnter::Swap(GameLandLordsEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLandLordsEnter::InternalSwap(GameLandLordsEnter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(players_, other->players_);
  swap(userid_, other->userid_);
  swap(timestamp_, other->timestamp_);
  swap(freetime_, other->freetime_);
}

::google::protobuf::Metadata GameLandLordsEnter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_landLords_2eproto);
  return ::file_level_metadata_landLords_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLandLordsPlayer::InitAsDefaultInstance() {
}
class GameLandLordsPlayer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLandLordsPlayer::kUserIDFieldNumber;
const int GameLandLordsPlayer::kSiteFieldNumber;
const int GameLandLordsPlayer::kCardsFieldNumber;
const int GameLandLordsPlayer::kIsBankerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLandLordsPlayer::GameLandLordsPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameLandLordsPlayer)
}
GameLandLordsPlayer::GameLandLordsPlayer(const GameLandLordsPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cards().size() > 0) {
    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isbanker_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(isbanker_));
  // @@protoc_insertion_point(copy_constructor:go.GameLandLordsPlayer)
}

void GameLandLordsPlayer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameLandLordsPlayer_landLords_2eproto.base);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isbanker_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(isbanker_));
}

GameLandLordsPlayer::~GameLandLordsPlayer() {
  // @@protoc_insertion_point(destructor:go.GameLandLordsPlayer)
  SharedDtor();
}

void GameLandLordsPlayer::SharedDtor() {
  cards_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameLandLordsPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLandLordsPlayer& GameLandLordsPlayer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLandLordsPlayer_landLords_2eproto.base);
  return *internal_default_instance();
}


void GameLandLordsPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameLandLordsPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isbanker_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(isbanker_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLandLordsPlayer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLandLordsPlayer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_userid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 Site = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_site(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes Cards = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cards();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool IsBanker = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_isbanker(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLandLordsPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameLandLordsPlayer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Site = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsBanker = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbanker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameLandLordsPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameLandLordsPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLandLordsPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameLandLordsPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // uint32 Site = 2;
  if (this->site() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->site(), output);
  }

  // bytes Cards = 3;
  if (this->cards().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cards(), output);
  }

  // bool IsBanker = 4;
  if (this->isbanker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isbanker(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameLandLordsPlayer)
}

::google::protobuf::uint8* GameLandLordsPlayer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameLandLordsPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // uint32 Site = 2;
  if (this->site() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->site(), target);
  }

  // bytes Cards = 3;
  if (this->cards().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cards(), target);
  }

  // bool IsBanker = 4;
  if (this->isbanker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isbanker(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameLandLordsPlayer)
  return target;
}

size_t GameLandLordsPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameLandLordsPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Cards = 3;
  if (this->cards().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cards());
  }

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // uint32 Site = 2;
  if (this->site() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());
  }

  // bool IsBanker = 4;
  if (this->isbanker() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLandLordsPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameLandLordsPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLandLordsPlayer* source =
      ::google::protobuf::DynamicCastToGenerated<GameLandLordsPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameLandLordsPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameLandLordsPlayer)
    MergeFrom(*source);
  }
}

void GameLandLordsPlayer::MergeFrom(const GameLandLordsPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameLandLordsPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cards().size() > 0) {

    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.site() != 0) {
    set_site(from.site());
  }
  if (from.isbanker() != 0) {
    set_isbanker(from.isbanker());
  }
}

void GameLandLordsPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameLandLordsPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLandLordsPlayer::CopyFrom(const GameLandLordsPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameLandLordsPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLandLordsPlayer::IsInitialized() const {
  return true;
}

void GameLandLordsPlayer::Swap(GameLandLordsPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLandLordsPlayer::InternalSwap(GameLandLordsPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cards_.Swap(&other->cards_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(site_, other->site_);
  swap(isbanker_, other->isbanker_);
}

::google::protobuf::Metadata GameLandLordsPlayer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_landLords_2eproto);
  return ::file_level_metadata_landLords_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLandLordsBegins::InitAsDefaultInstance() {
}
class GameLandLordsBegins::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLandLordsBegins::kCardsBottomFieldNumber;
const int GameLandLordsBegins::kCardsHandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLandLordsBegins::GameLandLordsBegins()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameLandLordsBegins)
}
GameLandLordsBegins::GameLandLordsBegins(const GameLandLordsBegins& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cardsbottom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cardsbottom().size() > 0) {
    cardsbottom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardsbottom_);
  }
  cardshand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cardshand().size() > 0) {
    cardshand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardshand_);
  }
  // @@protoc_insertion_point(copy_constructor:go.GameLandLordsBegins)
}

void GameLandLordsBegins::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameLandLordsBegins_landLords_2eproto.base);
  cardsbottom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardshand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameLandLordsBegins::~GameLandLordsBegins() {
  // @@protoc_insertion_point(destructor:go.GameLandLordsBegins)
  SharedDtor();
}

void GameLandLordsBegins::SharedDtor() {
  cardsbottom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardshand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameLandLordsBegins::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLandLordsBegins& GameLandLordsBegins::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLandLordsBegins_landLords_2eproto.base);
  return *internal_default_instance();
}


void GameLandLordsBegins::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameLandLordsBegins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cardsbottom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardshand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLandLordsBegins::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLandLordsBegins*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes CardsBottom = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cardsbottom();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes CardsHand = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cardshand();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLandLordsBegins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameLandLordsBegins)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes CardsBottom = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cardsbottom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes CardsHand = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cardshand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameLandLordsBegins)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameLandLordsBegins)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLandLordsBegins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameLandLordsBegins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes CardsBottom = 1;
  if (this->cardsbottom().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cardsbottom(), output);
  }

  // bytes CardsHand = 2;
  if (this->cardshand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cardshand(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameLandLordsBegins)
}

::google::protobuf::uint8* GameLandLordsBegins::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameLandLordsBegins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes CardsBottom = 1;
  if (this->cardsbottom().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cardsbottom(), target);
  }

  // bytes CardsHand = 2;
  if (this->cardshand().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cardshand(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameLandLordsBegins)
  return target;
}

size_t GameLandLordsBegins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameLandLordsBegins)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes CardsBottom = 1;
  if (this->cardsbottom().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cardsbottom());
  }

  // bytes CardsHand = 2;
  if (this->cardshand().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cardshand());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLandLordsBegins::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameLandLordsBegins)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLandLordsBegins* source =
      ::google::protobuf::DynamicCastToGenerated<GameLandLordsBegins>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameLandLordsBegins)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameLandLordsBegins)
    MergeFrom(*source);
  }
}

void GameLandLordsBegins::MergeFrom(const GameLandLordsBegins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameLandLordsBegins)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cardsbottom().size() > 0) {

    cardsbottom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardsbottom_);
  }
  if (from.cardshand().size() > 0) {

    cardshand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardshand_);
  }
}

void GameLandLordsBegins::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameLandLordsBegins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLandLordsBegins::CopyFrom(const GameLandLordsBegins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameLandLordsBegins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLandLordsBegins::IsInitialized() const {
  return true;
}

void GameLandLordsBegins::Swap(GameLandLordsBegins* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLandLordsBegins::InternalSwap(GameLandLordsBegins* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cardsbottom_.Swap(&other->cardsbottom_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cardshand_.Swap(&other->cardshand_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GameLandLordsBegins::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_landLords_2eproto);
  return ::file_level_metadata_landLords_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLandLordsOutcard::InitAsDefaultInstance() {
}
class GameLandLordsOutcard::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLandLordsOutcard::kSiteFieldNumber;
const int GameLandLordsOutcard::kCardsFieldNumber;
const int GameLandLordsOutcard::kHintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLandLordsOutcard::GameLandLordsOutcard()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameLandLordsOutcard)
}
GameLandLordsOutcard::GameLandLordsOutcard(const GameLandLordsOutcard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cards().size() > 0) {
    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hints().size() > 0) {
    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  site_ = from.site_;
  // @@protoc_insertion_point(copy_constructor:go.GameLandLordsOutcard)
}

void GameLandLordsOutcard::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameLandLordsOutcard_landLords_2eproto.base);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_ = 0u;
}

GameLandLordsOutcard::~GameLandLordsOutcard() {
  // @@protoc_insertion_point(destructor:go.GameLandLordsOutcard)
  SharedDtor();
}

void GameLandLordsOutcard::SharedDtor() {
  cards_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameLandLordsOutcard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLandLordsOutcard& GameLandLordsOutcard::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLandLordsOutcard_landLords_2eproto.base);
  return *internal_default_instance();
}


void GameLandLordsOutcard::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameLandLordsOutcard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLandLordsOutcard::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLandLordsOutcard*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 Site = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_site(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes Cards = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cards();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string Hints = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("go.GameLandLordsOutcard.Hints");
        object = msg->mutable_hints();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLandLordsOutcard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameLandLordsOutcard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 Site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Hints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hints().data(), static_cast<int>(this->hints().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.GameLandLordsOutcard.Hints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameLandLordsOutcard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameLandLordsOutcard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLandLordsOutcard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameLandLordsOutcard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Site = 1;
  if (this->site() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->site(), output);
  }

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cards(), output);
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameLandLordsOutcard.Hints");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hints(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameLandLordsOutcard)
}

::google::protobuf::uint8* GameLandLordsOutcard::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameLandLordsOutcard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Site = 1;
  if (this->site() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->site(), target);
  }

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cards(), target);
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameLandLordsOutcard.Hints");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hints(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameLandLordsOutcard)
  return target;
}

size_t GameLandLordsOutcard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameLandLordsOutcard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cards());
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hints());
  }

  // uint32 Site = 1;
  if (this->site() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLandLordsOutcard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameLandLordsOutcard)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLandLordsOutcard* source =
      ::google::protobuf::DynamicCastToGenerated<GameLandLordsOutcard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameLandLordsOutcard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameLandLordsOutcard)
    MergeFrom(*source);
  }
}

void GameLandLordsOutcard::MergeFrom(const GameLandLordsOutcard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameLandLordsOutcard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cards().size() > 0) {

    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  if (from.hints().size() > 0) {

    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  if (from.site() != 0) {
    set_site(from.site());
  }
}

void GameLandLordsOutcard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameLandLordsOutcard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLandLordsOutcard::CopyFrom(const GameLandLordsOutcard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameLandLordsOutcard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLandLordsOutcard::IsInitialized() const {
  return true;
}

void GameLandLordsOutcard::Swap(GameLandLordsOutcard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLandLordsOutcard::InternalSwap(GameLandLordsOutcard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cards_.Swap(&other->cards_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hints_.Swap(&other->hints_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(site_, other->site_);
}

::google::protobuf::Metadata GameLandLordsOutcard::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_landLords_2eproto);
  return ::file_level_metadata_landLords_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLandLordsOperate::InitAsDefaultInstance() {
}
class GameLandLordsOperate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLandLordsOperate::kCodeFieldNumber;
const int GameLandLordsOperate::kCardsFieldNumber;
const int GameLandLordsOperate::kHintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLandLordsOperate::GameLandLordsOperate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameLandLordsOperate)
}
GameLandLordsOperate::GameLandLordsOperate(const GameLandLordsOperate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cards().size() > 0) {
    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hints().size() > 0) {
    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:go.GameLandLordsOperate)
}

void GameLandLordsOperate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameLandLordsOperate_landLords_2eproto.base);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

GameLandLordsOperate::~GameLandLordsOperate() {
  // @@protoc_insertion_point(destructor:go.GameLandLordsOperate)
  SharedDtor();
}

void GameLandLordsOperate::SharedDtor() {
  cards_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameLandLordsOperate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLandLordsOperate& GameLandLordsOperate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLandLordsOperate_landLords_2eproto.base);
  return *internal_default_instance();
}


void GameLandLordsOperate::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameLandLordsOperate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLandLordsOperate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLandLordsOperate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes Cards = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cards();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string Hints = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("go.GameLandLordsOperate.Hints");
        object = msg->mutable_hints();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLandLordsOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameLandLordsOperate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Hints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hints().data(), static_cast<int>(this->hints().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.GameLandLordsOperate.Hints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameLandLordsOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameLandLordsOperate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLandLordsOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameLandLordsOperate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cards(), output);
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameLandLordsOperate.Hints");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hints(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameLandLordsOperate)
}

::google::protobuf::uint8* GameLandLordsOperate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameLandLordsOperate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cards(), target);
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameLandLordsOperate.Hints");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hints(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameLandLordsOperate)
  return target;
}

size_t GameLandLordsOperate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameLandLordsOperate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cards());
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hints());
  }

  // int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLandLordsOperate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameLandLordsOperate)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLandLordsOperate* source =
      ::google::protobuf::DynamicCastToGenerated<GameLandLordsOperate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameLandLordsOperate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameLandLordsOperate)
    MergeFrom(*source);
  }
}

void GameLandLordsOperate::MergeFrom(const GameLandLordsOperate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameLandLordsOperate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cards().size() > 0) {

    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  if (from.hints().size() > 0) {

    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void GameLandLordsOperate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameLandLordsOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLandLordsOperate::CopyFrom(const GameLandLordsOperate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameLandLordsOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLandLordsOperate::IsInitialized() const {
  return true;
}

void GameLandLordsOperate::Swap(GameLandLordsOperate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLandLordsOperate::InternalSwap(GameLandLordsOperate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cards_.Swap(&other->cards_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hints_.Swap(&other->hints_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::google::protobuf::Metadata GameLandLordsOperate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_landLords_2eproto);
  return ::file_level_metadata_landLords_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLandLordsAward::InitAsDefaultInstance() {
}
class GameLandLordsAward::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLandLordsAward::kSiteFieldNumber;
const int GameLandLordsAward::kCodesFieldNumber;
const int GameLandLordsAward::kGetGoldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLandLordsAward::GameLandLordsAward()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameLandLordsAward)
}
GameLandLordsAward::GameLandLordsAward(const GameLandLordsAward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  codes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.codes().size() > 0) {
    codes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codes_);
  }
  ::memcpy(&getgold_, &from.getgold_,
    static_cast<size_t>(reinterpret_cast<char*>(&site_) -
    reinterpret_cast<char*>(&getgold_)) + sizeof(site_));
  // @@protoc_insertion_point(copy_constructor:go.GameLandLordsAward)
}

void GameLandLordsAward::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameLandLordsAward_landLords_2eproto.base);
  codes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&getgold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&site_) -
      reinterpret_cast<char*>(&getgold_)) + sizeof(site_));
}

GameLandLordsAward::~GameLandLordsAward() {
  // @@protoc_insertion_point(destructor:go.GameLandLordsAward)
  SharedDtor();
}

void GameLandLordsAward::SharedDtor() {
  codes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameLandLordsAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLandLordsAward& GameLandLordsAward::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLandLordsAward_landLords_2eproto.base);
  return *internal_default_instance();
}


void GameLandLordsAward::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameLandLordsAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&getgold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&site_) -
      reinterpret_cast<char*>(&getgold_)) + sizeof(site_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLandLordsAward::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLandLordsAward*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 Site = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_site(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes Codes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_codes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 GetGold = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_getgold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLandLordsAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameLandLordsAward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 Site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Codes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_codes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 GetGold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &getgold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameLandLordsAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameLandLordsAward)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLandLordsAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameLandLordsAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Site = 1;
  if (this->site() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->site(), output);
  }

  // bytes Codes = 2;
  if (this->codes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->codes(), output);
  }

  // int64 GetGold = 3;
  if (this->getgold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->getgold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameLandLordsAward)
}

::google::protobuf::uint8* GameLandLordsAward::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameLandLordsAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Site = 1;
  if (this->site() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->site(), target);
  }

  // bytes Codes = 2;
  if (this->codes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->codes(), target);
  }

  // int64 GetGold = 3;
  if (this->getgold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->getgold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameLandLordsAward)
  return target;
}

size_t GameLandLordsAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameLandLordsAward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Codes = 2;
  if (this->codes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->codes());
  }

  // int64 GetGold = 3;
  if (this->getgold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->getgold());
  }

  // uint32 Site = 1;
  if (this->site() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLandLordsAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameLandLordsAward)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLandLordsAward* source =
      ::google::protobuf::DynamicCastToGenerated<GameLandLordsAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameLandLordsAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameLandLordsAward)
    MergeFrom(*source);
  }
}

void GameLandLordsAward::MergeFrom(const GameLandLordsAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameLandLordsAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.codes().size() > 0) {

    codes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codes_);
  }
  if (from.getgold() != 0) {
    set_getgold(from.getgold());
  }
  if (from.site() != 0) {
    set_site(from.site());
  }
}

void GameLandLordsAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameLandLordsAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLandLordsAward::CopyFrom(const GameLandLordsAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameLandLordsAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLandLordsAward::IsInitialized() const {
  return true;
}

void GameLandLordsAward::Swap(GameLandLordsAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLandLordsAward::InternalSwap(GameLandLordsAward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  codes_.Swap(&other->codes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(getgold_, other->getgold_);
  swap(site_, other->site_);
}

::google::protobuf::Metadata GameLandLordsAward::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_landLords_2eproto);
  return ::file_level_metadata_landLords_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLandLordsCheckout::InitAsDefaultInstance() {
}
class GameLandLordsCheckout::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLandLordsCheckout::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLandLordsCheckout::GameLandLordsCheckout()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameLandLordsCheckout)
}
GameLandLordsCheckout::GameLandLordsCheckout(const GameLandLordsCheckout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:go.GameLandLordsCheckout)
}

void GameLandLordsCheckout::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameLandLordsCheckout_landLords_2eproto.base);
}

GameLandLordsCheckout::~GameLandLordsCheckout() {
  // @@protoc_insertion_point(destructor:go.GameLandLordsCheckout)
  SharedDtor();
}

void GameLandLordsCheckout::SharedDtor() {
}

void GameLandLordsCheckout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLandLordsCheckout& GameLandLordsCheckout::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLandLordsCheckout_landLords_2eproto.base);
  return *internal_default_instance();
}


void GameLandLordsCheckout::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameLandLordsCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLandLordsCheckout::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLandLordsCheckout*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .go.GameLandLordsAward players = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::go::GameLandLordsAward::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLandLordsCheckout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameLandLordsCheckout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .go.GameLandLordsAward players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameLandLordsCheckout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameLandLordsCheckout)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLandLordsCheckout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameLandLordsCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .go.GameLandLordsAward players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameLandLordsCheckout)
}

::google::protobuf::uint8* GameLandLordsCheckout::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameLandLordsCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .go.GameLandLordsAward players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameLandLordsCheckout)
  return target;
}

size_t GameLandLordsCheckout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameLandLordsCheckout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .go.GameLandLordsAward players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLandLordsCheckout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameLandLordsCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLandLordsCheckout* source =
      ::google::protobuf::DynamicCastToGenerated<GameLandLordsCheckout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameLandLordsCheckout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameLandLordsCheckout)
    MergeFrom(*source);
  }
}

void GameLandLordsCheckout::MergeFrom(const GameLandLordsCheckout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameLandLordsCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void GameLandLordsCheckout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameLandLordsCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLandLordsCheckout::CopyFrom(const GameLandLordsCheckout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameLandLordsCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLandLordsCheckout::IsInitialized() const {
  return true;
}

void GameLandLordsCheckout::Swap(GameLandLordsCheckout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLandLordsCheckout::InternalSwap(GameLandLordsCheckout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
}

::google::protobuf::Metadata GameLandLordsCheckout::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_landLords_2eproto);
  return ::file_level_metadata_landLords_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace go
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::go::GameLandLordsEnter* Arena::CreateMaybeMessage< ::go::GameLandLordsEnter >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameLandLordsEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameLandLordsPlayer* Arena::CreateMaybeMessage< ::go::GameLandLordsPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameLandLordsPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameLandLordsBegins* Arena::CreateMaybeMessage< ::go::GameLandLordsBegins >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameLandLordsBegins >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameLandLordsOutcard* Arena::CreateMaybeMessage< ::go::GameLandLordsOutcard >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameLandLordsOutcard >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameLandLordsOperate* Arena::CreateMaybeMessage< ::go::GameLandLordsOperate >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameLandLordsOperate >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameLandLordsAward* Arena::CreateMaybeMessage< ::go::GameLandLordsAward >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameLandLordsAward >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameLandLordsCheckout* Arena::CreateMaybeMessage< ::go::GameLandLordsCheckout >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameLandLordsCheckout >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
