// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: landLords.proto

#ifndef PROTOBUF_INCLUDED_landLords_2eproto
#define PROTOBUF_INCLUDED_landLords_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gamecomm.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_landLords_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_landLords_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_landLords_2eproto();
namespace go {
class GameLandLordsAward;
class GameLandLordsAwardDefaultTypeInternal;
extern GameLandLordsAwardDefaultTypeInternal _GameLandLordsAward_default_instance_;
class GameLandLordsBegins;
class GameLandLordsBeginsDefaultTypeInternal;
extern GameLandLordsBeginsDefaultTypeInternal _GameLandLordsBegins_default_instance_;
class GameLandLordsCheckout;
class GameLandLordsCheckoutDefaultTypeInternal;
extern GameLandLordsCheckoutDefaultTypeInternal _GameLandLordsCheckout_default_instance_;
class GameLandLordsEnter;
class GameLandLordsEnterDefaultTypeInternal;
extern GameLandLordsEnterDefaultTypeInternal _GameLandLordsEnter_default_instance_;
class GameLandLordsOperate;
class GameLandLordsOperateDefaultTypeInternal;
extern GameLandLordsOperateDefaultTypeInternal _GameLandLordsOperate_default_instance_;
class GameLandLordsOutcard;
class GameLandLordsOutcardDefaultTypeInternal;
extern GameLandLordsOutcardDefaultTypeInternal _GameLandLordsOutcard_default_instance_;
class GameLandLordsPlayer;
class GameLandLordsPlayerDefaultTypeInternal;
extern GameLandLordsPlayerDefaultTypeInternal _GameLandLordsPlayer_default_instance_;
}  // namespace go
namespace google {
namespace protobuf {
template<> ::go::GameLandLordsAward* Arena::CreateMaybeMessage<::go::GameLandLordsAward>(Arena*);
template<> ::go::GameLandLordsBegins* Arena::CreateMaybeMessage<::go::GameLandLordsBegins>(Arena*);
template<> ::go::GameLandLordsCheckout* Arena::CreateMaybeMessage<::go::GameLandLordsCheckout>(Arena*);
template<> ::go::GameLandLordsEnter* Arena::CreateMaybeMessage<::go::GameLandLordsEnter>(Arena*);
template<> ::go::GameLandLordsOperate* Arena::CreateMaybeMessage<::go::GameLandLordsOperate>(Arena*);
template<> ::go::GameLandLordsOutcard* Arena::CreateMaybeMessage<::go::GameLandLordsOutcard>(Arena*);
template<> ::go::GameLandLordsPlayer* Arena::CreateMaybeMessage<::go::GameLandLordsPlayer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace go {

// ===================================================================

class GameLandLordsEnter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameLandLordsEnter) */ {
 public:
  GameLandLordsEnter();
  virtual ~GameLandLordsEnter();

  GameLandLordsEnter(const GameLandLordsEnter& from);

  inline GameLandLordsEnter& operator=(const GameLandLordsEnter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLandLordsEnter(GameLandLordsEnter&& from) noexcept
    : GameLandLordsEnter() {
    *this = ::std::move(from);
  }

  inline GameLandLordsEnter& operator=(GameLandLordsEnter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLandLordsEnter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLandLordsEnter* internal_default_instance() {
    return reinterpret_cast<const GameLandLordsEnter*>(
               &_GameLandLordsEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameLandLordsEnter* other);
  friend void swap(GameLandLordsEnter& a, GameLandLordsEnter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLandLordsEnter* New() const final {
    return CreateMaybeMessage<GameLandLordsEnter>(nullptr);
  }

  GameLandLordsEnter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLandLordsEnter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLandLordsEnter& from);
  void MergeFrom(const GameLandLordsEnter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLandLordsEnter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .go.UserList Players = 3;
  bool has_players() const;
  void clear_players();
  static const int kPlayersFieldNumber = 3;
  const ::go::UserList& players() const;
  ::go::UserList* release_players();
  ::go::UserList* mutable_players();
  void set_allocated_players(::go::UserList* players);

  // uint64 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // int64 TimeStamp = 2;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // uint32 FreeTime = 4;
  void clear_freetime();
  static const int kFreeTimeFieldNumber = 4;
  ::google::protobuf::uint32 freetime() const;
  void set_freetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:go.GameLandLordsEnter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::go::UserList* players_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint32 freetime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landLords_2eproto;
};
// -------------------------------------------------------------------

class GameLandLordsPlayer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameLandLordsPlayer) */ {
 public:
  GameLandLordsPlayer();
  virtual ~GameLandLordsPlayer();

  GameLandLordsPlayer(const GameLandLordsPlayer& from);

  inline GameLandLordsPlayer& operator=(const GameLandLordsPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLandLordsPlayer(GameLandLordsPlayer&& from) noexcept
    : GameLandLordsPlayer() {
    *this = ::std::move(from);
  }

  inline GameLandLordsPlayer& operator=(GameLandLordsPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLandLordsPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLandLordsPlayer* internal_default_instance() {
    return reinterpret_cast<const GameLandLordsPlayer*>(
               &_GameLandLordsPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameLandLordsPlayer* other);
  friend void swap(GameLandLordsPlayer& a, GameLandLordsPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLandLordsPlayer* New() const final {
    return CreateMaybeMessage<GameLandLordsPlayer>(nullptr);
  }

  GameLandLordsPlayer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLandLordsPlayer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLandLordsPlayer& from);
  void MergeFrom(const GameLandLordsPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLandLordsPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Cards = 3;
  void clear_cards();
  static const int kCardsFieldNumber = 3;
  const ::std::string& cards() const;
  void set_cards(const ::std::string& value);
  #if LANG_CXX11
  void set_cards(::std::string&& value);
  #endif
  void set_cards(const char* value);
  void set_cards(const void* value, size_t size);
  ::std::string* mutable_cards();
  ::std::string* release_cards();
  void set_allocated_cards(::std::string* cards);

  // uint64 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // uint32 Site = 2;
  void clear_site();
  static const int kSiteFieldNumber = 2;
  ::google::protobuf::uint32 site() const;
  void set_site(::google::protobuf::uint32 value);

  // bool IsBanker = 4;
  void clear_isbanker();
  static const int kIsBankerFieldNumber = 4;
  bool isbanker() const;
  void set_isbanker(bool value);

  // @@protoc_insertion_point(class_scope:go.GameLandLordsPlayer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cards_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 site_;
  bool isbanker_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landLords_2eproto;
};
// -------------------------------------------------------------------

class GameLandLordsBegins final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameLandLordsBegins) */ {
 public:
  GameLandLordsBegins();
  virtual ~GameLandLordsBegins();

  GameLandLordsBegins(const GameLandLordsBegins& from);

  inline GameLandLordsBegins& operator=(const GameLandLordsBegins& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLandLordsBegins(GameLandLordsBegins&& from) noexcept
    : GameLandLordsBegins() {
    *this = ::std::move(from);
  }

  inline GameLandLordsBegins& operator=(GameLandLordsBegins&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLandLordsBegins& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLandLordsBegins* internal_default_instance() {
    return reinterpret_cast<const GameLandLordsBegins*>(
               &_GameLandLordsBegins_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GameLandLordsBegins* other);
  friend void swap(GameLandLordsBegins& a, GameLandLordsBegins& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLandLordsBegins* New() const final {
    return CreateMaybeMessage<GameLandLordsBegins>(nullptr);
  }

  GameLandLordsBegins* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLandLordsBegins>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLandLordsBegins& from);
  void MergeFrom(const GameLandLordsBegins& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLandLordsBegins* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes CardsBottom = 1;
  void clear_cardsbottom();
  static const int kCardsBottomFieldNumber = 1;
  const ::std::string& cardsbottom() const;
  void set_cardsbottom(const ::std::string& value);
  #if LANG_CXX11
  void set_cardsbottom(::std::string&& value);
  #endif
  void set_cardsbottom(const char* value);
  void set_cardsbottom(const void* value, size_t size);
  ::std::string* mutable_cardsbottom();
  ::std::string* release_cardsbottom();
  void set_allocated_cardsbottom(::std::string* cardsbottom);

  // bytes CardsHand = 2;
  void clear_cardshand();
  static const int kCardsHandFieldNumber = 2;
  const ::std::string& cardshand() const;
  void set_cardshand(const ::std::string& value);
  #if LANG_CXX11
  void set_cardshand(::std::string&& value);
  #endif
  void set_cardshand(const char* value);
  void set_cardshand(const void* value, size_t size);
  ::std::string* mutable_cardshand();
  ::std::string* release_cardshand();
  void set_allocated_cardshand(::std::string* cardshand);

  // @@protoc_insertion_point(class_scope:go.GameLandLordsBegins)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cardsbottom_;
  ::google::protobuf::internal::ArenaStringPtr cardshand_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landLords_2eproto;
};
// -------------------------------------------------------------------

class GameLandLordsOutcard final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameLandLordsOutcard) */ {
 public:
  GameLandLordsOutcard();
  virtual ~GameLandLordsOutcard();

  GameLandLordsOutcard(const GameLandLordsOutcard& from);

  inline GameLandLordsOutcard& operator=(const GameLandLordsOutcard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLandLordsOutcard(GameLandLordsOutcard&& from) noexcept
    : GameLandLordsOutcard() {
    *this = ::std::move(from);
  }

  inline GameLandLordsOutcard& operator=(GameLandLordsOutcard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLandLordsOutcard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLandLordsOutcard* internal_default_instance() {
    return reinterpret_cast<const GameLandLordsOutcard*>(
               &_GameLandLordsOutcard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GameLandLordsOutcard* other);
  friend void swap(GameLandLordsOutcard& a, GameLandLordsOutcard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLandLordsOutcard* New() const final {
    return CreateMaybeMessage<GameLandLordsOutcard>(nullptr);
  }

  GameLandLordsOutcard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLandLordsOutcard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLandLordsOutcard& from);
  void MergeFrom(const GameLandLordsOutcard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLandLordsOutcard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Cards = 2;
  void clear_cards();
  static const int kCardsFieldNumber = 2;
  const ::std::string& cards() const;
  void set_cards(const ::std::string& value);
  #if LANG_CXX11
  void set_cards(::std::string&& value);
  #endif
  void set_cards(const char* value);
  void set_cards(const void* value, size_t size);
  ::std::string* mutable_cards();
  ::std::string* release_cards();
  void set_allocated_cards(::std::string* cards);

  // string Hints = 3;
  void clear_hints();
  static const int kHintsFieldNumber = 3;
  const ::std::string& hints() const;
  void set_hints(const ::std::string& value);
  #if LANG_CXX11
  void set_hints(::std::string&& value);
  #endif
  void set_hints(const char* value);
  void set_hints(const char* value, size_t size);
  ::std::string* mutable_hints();
  ::std::string* release_hints();
  void set_allocated_hints(::std::string* hints);

  // uint32 Site = 1;
  void clear_site();
  static const int kSiteFieldNumber = 1;
  ::google::protobuf::uint32 site() const;
  void set_site(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:go.GameLandLordsOutcard)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cards_;
  ::google::protobuf::internal::ArenaStringPtr hints_;
  ::google::protobuf::uint32 site_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landLords_2eproto;
};
// -------------------------------------------------------------------

class GameLandLordsOperate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameLandLordsOperate) */ {
 public:
  GameLandLordsOperate();
  virtual ~GameLandLordsOperate();

  GameLandLordsOperate(const GameLandLordsOperate& from);

  inline GameLandLordsOperate& operator=(const GameLandLordsOperate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLandLordsOperate(GameLandLordsOperate&& from) noexcept
    : GameLandLordsOperate() {
    *this = ::std::move(from);
  }

  inline GameLandLordsOperate& operator=(GameLandLordsOperate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLandLordsOperate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLandLordsOperate* internal_default_instance() {
    return reinterpret_cast<const GameLandLordsOperate*>(
               &_GameLandLordsOperate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GameLandLordsOperate* other);
  friend void swap(GameLandLordsOperate& a, GameLandLordsOperate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLandLordsOperate* New() const final {
    return CreateMaybeMessage<GameLandLordsOperate>(nullptr);
  }

  GameLandLordsOperate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLandLordsOperate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLandLordsOperate& from);
  void MergeFrom(const GameLandLordsOperate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLandLordsOperate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Cards = 2;
  void clear_cards();
  static const int kCardsFieldNumber = 2;
  const ::std::string& cards() const;
  void set_cards(const ::std::string& value);
  #if LANG_CXX11
  void set_cards(::std::string&& value);
  #endif
  void set_cards(const char* value);
  void set_cards(const void* value, size_t size);
  ::std::string* mutable_cards();
  ::std::string* release_cards();
  void set_allocated_cards(::std::string* cards);

  // string Hints = 3;
  void clear_hints();
  static const int kHintsFieldNumber = 3;
  const ::std::string& hints() const;
  void set_hints(const ::std::string& value);
  #if LANG_CXX11
  void set_hints(::std::string&& value);
  #endif
  void set_hints(const char* value);
  void set_hints(const char* value, size_t size);
  ::std::string* mutable_hints();
  ::std::string* release_hints();
  void set_allocated_hints(::std::string* hints);

  // int32 Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:go.GameLandLordsOperate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cards_;
  ::google::protobuf::internal::ArenaStringPtr hints_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landLords_2eproto;
};
// -------------------------------------------------------------------

class GameLandLordsAward final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameLandLordsAward) */ {
 public:
  GameLandLordsAward();
  virtual ~GameLandLordsAward();

  GameLandLordsAward(const GameLandLordsAward& from);

  inline GameLandLordsAward& operator=(const GameLandLordsAward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLandLordsAward(GameLandLordsAward&& from) noexcept
    : GameLandLordsAward() {
    *this = ::std::move(from);
  }

  inline GameLandLordsAward& operator=(GameLandLordsAward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLandLordsAward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLandLordsAward* internal_default_instance() {
    return reinterpret_cast<const GameLandLordsAward*>(
               &_GameLandLordsAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GameLandLordsAward* other);
  friend void swap(GameLandLordsAward& a, GameLandLordsAward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLandLordsAward* New() const final {
    return CreateMaybeMessage<GameLandLordsAward>(nullptr);
  }

  GameLandLordsAward* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLandLordsAward>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLandLordsAward& from);
  void MergeFrom(const GameLandLordsAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLandLordsAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Codes = 2;
  void clear_codes();
  static const int kCodesFieldNumber = 2;
  const ::std::string& codes() const;
  void set_codes(const ::std::string& value);
  #if LANG_CXX11
  void set_codes(::std::string&& value);
  #endif
  void set_codes(const char* value);
  void set_codes(const void* value, size_t size);
  ::std::string* mutable_codes();
  ::std::string* release_codes();
  void set_allocated_codes(::std::string* codes);

  // int64 GetGold = 3;
  void clear_getgold();
  static const int kGetGoldFieldNumber = 3;
  ::google::protobuf::int64 getgold() const;
  void set_getgold(::google::protobuf::int64 value);

  // uint32 Site = 1;
  void clear_site();
  static const int kSiteFieldNumber = 1;
  ::google::protobuf::uint32 site() const;
  void set_site(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:go.GameLandLordsAward)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr codes_;
  ::google::protobuf::int64 getgold_;
  ::google::protobuf::uint32 site_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landLords_2eproto;
};
// -------------------------------------------------------------------

class GameLandLordsCheckout final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameLandLordsCheckout) */ {
 public:
  GameLandLordsCheckout();
  virtual ~GameLandLordsCheckout();

  GameLandLordsCheckout(const GameLandLordsCheckout& from);

  inline GameLandLordsCheckout& operator=(const GameLandLordsCheckout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLandLordsCheckout(GameLandLordsCheckout&& from) noexcept
    : GameLandLordsCheckout() {
    *this = ::std::move(from);
  }

  inline GameLandLordsCheckout& operator=(GameLandLordsCheckout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLandLordsCheckout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLandLordsCheckout* internal_default_instance() {
    return reinterpret_cast<const GameLandLordsCheckout*>(
               &_GameLandLordsCheckout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GameLandLordsCheckout* other);
  friend void swap(GameLandLordsCheckout& a, GameLandLordsCheckout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLandLordsCheckout* New() const final {
    return CreateMaybeMessage<GameLandLordsCheckout>(nullptr);
  }

  GameLandLordsCheckout* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLandLordsCheckout>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLandLordsCheckout& from);
  void MergeFrom(const GameLandLordsCheckout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLandLordsCheckout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .go.GameLandLordsAward players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  ::go::GameLandLordsAward* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::go::GameLandLordsAward >*
      mutable_players();
  const ::go::GameLandLordsAward& players(int index) const;
  ::go::GameLandLordsAward* add_players();
  const ::google::protobuf::RepeatedPtrField< ::go::GameLandLordsAward >&
      players() const;

  // @@protoc_insertion_point(class_scope:go.GameLandLordsCheckout)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::go::GameLandLordsAward > players_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landLords_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameLandLordsEnter

// uint64 UserID = 1;
inline void GameLandLordsEnter::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameLandLordsEnter::userid() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsEnter.UserID)
  return userid_;
}
inline void GameLandLordsEnter::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:go.GameLandLordsEnter.UserID)
}

// int64 TimeStamp = 2;
inline void GameLandLordsEnter::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameLandLordsEnter::timestamp() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsEnter.TimeStamp)
  return timestamp_;
}
inline void GameLandLordsEnter::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:go.GameLandLordsEnter.TimeStamp)
}

// .go.UserList Players = 3;
inline bool GameLandLordsEnter::has_players() const {
  return this != internal_default_instance() && players_ != nullptr;
}
inline const ::go::UserList& GameLandLordsEnter::players() const {
  const ::go::UserList* p = players_;
  // @@protoc_insertion_point(field_get:go.GameLandLordsEnter.Players)
  return p != nullptr ? *p : *reinterpret_cast<const ::go::UserList*>(
      &::go::_UserList_default_instance_);
}
inline ::go::UserList* GameLandLordsEnter::release_players() {
  // @@protoc_insertion_point(field_release:go.GameLandLordsEnter.Players)
  
  ::go::UserList* temp = players_;
  players_ = nullptr;
  return temp;
}
inline ::go::UserList* GameLandLordsEnter::mutable_players() {
  
  if (players_ == nullptr) {
    auto* p = CreateMaybeMessage<::go::UserList>(GetArenaNoVirtual());
    players_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.GameLandLordsEnter.Players)
  return players_;
}
inline void GameLandLordsEnter::set_allocated_players(::go::UserList* players) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(players_);
  }
  if (players) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      players = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, players, submessage_arena);
    }
    
  } else {
    
  }
  players_ = players;
  // @@protoc_insertion_point(field_set_allocated:go.GameLandLordsEnter.Players)
}

// uint32 FreeTime = 4;
inline void GameLandLordsEnter::clear_freetime() {
  freetime_ = 0u;
}
inline ::google::protobuf::uint32 GameLandLordsEnter::freetime() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsEnter.FreeTime)
  return freetime_;
}
inline void GameLandLordsEnter::set_freetime(::google::protobuf::uint32 value) {
  
  freetime_ = value;
  // @@protoc_insertion_point(field_set:go.GameLandLordsEnter.FreeTime)
}

// -------------------------------------------------------------------

// GameLandLordsPlayer

// uint64 UserID = 1;
inline void GameLandLordsPlayer::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameLandLordsPlayer::userid() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsPlayer.UserID)
  return userid_;
}
inline void GameLandLordsPlayer::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:go.GameLandLordsPlayer.UserID)
}

// uint32 Site = 2;
inline void GameLandLordsPlayer::clear_site() {
  site_ = 0u;
}
inline ::google::protobuf::uint32 GameLandLordsPlayer::site() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsPlayer.Site)
  return site_;
}
inline void GameLandLordsPlayer::set_site(::google::protobuf::uint32 value) {
  
  site_ = value;
  // @@protoc_insertion_point(field_set:go.GameLandLordsPlayer.Site)
}

// bytes Cards = 3;
inline void GameLandLordsPlayer::clear_cards() {
  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLandLordsPlayer::cards() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsPlayer.Cards)
  return cards_.GetNoArena();
}
inline void GameLandLordsPlayer::set_cards(const ::std::string& value) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameLandLordsPlayer.Cards)
}
#if LANG_CXX11
inline void GameLandLordsPlayer::set_cards(::std::string&& value) {
  
  cards_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameLandLordsPlayer.Cards)
}
#endif
inline void GameLandLordsPlayer::set_cards(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameLandLordsPlayer.Cards)
}
inline void GameLandLordsPlayer::set_cards(const void* value, size_t size) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameLandLordsPlayer.Cards)
}
inline ::std::string* GameLandLordsPlayer::mutable_cards() {
  
  // @@protoc_insertion_point(field_mutable:go.GameLandLordsPlayer.Cards)
  return cards_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLandLordsPlayer::release_cards() {
  // @@protoc_insertion_point(field_release:go.GameLandLordsPlayer.Cards)
  
  return cards_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLandLordsPlayer::set_allocated_cards(::std::string* cards) {
  if (cards != nullptr) {
    
  } else {
    
  }
  cards_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cards);
  // @@protoc_insertion_point(field_set_allocated:go.GameLandLordsPlayer.Cards)
}

// bool IsBanker = 4;
inline void GameLandLordsPlayer::clear_isbanker() {
  isbanker_ = false;
}
inline bool GameLandLordsPlayer::isbanker() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsPlayer.IsBanker)
  return isbanker_;
}
inline void GameLandLordsPlayer::set_isbanker(bool value) {
  
  isbanker_ = value;
  // @@protoc_insertion_point(field_set:go.GameLandLordsPlayer.IsBanker)
}

// -------------------------------------------------------------------

// GameLandLordsBegins

// bytes CardsBottom = 1;
inline void GameLandLordsBegins::clear_cardsbottom() {
  cardsbottom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLandLordsBegins::cardsbottom() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsBegins.CardsBottom)
  return cardsbottom_.GetNoArena();
}
inline void GameLandLordsBegins::set_cardsbottom(const ::std::string& value) {
  
  cardsbottom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameLandLordsBegins.CardsBottom)
}
#if LANG_CXX11
inline void GameLandLordsBegins::set_cardsbottom(::std::string&& value) {
  
  cardsbottom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameLandLordsBegins.CardsBottom)
}
#endif
inline void GameLandLordsBegins::set_cardsbottom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cardsbottom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameLandLordsBegins.CardsBottom)
}
inline void GameLandLordsBegins::set_cardsbottom(const void* value, size_t size) {
  
  cardsbottom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameLandLordsBegins.CardsBottom)
}
inline ::std::string* GameLandLordsBegins::mutable_cardsbottom() {
  
  // @@protoc_insertion_point(field_mutable:go.GameLandLordsBegins.CardsBottom)
  return cardsbottom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLandLordsBegins::release_cardsbottom() {
  // @@protoc_insertion_point(field_release:go.GameLandLordsBegins.CardsBottom)
  
  return cardsbottom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLandLordsBegins::set_allocated_cardsbottom(::std::string* cardsbottom) {
  if (cardsbottom != nullptr) {
    
  } else {
    
  }
  cardsbottom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardsbottom);
  // @@protoc_insertion_point(field_set_allocated:go.GameLandLordsBegins.CardsBottom)
}

// bytes CardsHand = 2;
inline void GameLandLordsBegins::clear_cardshand() {
  cardshand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLandLordsBegins::cardshand() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsBegins.CardsHand)
  return cardshand_.GetNoArena();
}
inline void GameLandLordsBegins::set_cardshand(const ::std::string& value) {
  
  cardshand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameLandLordsBegins.CardsHand)
}
#if LANG_CXX11
inline void GameLandLordsBegins::set_cardshand(::std::string&& value) {
  
  cardshand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameLandLordsBegins.CardsHand)
}
#endif
inline void GameLandLordsBegins::set_cardshand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cardshand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameLandLordsBegins.CardsHand)
}
inline void GameLandLordsBegins::set_cardshand(const void* value, size_t size) {
  
  cardshand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameLandLordsBegins.CardsHand)
}
inline ::std::string* GameLandLordsBegins::mutable_cardshand() {
  
  // @@protoc_insertion_point(field_mutable:go.GameLandLordsBegins.CardsHand)
  return cardshand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLandLordsBegins::release_cardshand() {
  // @@protoc_insertion_point(field_release:go.GameLandLordsBegins.CardsHand)
  
  return cardshand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLandLordsBegins::set_allocated_cardshand(::std::string* cardshand) {
  if (cardshand != nullptr) {
    
  } else {
    
  }
  cardshand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardshand);
  // @@protoc_insertion_point(field_set_allocated:go.GameLandLordsBegins.CardsHand)
}

// -------------------------------------------------------------------

// GameLandLordsOutcard

// uint32 Site = 1;
inline void GameLandLordsOutcard::clear_site() {
  site_ = 0u;
}
inline ::google::protobuf::uint32 GameLandLordsOutcard::site() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsOutcard.Site)
  return site_;
}
inline void GameLandLordsOutcard::set_site(::google::protobuf::uint32 value) {
  
  site_ = value;
  // @@protoc_insertion_point(field_set:go.GameLandLordsOutcard.Site)
}

// bytes Cards = 2;
inline void GameLandLordsOutcard::clear_cards() {
  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLandLordsOutcard::cards() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsOutcard.Cards)
  return cards_.GetNoArena();
}
inline void GameLandLordsOutcard::set_cards(const ::std::string& value) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameLandLordsOutcard.Cards)
}
#if LANG_CXX11
inline void GameLandLordsOutcard::set_cards(::std::string&& value) {
  
  cards_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameLandLordsOutcard.Cards)
}
#endif
inline void GameLandLordsOutcard::set_cards(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameLandLordsOutcard.Cards)
}
inline void GameLandLordsOutcard::set_cards(const void* value, size_t size) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameLandLordsOutcard.Cards)
}
inline ::std::string* GameLandLordsOutcard::mutable_cards() {
  
  // @@protoc_insertion_point(field_mutable:go.GameLandLordsOutcard.Cards)
  return cards_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLandLordsOutcard::release_cards() {
  // @@protoc_insertion_point(field_release:go.GameLandLordsOutcard.Cards)
  
  return cards_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLandLordsOutcard::set_allocated_cards(::std::string* cards) {
  if (cards != nullptr) {
    
  } else {
    
  }
  cards_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cards);
  // @@protoc_insertion_point(field_set_allocated:go.GameLandLordsOutcard.Cards)
}

// string Hints = 3;
inline void GameLandLordsOutcard::clear_hints() {
  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLandLordsOutcard::hints() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsOutcard.Hints)
  return hints_.GetNoArena();
}
inline void GameLandLordsOutcard::set_hints(const ::std::string& value) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameLandLordsOutcard.Hints)
}
#if LANG_CXX11
inline void GameLandLordsOutcard::set_hints(::std::string&& value) {
  
  hints_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameLandLordsOutcard.Hints)
}
#endif
inline void GameLandLordsOutcard::set_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameLandLordsOutcard.Hints)
}
inline void GameLandLordsOutcard::set_hints(const char* value, size_t size) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameLandLordsOutcard.Hints)
}
inline ::std::string* GameLandLordsOutcard::mutable_hints() {
  
  // @@protoc_insertion_point(field_mutable:go.GameLandLordsOutcard.Hints)
  return hints_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLandLordsOutcard::release_hints() {
  // @@protoc_insertion_point(field_release:go.GameLandLordsOutcard.Hints)
  
  return hints_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLandLordsOutcard::set_allocated_hints(::std::string* hints) {
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hints);
  // @@protoc_insertion_point(field_set_allocated:go.GameLandLordsOutcard.Hints)
}

// -------------------------------------------------------------------

// GameLandLordsOperate

// int32 Code = 1;
inline void GameLandLordsOperate::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 GameLandLordsOperate::code() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsOperate.Code)
  return code_;
}
inline void GameLandLordsOperate::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:go.GameLandLordsOperate.Code)
}

// bytes Cards = 2;
inline void GameLandLordsOperate::clear_cards() {
  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLandLordsOperate::cards() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsOperate.Cards)
  return cards_.GetNoArena();
}
inline void GameLandLordsOperate::set_cards(const ::std::string& value) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameLandLordsOperate.Cards)
}
#if LANG_CXX11
inline void GameLandLordsOperate::set_cards(::std::string&& value) {
  
  cards_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameLandLordsOperate.Cards)
}
#endif
inline void GameLandLordsOperate::set_cards(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameLandLordsOperate.Cards)
}
inline void GameLandLordsOperate::set_cards(const void* value, size_t size) {
  
  cards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameLandLordsOperate.Cards)
}
inline ::std::string* GameLandLordsOperate::mutable_cards() {
  
  // @@protoc_insertion_point(field_mutable:go.GameLandLordsOperate.Cards)
  return cards_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLandLordsOperate::release_cards() {
  // @@protoc_insertion_point(field_release:go.GameLandLordsOperate.Cards)
  
  return cards_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLandLordsOperate::set_allocated_cards(::std::string* cards) {
  if (cards != nullptr) {
    
  } else {
    
  }
  cards_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cards);
  // @@protoc_insertion_point(field_set_allocated:go.GameLandLordsOperate.Cards)
}

// string Hints = 3;
inline void GameLandLordsOperate::clear_hints() {
  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLandLordsOperate::hints() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsOperate.Hints)
  return hints_.GetNoArena();
}
inline void GameLandLordsOperate::set_hints(const ::std::string& value) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameLandLordsOperate.Hints)
}
#if LANG_CXX11
inline void GameLandLordsOperate::set_hints(::std::string&& value) {
  
  hints_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameLandLordsOperate.Hints)
}
#endif
inline void GameLandLordsOperate::set_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameLandLordsOperate.Hints)
}
inline void GameLandLordsOperate::set_hints(const char* value, size_t size) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameLandLordsOperate.Hints)
}
inline ::std::string* GameLandLordsOperate::mutable_hints() {
  
  // @@protoc_insertion_point(field_mutable:go.GameLandLordsOperate.Hints)
  return hints_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLandLordsOperate::release_hints() {
  // @@protoc_insertion_point(field_release:go.GameLandLordsOperate.Hints)
  
  return hints_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLandLordsOperate::set_allocated_hints(::std::string* hints) {
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hints);
  // @@protoc_insertion_point(field_set_allocated:go.GameLandLordsOperate.Hints)
}

// -------------------------------------------------------------------

// GameLandLordsAward

// uint32 Site = 1;
inline void GameLandLordsAward::clear_site() {
  site_ = 0u;
}
inline ::google::protobuf::uint32 GameLandLordsAward::site() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsAward.Site)
  return site_;
}
inline void GameLandLordsAward::set_site(::google::protobuf::uint32 value) {
  
  site_ = value;
  // @@protoc_insertion_point(field_set:go.GameLandLordsAward.Site)
}

// bytes Codes = 2;
inline void GameLandLordsAward::clear_codes() {
  codes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLandLordsAward::codes() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsAward.Codes)
  return codes_.GetNoArena();
}
inline void GameLandLordsAward::set_codes(const ::std::string& value) {
  
  codes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameLandLordsAward.Codes)
}
#if LANG_CXX11
inline void GameLandLordsAward::set_codes(::std::string&& value) {
  
  codes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameLandLordsAward.Codes)
}
#endif
inline void GameLandLordsAward::set_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  codes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameLandLordsAward.Codes)
}
inline void GameLandLordsAward::set_codes(const void* value, size_t size) {
  
  codes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameLandLordsAward.Codes)
}
inline ::std::string* GameLandLordsAward::mutable_codes() {
  
  // @@protoc_insertion_point(field_mutable:go.GameLandLordsAward.Codes)
  return codes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLandLordsAward::release_codes() {
  // @@protoc_insertion_point(field_release:go.GameLandLordsAward.Codes)
  
  return codes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLandLordsAward::set_allocated_codes(::std::string* codes) {
  if (codes != nullptr) {
    
  } else {
    
  }
  codes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codes);
  // @@protoc_insertion_point(field_set_allocated:go.GameLandLordsAward.Codes)
}

// int64 GetGold = 3;
inline void GameLandLordsAward::clear_getgold() {
  getgold_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameLandLordsAward::getgold() const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsAward.GetGold)
  return getgold_;
}
inline void GameLandLordsAward::set_getgold(::google::protobuf::int64 value) {
  
  getgold_ = value;
  // @@protoc_insertion_point(field_set:go.GameLandLordsAward.GetGold)
}

// -------------------------------------------------------------------

// GameLandLordsCheckout

// repeated .go.GameLandLordsAward players = 1;
inline int GameLandLordsCheckout::players_size() const {
  return players_.size();
}
inline void GameLandLordsCheckout::clear_players() {
  players_.Clear();
}
inline ::go::GameLandLordsAward* GameLandLordsCheckout::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:go.GameLandLordsCheckout.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::go::GameLandLordsAward >*
GameLandLordsCheckout::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:go.GameLandLordsCheckout.players)
  return &players_;
}
inline const ::go::GameLandLordsAward& GameLandLordsCheckout::players(int index) const {
  // @@protoc_insertion_point(field_get:go.GameLandLordsCheckout.players)
  return players_.Get(index);
}
inline ::go::GameLandLordsAward* GameLandLordsCheckout::add_players() {
  // @@protoc_insertion_point(field_add:go.GameLandLordsCheckout.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::go::GameLandLordsAward >&
GameLandLordsCheckout::players() const {
  // @@protoc_insertion_point(field_list:go.GameLandLordsCheckout.players)
  return players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace go

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_landLords_2eproto
