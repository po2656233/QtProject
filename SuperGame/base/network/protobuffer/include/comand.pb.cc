// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comand.proto

#include "comand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace go {
class PacketDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PacketData> _instance;
} _PacketData_default_instance_;
}  // namespace go
static void InitDefaultsPacketData_comand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_PacketData_default_instance_;
    new (ptr) ::go::PacketData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::PacketData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PacketData_comand_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPacketData_comand_2eproto}, {}};

void InitDefaults_comand_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PacketData_comand_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_comand_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_comand_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_comand_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_comand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::PacketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::PacketData, mainid_),
  PROTOBUF_FIELD_OFFSET(::go::PacketData, subid_),
  PROTOBUF_FIELD_OFFSET(::go::PacketData, transdata_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::go::PacketData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_PacketData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_comand_2eproto = {
  {}, AddDescriptors_comand_2eproto, "comand.proto", schemas,
  file_default_instances, TableStruct_comand_2eproto::offsets,
  file_level_metadata_comand_2eproto, 1, file_level_enum_descriptors_comand_2eproto, file_level_service_descriptors_comand_2eproto,
};

const char descriptor_table_protodef_comand_2eproto[] =
  "\n\014comand.proto\022\002go\">\n\nPacketData\022\016\n\006Main"
  "ID\030\001 \001(\r\022\r\n\005SubID\030\002 \001(\r\022\021\n\tTransData\030\003 \001"
  "(\014b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_comand_2eproto = {
  false, InitDefaults_comand_2eproto, 
  descriptor_table_protodef_comand_2eproto,
  "comand.proto", &assign_descriptors_table_comand_2eproto, 90,
};

void AddDescriptors_comand_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_comand_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_comand_2eproto = []() { AddDescriptors_comand_2eproto(); return true; }();
namespace go {

// ===================================================================

void PacketData::InitAsDefaultInstance() {
}
class PacketData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketData::kMainIDFieldNumber;
const int PacketData::kSubIDFieldNumber;
const int PacketData::kTransDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketData::PacketData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.PacketData)
}
PacketData::PacketData(const PacketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transdata().size() > 0) {
    transdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transdata_);
  }
  ::memcpy(&mainid_, &from.mainid_,
    static_cast<size_t>(reinterpret_cast<char*>(&subid_) -
    reinterpret_cast<char*>(&mainid_)) + sizeof(subid_));
  // @@protoc_insertion_point(copy_constructor:go.PacketData)
}

void PacketData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PacketData_comand_2eproto.base);
  transdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mainid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subid_) -
      reinterpret_cast<char*>(&mainid_)) + sizeof(subid_));
}

PacketData::~PacketData() {
  // @@protoc_insertion_point(destructor:go.PacketData)
  SharedDtor();
}

void PacketData::SharedDtor() {
  transdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PacketData& PacketData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PacketData_comand_2eproto.base);
  return *internal_default_instance();
}


void PacketData::Clear() {
// @@protoc_insertion_point(message_clear_start:go.PacketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mainid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subid_) -
      reinterpret_cast<char*>(&mainid_)) + sizeof(subid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PacketData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PacketData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 MainID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_mainid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 SubID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_subid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes TransData = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PacketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.PacketData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 MainID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mainid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SubID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes TransData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.PacketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.PacketData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PacketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.PacketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MainID = 1;
  if (this->mainid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mainid(), output);
  }

  // uint32 SubID = 2;
  if (this->subid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->subid(), output);
  }

  // bytes TransData = 3;
  if (this->transdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->transdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.PacketData)
}

::google::protobuf::uint8* PacketData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.PacketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MainID = 1;
  if (this->mainid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mainid(), target);
  }

  // uint32 SubID = 2;
  if (this->subid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->subid(), target);
  }

  // bytes TransData = 3;
  if (this->transdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->transdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.PacketData)
  return target;
}

size_t PacketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.PacketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes TransData = 3;
  if (this->transdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transdata());
  }

  // uint32 MainID = 1;
  if (this->mainid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mainid());
  }

  // uint32 SubID = 2;
  if (this->subid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.PacketData)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketData* source =
      ::google::protobuf::DynamicCastToGenerated<PacketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.PacketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.PacketData)
    MergeFrom(*source);
  }
}

void PacketData::MergeFrom(const PacketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.PacketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transdata().size() > 0) {

    transdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transdata_);
  }
  if (from.mainid() != 0) {
    set_mainid(from.mainid());
  }
  if (from.subid() != 0) {
    set_subid(from.subid());
  }
}

void PacketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.PacketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketData::CopyFrom(const PacketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.PacketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketData::IsInitialized() const {
  return true;
}

void PacketData::Swap(PacketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketData::InternalSwap(PacketData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transdata_.Swap(&other->transdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mainid_, other->mainid_);
  swap(subid_, other->subid_);
}

::google::protobuf::Metadata PacketData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_comand_2eproto);
  return ::file_level_metadata_comand_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace go
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::go::PacketData* Arena::CreateMaybeMessage< ::go::PacketData >(Arena* arena) {
  return Arena::CreateInternal< ::go::PacketData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
