// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong.proto

#include "mahjong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_gamecomm_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserList_gamecomm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mahjong_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameMahjongAward_mahjong_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mahjong_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameMahjongPlayer_mahjong_2eproto;
namespace go {
class GameMahjongEnterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameMahjongEnter> _instance;
} _GameMahjongEnter_default_instance_;
class GameMahjongPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameMahjongPlayer> _instance;
} _GameMahjongPlayer_default_instance_;
class GameMahjongBeginsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameMahjongBegins> _instance;
} _GameMahjongBegins_default_instance_;
class GameMahjongOutcardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameMahjongOutcard> _instance;
} _GameMahjongOutcard_default_instance_;
class GameMahjongOperateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameMahjongOperate> _instance;
} _GameMahjongOperate_default_instance_;
class GameMahjongAwardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameMahjongAward> _instance;
} _GameMahjongAward_default_instance_;
class GameMahjongCheckoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameMahjongCheckout> _instance;
} _GameMahjongCheckout_default_instance_;
}  // namespace go
static void InitDefaultsGameMahjongEnter_mahjong_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameMahjongEnter_default_instance_;
    new (ptr) ::go::GameMahjongEnter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameMahjongEnter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameMahjongEnter_mahjong_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameMahjongEnter_mahjong_2eproto}, {
      &scc_info_UserList_gamecomm_2eproto.base,}};

static void InitDefaultsGameMahjongPlayer_mahjong_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameMahjongPlayer_default_instance_;
    new (ptr) ::go::GameMahjongPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameMahjongPlayer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameMahjongPlayer_mahjong_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameMahjongPlayer_mahjong_2eproto}, {}};

static void InitDefaultsGameMahjongBegins_mahjong_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameMahjongBegins_default_instance_;
    new (ptr) ::go::GameMahjongBegins();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameMahjongBegins::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameMahjongBegins_mahjong_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameMahjongBegins_mahjong_2eproto}, {
      &scc_info_GameMahjongPlayer_mahjong_2eproto.base,}};

static void InitDefaultsGameMahjongOutcard_mahjong_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameMahjongOutcard_default_instance_;
    new (ptr) ::go::GameMahjongOutcard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameMahjongOutcard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameMahjongOutcard_mahjong_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameMahjongOutcard_mahjong_2eproto}, {}};

static void InitDefaultsGameMahjongOperate_mahjong_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameMahjongOperate_default_instance_;
    new (ptr) ::go::GameMahjongOperate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameMahjongOperate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameMahjongOperate_mahjong_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameMahjongOperate_mahjong_2eproto}, {}};

static void InitDefaultsGameMahjongAward_mahjong_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameMahjongAward_default_instance_;
    new (ptr) ::go::GameMahjongAward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameMahjongAward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameMahjongAward_mahjong_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameMahjongAward_mahjong_2eproto}, {}};

static void InitDefaultsGameMahjongCheckout_mahjong_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::_GameMahjongCheckout_default_instance_;
    new (ptr) ::go::GameMahjongCheckout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::GameMahjongCheckout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameMahjongCheckout_mahjong_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameMahjongCheckout_mahjong_2eproto}, {
      &scc_info_GameMahjongAward_mahjong_2eproto.base,}};

void InitDefaults_mahjong_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameMahjongEnter_mahjong_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameMahjongPlayer_mahjong_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameMahjongBegins_mahjong_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameMahjongOutcard_mahjong_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameMahjongOperate_mahjong_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameMahjongAward_mahjong_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameMahjongCheckout_mahjong_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_mahjong_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_mahjong_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_mahjong_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_mahjong_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongEnter, userid_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongEnter, timestamp_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongEnter, players_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongEnter, freetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongPlayer, userid_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongPlayer, site_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongPlayer, cards_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongPlayer, isbanker_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongBegins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongBegins, dice_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongBegins, playersinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongOutcard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongOutcard, site_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongOutcard, cards_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongOutcard, hints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongOperate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongOperate, code_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongOperate, cards_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongOperate, hints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongAward, site_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongAward, codes_),
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongAward, getgold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongCheckout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::GameMahjongCheckout, players_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::go::GameMahjongEnter)},
  { 9, -1, sizeof(::go::GameMahjongPlayer)},
  { 18, -1, sizeof(::go::GameMahjongBegins)},
  { 25, -1, sizeof(::go::GameMahjongOutcard)},
  { 33, -1, sizeof(::go::GameMahjongOperate)},
  { 41, -1, sizeof(::go::GameMahjongAward)},
  { 49, -1, sizeof(::go::GameMahjongCheckout)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameMahjongEnter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameMahjongPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameMahjongBegins_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameMahjongOutcard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameMahjongOperate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameMahjongAward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::_GameMahjongCheckout_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_mahjong_2eproto = {
  {}, AddDescriptors_mahjong_2eproto, "mahjong.proto", schemas,
  file_default_instances, TableStruct_mahjong_2eproto::offsets,
  file_level_metadata_mahjong_2eproto, 7, file_level_enum_descriptors_mahjong_2eproto, file_level_service_descriptors_mahjong_2eproto,
};

const char descriptor_table_protodef_mahjong_2eproto[] =
  "\n\rmahjong.proto\022\002go\032\016gamecomm.proto\"f\n\020G"
  "ameMahjongEnter\022\016\n\006UserID\030\001 \001(\004\022\021\n\tTimeS"
  "tamp\030\002 \001(\003\022\035\n\007Players\030\003 \001(\0132\014.go.UserLis"
  "t\022\020\n\010FreeTime\030\004 \001(\r\"R\n\021GameMahjongPlayer"
  "\022\016\n\006UserID\030\001 \001(\004\022\014\n\004Site\030\002 \001(\r\022\r\n\005Cards\030"
  "\003 \001(\014\022\020\n\010IsBanker\030\004 \001(\010\"M\n\021GameMahjongBe"
  "gins\022\014\n\004Dice\030\001 \001(\014\022*\n\013PlayersInfo\030\002 \003(\0132"
  "\025.go.GameMahjongPlayer\"@\n\022GameMahjongOut"
  "card\022\014\n\004Site\030\001 \001(\r\022\r\n\005Cards\030\002 \001(\014\022\r\n\005Hin"
  "ts\030\003 \001(\t\"@\n\022GameMahjongOperate\022\014\n\004Code\030\001"
  " \001(\005\022\r\n\005Cards\030\002 \001(\014\022\r\n\005Hints\030\003 \001(\t\"@\n\020Ga"
  "meMahjongAward\022\014\n\004Site\030\001 \001(\r\022\r\n\005Codes\030\002 "
  "\001(\014\022\017\n\007GetGold\030\003 \001(\003\"<\n\023GameMahjongCheck"
  "out\022%\n\007players\030\001 \003(\0132\024.go.GameMahjongAwa"
  "rdb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_mahjong_2eproto = {
  false, InitDefaults_mahjong_2eproto, 
  descriptor_table_protodef_mahjong_2eproto,
  "mahjong.proto", &assign_descriptors_table_mahjong_2eproto, 570,
};

void AddDescriptors_mahjong_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_gamecomm_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_mahjong_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mahjong_2eproto = []() { AddDescriptors_mahjong_2eproto(); return true; }();
namespace go {

// ===================================================================

void GameMahjongEnter::InitAsDefaultInstance() {
  ::go::_GameMahjongEnter_default_instance_._instance.get_mutable()->players_ = const_cast< ::go::UserList*>(
      ::go::UserList::internal_default_instance());
}
class GameMahjongEnter::HasBitSetters {
 public:
  static const ::go::UserList& players(const GameMahjongEnter* msg);
};

const ::go::UserList&
GameMahjongEnter::HasBitSetters::players(const GameMahjongEnter* msg) {
  return *msg->players_;
}
void GameMahjongEnter::clear_players() {
  if (GetArenaNoVirtual() == nullptr && players_ != nullptr) {
    delete players_;
  }
  players_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMahjongEnter::kUserIDFieldNumber;
const int GameMahjongEnter::kTimeStampFieldNumber;
const int GameMahjongEnter::kPlayersFieldNumber;
const int GameMahjongEnter::kFreeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMahjongEnter::GameMahjongEnter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameMahjongEnter)
}
GameMahjongEnter::GameMahjongEnter(const GameMahjongEnter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_players()) {
    players_ = new ::go::UserList(*from.players_);
  } else {
    players_ = nullptr;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&freetime_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(freetime_));
  // @@protoc_insertion_point(copy_constructor:go.GameMahjongEnter)
}

void GameMahjongEnter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameMahjongEnter_mahjong_2eproto.base);
  ::memset(&players_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freetime_) -
      reinterpret_cast<char*>(&players_)) + sizeof(freetime_));
}

GameMahjongEnter::~GameMahjongEnter() {
  // @@protoc_insertion_point(destructor:go.GameMahjongEnter)
  SharedDtor();
}

void GameMahjongEnter::SharedDtor() {
  if (this != internal_default_instance()) delete players_;
}

void GameMahjongEnter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMahjongEnter& GameMahjongEnter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameMahjongEnter_mahjong_2eproto.base);
  return *internal_default_instance();
}


void GameMahjongEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameMahjongEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && players_ != nullptr) {
    delete players_;
  }
  players_ = nullptr;
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freetime_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(freetime_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameMahjongEnter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameMahjongEnter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_userid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 TimeStamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .go.UserList Players = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::go::UserList::_InternalParse;
        object = msg->mutable_players();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 FreeTime = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_freetime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameMahjongEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameMahjongEnter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TimeStamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .go.UserList Players = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FreeTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameMahjongEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameMahjongEnter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameMahjongEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameMahjongEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // .go.UserList Players = 3;
  if (this->has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::players(this), output);
  }

  // uint32 FreeTime = 4;
  if (this->freetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->freetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameMahjongEnter)
}

::google::protobuf::uint8* GameMahjongEnter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameMahjongEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // .go.UserList Players = 3;
  if (this->has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::players(this), target);
  }

  // uint32 FreeTime = 4;
  if (this->freetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->freetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameMahjongEnter)
  return target;
}

size_t GameMahjongEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameMahjongEnter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .go.UserList Players = 3;
  if (this->has_players()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *players_);
  }

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // int64 TimeStamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // uint32 FreeTime = 4;
  if (this->freetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->freetime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMahjongEnter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameMahjongEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMahjongEnter* source =
      ::google::protobuf::DynamicCastToGenerated<GameMahjongEnter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameMahjongEnter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameMahjongEnter)
    MergeFrom(*source);
  }
}

void GameMahjongEnter::MergeFrom(const GameMahjongEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameMahjongEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_players()) {
    mutable_players()->::go::UserList::MergeFrom(from.players());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.freetime() != 0) {
    set_freetime(from.freetime());
  }
}

void GameMahjongEnter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameMahjongEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMahjongEnter::CopyFrom(const GameMahjongEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameMahjongEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMahjongEnter::IsInitialized() const {
  return true;
}

void GameMahjongEnter::Swap(GameMahjongEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMahjongEnter::InternalSwap(GameMahjongEnter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(players_, other->players_);
  swap(userid_, other->userid_);
  swap(timestamp_, other->timestamp_);
  swap(freetime_, other->freetime_);
}

::google::protobuf::Metadata GameMahjongEnter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mahjong_2eproto);
  return ::file_level_metadata_mahjong_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameMahjongPlayer::InitAsDefaultInstance() {
}
class GameMahjongPlayer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMahjongPlayer::kUserIDFieldNumber;
const int GameMahjongPlayer::kSiteFieldNumber;
const int GameMahjongPlayer::kCardsFieldNumber;
const int GameMahjongPlayer::kIsBankerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMahjongPlayer::GameMahjongPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameMahjongPlayer)
}
GameMahjongPlayer::GameMahjongPlayer(const GameMahjongPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cards().size() > 0) {
    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isbanker_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(isbanker_));
  // @@protoc_insertion_point(copy_constructor:go.GameMahjongPlayer)
}

void GameMahjongPlayer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameMahjongPlayer_mahjong_2eproto.base);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isbanker_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(isbanker_));
}

GameMahjongPlayer::~GameMahjongPlayer() {
  // @@protoc_insertion_point(destructor:go.GameMahjongPlayer)
  SharedDtor();
}

void GameMahjongPlayer::SharedDtor() {
  cards_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameMahjongPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMahjongPlayer& GameMahjongPlayer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameMahjongPlayer_mahjong_2eproto.base);
  return *internal_default_instance();
}


void GameMahjongPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameMahjongPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isbanker_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(isbanker_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameMahjongPlayer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameMahjongPlayer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_userid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 Site = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_site(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes Cards = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cards();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool IsBanker = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_isbanker(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameMahjongPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameMahjongPlayer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 UserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Site = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsBanker = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbanker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameMahjongPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameMahjongPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameMahjongPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameMahjongPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // uint32 Site = 2;
  if (this->site() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->site(), output);
  }

  // bytes Cards = 3;
  if (this->cards().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cards(), output);
  }

  // bool IsBanker = 4;
  if (this->isbanker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isbanker(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameMahjongPlayer)
}

::google::protobuf::uint8* GameMahjongPlayer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameMahjongPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // uint32 Site = 2;
  if (this->site() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->site(), target);
  }

  // bytes Cards = 3;
  if (this->cards().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cards(), target);
  }

  // bool IsBanker = 4;
  if (this->isbanker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isbanker(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameMahjongPlayer)
  return target;
}

size_t GameMahjongPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameMahjongPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Cards = 3;
  if (this->cards().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cards());
  }

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  // uint32 Site = 2;
  if (this->site() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());
  }

  // bool IsBanker = 4;
  if (this->isbanker() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMahjongPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameMahjongPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMahjongPlayer* source =
      ::google::protobuf::DynamicCastToGenerated<GameMahjongPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameMahjongPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameMahjongPlayer)
    MergeFrom(*source);
  }
}

void GameMahjongPlayer::MergeFrom(const GameMahjongPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameMahjongPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cards().size() > 0) {

    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.site() != 0) {
    set_site(from.site());
  }
  if (from.isbanker() != 0) {
    set_isbanker(from.isbanker());
  }
}

void GameMahjongPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameMahjongPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMahjongPlayer::CopyFrom(const GameMahjongPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameMahjongPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMahjongPlayer::IsInitialized() const {
  return true;
}

void GameMahjongPlayer::Swap(GameMahjongPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMahjongPlayer::InternalSwap(GameMahjongPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cards_.Swap(&other->cards_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(site_, other->site_);
  swap(isbanker_, other->isbanker_);
}

::google::protobuf::Metadata GameMahjongPlayer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mahjong_2eproto);
  return ::file_level_metadata_mahjong_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameMahjongBegins::InitAsDefaultInstance() {
}
class GameMahjongBegins::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMahjongBegins::kDiceFieldNumber;
const int GameMahjongBegins::kPlayersInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMahjongBegins::GameMahjongBegins()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameMahjongBegins)
}
GameMahjongBegins::GameMahjongBegins(const GameMahjongBegins& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      playersinfo_(from.playersinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dice().size() > 0) {
    dice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dice_);
  }
  // @@protoc_insertion_point(copy_constructor:go.GameMahjongBegins)
}

void GameMahjongBegins::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameMahjongBegins_mahjong_2eproto.base);
  dice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameMahjongBegins::~GameMahjongBegins() {
  // @@protoc_insertion_point(destructor:go.GameMahjongBegins)
  SharedDtor();
}

void GameMahjongBegins::SharedDtor() {
  dice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameMahjongBegins::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMahjongBegins& GameMahjongBegins::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameMahjongBegins_mahjong_2eproto.base);
  return *internal_default_instance();
}


void GameMahjongBegins::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameMahjongBegins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playersinfo_.Clear();
  dice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameMahjongBegins::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameMahjongBegins*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes Dice = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_dice();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .go.GameMahjongPlayer PlayersInfo = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::go::GameMahjongPlayer::_InternalParse;
          object = msg->add_playersinfo();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameMahjongBegins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameMahjongBegins)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes Dice = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .go.GameMahjongPlayer PlayersInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_playersinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameMahjongBegins)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameMahjongBegins)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameMahjongBegins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameMahjongBegins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Dice = 1;
  if (this->dice().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->dice(), output);
  }

  // repeated .go.GameMahjongPlayer PlayersInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playersinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->playersinfo(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameMahjongBegins)
}

::google::protobuf::uint8* GameMahjongBegins::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameMahjongBegins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Dice = 1;
  if (this->dice().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->dice(), target);
  }

  // repeated .go.GameMahjongPlayer PlayersInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playersinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->playersinfo(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameMahjongBegins)
  return target;
}

size_t GameMahjongBegins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameMahjongBegins)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .go.GameMahjongPlayer PlayersInfo = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->playersinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->playersinfo(static_cast<int>(i)));
    }
  }

  // bytes Dice = 1;
  if (this->dice().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMahjongBegins::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameMahjongBegins)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMahjongBegins* source =
      ::google::protobuf::DynamicCastToGenerated<GameMahjongBegins>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameMahjongBegins)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameMahjongBegins)
    MergeFrom(*source);
  }
}

void GameMahjongBegins::MergeFrom(const GameMahjongBegins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameMahjongBegins)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playersinfo_.MergeFrom(from.playersinfo_);
  if (from.dice().size() > 0) {

    dice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dice_);
  }
}

void GameMahjongBegins::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameMahjongBegins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMahjongBegins::CopyFrom(const GameMahjongBegins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameMahjongBegins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMahjongBegins::IsInitialized() const {
  return true;
}

void GameMahjongBegins::Swap(GameMahjongBegins* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMahjongBegins::InternalSwap(GameMahjongBegins* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&playersinfo_)->InternalSwap(CastToBase(&other->playersinfo_));
  dice_.Swap(&other->dice_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GameMahjongBegins::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mahjong_2eproto);
  return ::file_level_metadata_mahjong_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameMahjongOutcard::InitAsDefaultInstance() {
}
class GameMahjongOutcard::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMahjongOutcard::kSiteFieldNumber;
const int GameMahjongOutcard::kCardsFieldNumber;
const int GameMahjongOutcard::kHintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMahjongOutcard::GameMahjongOutcard()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameMahjongOutcard)
}
GameMahjongOutcard::GameMahjongOutcard(const GameMahjongOutcard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cards().size() > 0) {
    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hints().size() > 0) {
    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  site_ = from.site_;
  // @@protoc_insertion_point(copy_constructor:go.GameMahjongOutcard)
}

void GameMahjongOutcard::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameMahjongOutcard_mahjong_2eproto.base);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_ = 0u;
}

GameMahjongOutcard::~GameMahjongOutcard() {
  // @@protoc_insertion_point(destructor:go.GameMahjongOutcard)
  SharedDtor();
}

void GameMahjongOutcard::SharedDtor() {
  cards_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameMahjongOutcard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMahjongOutcard& GameMahjongOutcard::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameMahjongOutcard_mahjong_2eproto.base);
  return *internal_default_instance();
}


void GameMahjongOutcard::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameMahjongOutcard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameMahjongOutcard::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameMahjongOutcard*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 Site = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_site(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes Cards = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cards();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string Hints = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("go.GameMahjongOutcard.Hints");
        object = msg->mutable_hints();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameMahjongOutcard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameMahjongOutcard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 Site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Hints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hints().data(), static_cast<int>(this->hints().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.GameMahjongOutcard.Hints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameMahjongOutcard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameMahjongOutcard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameMahjongOutcard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameMahjongOutcard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Site = 1;
  if (this->site() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->site(), output);
  }

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cards(), output);
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameMahjongOutcard.Hints");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hints(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameMahjongOutcard)
}

::google::protobuf::uint8* GameMahjongOutcard::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameMahjongOutcard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Site = 1;
  if (this->site() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->site(), target);
  }

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cards(), target);
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameMahjongOutcard.Hints");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hints(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameMahjongOutcard)
  return target;
}

size_t GameMahjongOutcard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameMahjongOutcard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cards());
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hints());
  }

  // uint32 Site = 1;
  if (this->site() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMahjongOutcard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameMahjongOutcard)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMahjongOutcard* source =
      ::google::protobuf::DynamicCastToGenerated<GameMahjongOutcard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameMahjongOutcard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameMahjongOutcard)
    MergeFrom(*source);
  }
}

void GameMahjongOutcard::MergeFrom(const GameMahjongOutcard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameMahjongOutcard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cards().size() > 0) {

    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  if (from.hints().size() > 0) {

    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  if (from.site() != 0) {
    set_site(from.site());
  }
}

void GameMahjongOutcard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameMahjongOutcard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMahjongOutcard::CopyFrom(const GameMahjongOutcard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameMahjongOutcard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMahjongOutcard::IsInitialized() const {
  return true;
}

void GameMahjongOutcard::Swap(GameMahjongOutcard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMahjongOutcard::InternalSwap(GameMahjongOutcard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cards_.Swap(&other->cards_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hints_.Swap(&other->hints_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(site_, other->site_);
}

::google::protobuf::Metadata GameMahjongOutcard::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mahjong_2eproto);
  return ::file_level_metadata_mahjong_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameMahjongOperate::InitAsDefaultInstance() {
}
class GameMahjongOperate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMahjongOperate::kCodeFieldNumber;
const int GameMahjongOperate::kCardsFieldNumber;
const int GameMahjongOperate::kHintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMahjongOperate::GameMahjongOperate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameMahjongOperate)
}
GameMahjongOperate::GameMahjongOperate(const GameMahjongOperate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cards().size() > 0) {
    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hints().size() > 0) {
    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:go.GameMahjongOperate)
}

void GameMahjongOperate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameMahjongOperate_mahjong_2eproto.base);
  cards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

GameMahjongOperate::~GameMahjongOperate() {
  // @@protoc_insertion_point(destructor:go.GameMahjongOperate)
  SharedDtor();
}

void GameMahjongOperate::SharedDtor() {
  cards_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameMahjongOperate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMahjongOperate& GameMahjongOperate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameMahjongOperate_mahjong_2eproto.base);
  return *internal_default_instance();
}


void GameMahjongOperate::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameMahjongOperate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameMahjongOperate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameMahjongOperate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes Cards = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cards();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string Hints = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("go.GameMahjongOperate.Hints");
        object = msg->mutable_hints();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameMahjongOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameMahjongOperate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Hints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hints().data(), static_cast<int>(this->hints().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.GameMahjongOperate.Hints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameMahjongOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameMahjongOperate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameMahjongOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameMahjongOperate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cards(), output);
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameMahjongOperate.Hints");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hints(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameMahjongOperate)
}

::google::protobuf::uint8* GameMahjongOperate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameMahjongOperate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cards(), target);
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.GameMahjongOperate.Hints");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hints(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameMahjongOperate)
  return target;
}

size_t GameMahjongOperate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameMahjongOperate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Cards = 2;
  if (this->cards().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cards());
  }

  // string Hints = 3;
  if (this->hints().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hints());
  }

  // int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMahjongOperate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameMahjongOperate)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMahjongOperate* source =
      ::google::protobuf::DynamicCastToGenerated<GameMahjongOperate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameMahjongOperate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameMahjongOperate)
    MergeFrom(*source);
  }
}

void GameMahjongOperate::MergeFrom(const GameMahjongOperate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameMahjongOperate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cards().size() > 0) {

    cards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cards_);
  }
  if (from.hints().size() > 0) {

    hints_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hints_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void GameMahjongOperate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameMahjongOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMahjongOperate::CopyFrom(const GameMahjongOperate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameMahjongOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMahjongOperate::IsInitialized() const {
  return true;
}

void GameMahjongOperate::Swap(GameMahjongOperate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMahjongOperate::InternalSwap(GameMahjongOperate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cards_.Swap(&other->cards_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hints_.Swap(&other->hints_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::google::protobuf::Metadata GameMahjongOperate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mahjong_2eproto);
  return ::file_level_metadata_mahjong_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameMahjongAward::InitAsDefaultInstance() {
}
class GameMahjongAward::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMahjongAward::kSiteFieldNumber;
const int GameMahjongAward::kCodesFieldNumber;
const int GameMahjongAward::kGetGoldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMahjongAward::GameMahjongAward()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameMahjongAward)
}
GameMahjongAward::GameMahjongAward(const GameMahjongAward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  codes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.codes().size() > 0) {
    codes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codes_);
  }
  ::memcpy(&getgold_, &from.getgold_,
    static_cast<size_t>(reinterpret_cast<char*>(&site_) -
    reinterpret_cast<char*>(&getgold_)) + sizeof(site_));
  // @@protoc_insertion_point(copy_constructor:go.GameMahjongAward)
}

void GameMahjongAward::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameMahjongAward_mahjong_2eproto.base);
  codes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&getgold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&site_) -
      reinterpret_cast<char*>(&getgold_)) + sizeof(site_));
}

GameMahjongAward::~GameMahjongAward() {
  // @@protoc_insertion_point(destructor:go.GameMahjongAward)
  SharedDtor();
}

void GameMahjongAward::SharedDtor() {
  codes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameMahjongAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMahjongAward& GameMahjongAward::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameMahjongAward_mahjong_2eproto.base);
  return *internal_default_instance();
}


void GameMahjongAward::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameMahjongAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&getgold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&site_) -
      reinterpret_cast<char*>(&getgold_)) + sizeof(site_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameMahjongAward::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameMahjongAward*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 Site = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_site(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes Codes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_codes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 GetGold = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_getgold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameMahjongAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameMahjongAward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 Site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Codes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_codes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 GetGold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &getgold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameMahjongAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameMahjongAward)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameMahjongAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameMahjongAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Site = 1;
  if (this->site() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->site(), output);
  }

  // bytes Codes = 2;
  if (this->codes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->codes(), output);
  }

  // int64 GetGold = 3;
  if (this->getgold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->getgold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameMahjongAward)
}

::google::protobuf::uint8* GameMahjongAward::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameMahjongAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Site = 1;
  if (this->site() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->site(), target);
  }

  // bytes Codes = 2;
  if (this->codes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->codes(), target);
  }

  // int64 GetGold = 3;
  if (this->getgold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->getgold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameMahjongAward)
  return target;
}

size_t GameMahjongAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameMahjongAward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Codes = 2;
  if (this->codes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->codes());
  }

  // int64 GetGold = 3;
  if (this->getgold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->getgold());
  }

  // uint32 Site = 1;
  if (this->site() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMahjongAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameMahjongAward)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMahjongAward* source =
      ::google::protobuf::DynamicCastToGenerated<GameMahjongAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameMahjongAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameMahjongAward)
    MergeFrom(*source);
  }
}

void GameMahjongAward::MergeFrom(const GameMahjongAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameMahjongAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.codes().size() > 0) {

    codes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codes_);
  }
  if (from.getgold() != 0) {
    set_getgold(from.getgold());
  }
  if (from.site() != 0) {
    set_site(from.site());
  }
}

void GameMahjongAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameMahjongAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMahjongAward::CopyFrom(const GameMahjongAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameMahjongAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMahjongAward::IsInitialized() const {
  return true;
}

void GameMahjongAward::Swap(GameMahjongAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMahjongAward::InternalSwap(GameMahjongAward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  codes_.Swap(&other->codes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(getgold_, other->getgold_);
  swap(site_, other->site_);
}

::google::protobuf::Metadata GameMahjongAward::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mahjong_2eproto);
  return ::file_level_metadata_mahjong_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameMahjongCheckout::InitAsDefaultInstance() {
}
class GameMahjongCheckout::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMahjongCheckout::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMahjongCheckout::GameMahjongCheckout()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.GameMahjongCheckout)
}
GameMahjongCheckout::GameMahjongCheckout(const GameMahjongCheckout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:go.GameMahjongCheckout)
}

void GameMahjongCheckout::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameMahjongCheckout_mahjong_2eproto.base);
}

GameMahjongCheckout::~GameMahjongCheckout() {
  // @@protoc_insertion_point(destructor:go.GameMahjongCheckout)
  SharedDtor();
}

void GameMahjongCheckout::SharedDtor() {
}

void GameMahjongCheckout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMahjongCheckout& GameMahjongCheckout::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameMahjongCheckout_mahjong_2eproto.base);
  return *internal_default_instance();
}


void GameMahjongCheckout::Clear() {
// @@protoc_insertion_point(message_clear_start:go.GameMahjongCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameMahjongCheckout::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameMahjongCheckout*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .go.GameMahjongAward players = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::go::GameMahjongAward::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameMahjongCheckout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.GameMahjongCheckout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .go.GameMahjongAward players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.GameMahjongCheckout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.GameMahjongCheckout)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameMahjongCheckout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.GameMahjongCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .go.GameMahjongAward players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:go.GameMahjongCheckout)
}

::google::protobuf::uint8* GameMahjongCheckout::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.GameMahjongCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .go.GameMahjongAward players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.GameMahjongCheckout)
  return target;
}

size_t GameMahjongCheckout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.GameMahjongCheckout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .go.GameMahjongAward players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMahjongCheckout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.GameMahjongCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMahjongCheckout* source =
      ::google::protobuf::DynamicCastToGenerated<GameMahjongCheckout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.GameMahjongCheckout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.GameMahjongCheckout)
    MergeFrom(*source);
  }
}

void GameMahjongCheckout::MergeFrom(const GameMahjongCheckout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.GameMahjongCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void GameMahjongCheckout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.GameMahjongCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMahjongCheckout::CopyFrom(const GameMahjongCheckout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.GameMahjongCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMahjongCheckout::IsInitialized() const {
  return true;
}

void GameMahjongCheckout::Swap(GameMahjongCheckout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMahjongCheckout::InternalSwap(GameMahjongCheckout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
}

::google::protobuf::Metadata GameMahjongCheckout::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mahjong_2eproto);
  return ::file_level_metadata_mahjong_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace go
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::go::GameMahjongEnter* Arena::CreateMaybeMessage< ::go::GameMahjongEnter >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameMahjongEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameMahjongPlayer* Arena::CreateMaybeMessage< ::go::GameMahjongPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameMahjongPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameMahjongBegins* Arena::CreateMaybeMessage< ::go::GameMahjongBegins >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameMahjongBegins >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameMahjongOutcard* Arena::CreateMaybeMessage< ::go::GameMahjongOutcard >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameMahjongOutcard >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameMahjongOperate* Arena::CreateMaybeMessage< ::go::GameMahjongOperate >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameMahjongOperate >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameMahjongAward* Arena::CreateMaybeMessage< ::go::GameMahjongAward >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameMahjongAward >(arena);
}
template<> PROTOBUF_NOINLINE ::go::GameMahjongCheckout* Arena::CreateMaybeMessage< ::go::GameMahjongCheckout >(Arena* arena) {
  return Arena::CreateInternal< ::go::GameMahjongCheckout >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
