// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cowcow.proto

#ifndef PROTOBUF_INCLUDED_cowcow_2eproto
#define PROTOBUF_INCLUDED_cowcow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gamecomm.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cowcow_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_cowcow_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_cowcow_2eproto();
namespace go {
class GameCowcowBetResult;
class GameCowcowBetResultDefaultTypeInternal;
extern GameCowcowBetResultDefaultTypeInternal _GameCowcowBetResult_default_instance_;
class GameCowcowCheckout;
class GameCowcowCheckoutDefaultTypeInternal;
extern GameCowcowCheckoutDefaultTypeInternal _GameCowcowCheckout_default_instance_;
class GameCowcowEnter;
class GameCowcowEnterDefaultTypeInternal;
extern GameCowcowEnterDefaultTypeInternal _GameCowcowEnter_default_instance_;
class GameCowcowHost;
class GameCowcowHostDefaultTypeInternal;
extern GameCowcowHostDefaultTypeInternal _GameCowcowHost_default_instance_;
class GameCowcowOver;
class GameCowcowOverDefaultTypeInternal;
extern GameCowcowOverDefaultTypeInternal _GameCowcowOver_default_instance_;
class GameCowcowPlaying;
class GameCowcowPlayingDefaultTypeInternal;
extern GameCowcowPlayingDefaultTypeInternal _GameCowcowPlaying_default_instance_;
class GameCowcowSuperHost;
class GameCowcowSuperHostDefaultTypeInternal;
extern GameCowcowSuperHostDefaultTypeInternal _GameCowcowSuperHost_default_instance_;
}  // namespace go
namespace google {
namespace protobuf {
template<> ::go::GameCowcowBetResult* Arena::CreateMaybeMessage<::go::GameCowcowBetResult>(Arena*);
template<> ::go::GameCowcowCheckout* Arena::CreateMaybeMessage<::go::GameCowcowCheckout>(Arena*);
template<> ::go::GameCowcowEnter* Arena::CreateMaybeMessage<::go::GameCowcowEnter>(Arena*);
template<> ::go::GameCowcowHost* Arena::CreateMaybeMessage<::go::GameCowcowHost>(Arena*);
template<> ::go::GameCowcowOver* Arena::CreateMaybeMessage<::go::GameCowcowOver>(Arena*);
template<> ::go::GameCowcowPlaying* Arena::CreateMaybeMessage<::go::GameCowcowPlaying>(Arena*);
template<> ::go::GameCowcowSuperHost* Arena::CreateMaybeMessage<::go::GameCowcowSuperHost>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace go {

// ===================================================================

class GameCowcowEnter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameCowcowEnter) */ {
 public:
  GameCowcowEnter();
  virtual ~GameCowcowEnter();

  GameCowcowEnter(const GameCowcowEnter& from);

  inline GameCowcowEnter& operator=(const GameCowcowEnter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCowcowEnter(GameCowcowEnter&& from) noexcept
    : GameCowcowEnter() {
    *this = ::std::move(from);
  }

  inline GameCowcowEnter& operator=(GameCowcowEnter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameCowcowEnter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCowcowEnter* internal_default_instance() {
    return reinterpret_cast<const GameCowcowEnter*>(
               &_GameCowcowEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameCowcowEnter* other);
  friend void swap(GameCowcowEnter& a, GameCowcowEnter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCowcowEnter* New() const final {
    return CreateMaybeMessage<GameCowcowEnter>(nullptr);
  }

  GameCowcowEnter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameCowcowEnter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameCowcowEnter& from);
  void MergeFrom(const GameCowcowEnter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameCowcowEnter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Chips = 3;
  int chips_size() const;
  void clear_chips();
  static const int kChipsFieldNumber = 3;
  ::google::protobuf::int32 chips(int index) const;
  void set_chips(int index, ::google::protobuf::int32 value);
  void add_chips(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chips() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chips();

  // repeated bytes AwardAreas = 4;
  int awardareas_size() const;
  void clear_awardareas();
  static const int kAwardAreasFieldNumber = 4;
  const ::std::string& awardareas(int index) const;
  ::std::string* mutable_awardareas(int index);
  void set_awardareas(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_awardareas(int index, ::std::string&& value);
  #endif
  void set_awardareas(int index, const char* value);
  void set_awardareas(int index, const void* value, size_t size);
  ::std::string* add_awardareas();
  void add_awardareas(const ::std::string& value);
  #if LANG_CXX11
  void add_awardareas(::std::string&& value);
  #endif
  void add_awardareas(const char* value);
  void add_awardareas(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& awardareas() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_awardareas();

  // .go.PlayerInfo UserInfo = 1;
  bool has_userinfo() const;
  void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  const ::go::PlayerInfo& userinfo() const;
  ::go::PlayerInfo* release_userinfo();
  ::go::PlayerInfo* mutable_userinfo();
  void set_allocated_userinfo(::go::PlayerInfo* userinfo);

  // int64 TimeStamp = 2;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // uint32 FreeTime = 5;
  void clear_freetime();
  static const int kFreeTimeFieldNumber = 5;
  ::google::protobuf::uint32 freetime() const;
  void set_freetime(::google::protobuf::uint32 value);

  // uint32 BetTime = 6;
  void clear_bettime();
  static const int kBetTimeFieldNumber = 6;
  ::google::protobuf::uint32 bettime() const;
  void set_bettime(::google::protobuf::uint32 value);

  // uint32 OpenTime = 7;
  void clear_opentime();
  static const int kOpenTimeFieldNumber = 7;
  ::google::protobuf::uint32 opentime() const;
  void set_opentime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:go.GameCowcowEnter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chips_;
  mutable std::atomic<int> _chips_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> awardareas_;
  ::go::PlayerInfo* userinfo_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint32 freetime_;
  ::google::protobuf::uint32 bettime_;
  ::google::protobuf::uint32 opentime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cowcow_2eproto;
};
// -------------------------------------------------------------------

class GameCowcowHost final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameCowcowHost) */ {
 public:
  GameCowcowHost();
  virtual ~GameCowcowHost();

  GameCowcowHost(const GameCowcowHost& from);

  inline GameCowcowHost& operator=(const GameCowcowHost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCowcowHost(GameCowcowHost&& from) noexcept
    : GameCowcowHost() {
    *this = ::std::move(from);
  }

  inline GameCowcowHost& operator=(GameCowcowHost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameCowcowHost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCowcowHost* internal_default_instance() {
    return reinterpret_cast<const GameCowcowHost*>(
               &_GameCowcowHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameCowcowHost* other);
  friend void swap(GameCowcowHost& a, GameCowcowHost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCowcowHost* New() const final {
    return CreateMaybeMessage<GameCowcowHost>(nullptr);
  }

  GameCowcowHost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameCowcowHost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameCowcowHost& from);
  void MergeFrom(const GameCowcowHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameCowcowHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // bool IsWant = 2;
  void clear_iswant();
  static const int kIsWantFieldNumber = 2;
  bool iswant() const;
  void set_iswant(bool value);

  // @@protoc_insertion_point(class_scope:go.GameCowcowHost)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 userid_;
  bool iswant_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cowcow_2eproto;
};
// -------------------------------------------------------------------

class GameCowcowSuperHost final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameCowcowSuperHost) */ {
 public:
  GameCowcowSuperHost();
  virtual ~GameCowcowSuperHost();

  GameCowcowSuperHost(const GameCowcowSuperHost& from);

  inline GameCowcowSuperHost& operator=(const GameCowcowSuperHost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCowcowSuperHost(GameCowcowSuperHost&& from) noexcept
    : GameCowcowSuperHost() {
    *this = ::std::move(from);
  }

  inline GameCowcowSuperHost& operator=(GameCowcowSuperHost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameCowcowSuperHost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCowcowSuperHost* internal_default_instance() {
    return reinterpret_cast<const GameCowcowSuperHost*>(
               &_GameCowcowSuperHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GameCowcowSuperHost* other);
  friend void swap(GameCowcowSuperHost& a, GameCowcowSuperHost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCowcowSuperHost* New() const final {
    return CreateMaybeMessage<GameCowcowSuperHost>(nullptr);
  }

  GameCowcowSuperHost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameCowcowSuperHost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameCowcowSuperHost& from);
  void MergeFrom(const GameCowcowSuperHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameCowcowSuperHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // bool IsWant = 2;
  void clear_iswant();
  static const int kIsWantFieldNumber = 2;
  bool iswant() const;
  void set_iswant(bool value);

  // @@protoc_insertion_point(class_scope:go.GameCowcowSuperHost)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 userid_;
  bool iswant_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cowcow_2eproto;
};
// -------------------------------------------------------------------

class GameCowcowPlaying final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameCowcowPlaying) */ {
 public:
  GameCowcowPlaying();
  virtual ~GameCowcowPlaying();

  GameCowcowPlaying(const GameCowcowPlaying& from);

  inline GameCowcowPlaying& operator=(const GameCowcowPlaying& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCowcowPlaying(GameCowcowPlaying&& from) noexcept
    : GameCowcowPlaying() {
    *this = ::std::move(from);
  }

  inline GameCowcowPlaying& operator=(GameCowcowPlaying&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameCowcowPlaying& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCowcowPlaying* internal_default_instance() {
    return reinterpret_cast<const GameCowcowPlaying*>(
               &_GameCowcowPlaying_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GameCowcowPlaying* other);
  friend void swap(GameCowcowPlaying& a, GameCowcowPlaying& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCowcowPlaying* New() const final {
    return CreateMaybeMessage<GameCowcowPlaying>(nullptr);
  }

  GameCowcowPlaying* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameCowcowPlaying>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameCowcowPlaying& from);
  void MergeFrom(const GameCowcowPlaying& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameCowcowPlaying* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 BetScore = 2;
  void clear_betscore();
  static const int kBetScoreFieldNumber = 2;
  ::google::protobuf::int64 betscore() const;
  void set_betscore(::google::protobuf::int64 value);

  // int32 BetArea = 1;
  void clear_betarea();
  static const int kBetAreaFieldNumber = 1;
  ::google::protobuf::int32 betarea() const;
  void set_betarea(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:go.GameCowcowPlaying)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 betscore_;
  ::google::protobuf::int32 betarea_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cowcow_2eproto;
};
// -------------------------------------------------------------------

class GameCowcowBetResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameCowcowBetResult) */ {
 public:
  GameCowcowBetResult();
  virtual ~GameCowcowBetResult();

  GameCowcowBetResult(const GameCowcowBetResult& from);

  inline GameCowcowBetResult& operator=(const GameCowcowBetResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCowcowBetResult(GameCowcowBetResult&& from) noexcept
    : GameCowcowBetResult() {
    *this = ::std::move(from);
  }

  inline GameCowcowBetResult& operator=(GameCowcowBetResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameCowcowBetResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCowcowBetResult* internal_default_instance() {
    return reinterpret_cast<const GameCowcowBetResult*>(
               &_GameCowcowBetResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GameCowcowBetResult* other);
  friend void swap(GameCowcowBetResult& a, GameCowcowBetResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCowcowBetResult* New() const final {
    return CreateMaybeMessage<GameCowcowBetResult>(nullptr);
  }

  GameCowcowBetResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameCowcowBetResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameCowcowBetResult& from);
  void MergeFrom(const GameCowcowBetResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameCowcowBetResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Hints = 2;
  void clear_hints();
  static const int kHintsFieldNumber = 2;
  const ::std::string& hints() const;
  void set_hints(const ::std::string& value);
  #if LANG_CXX11
  void set_hints(::std::string&& value);
  #endif
  void set_hints(const char* value);
  void set_hints(const char* value, size_t size);
  ::std::string* mutable_hints();
  ::std::string* release_hints();
  void set_allocated_hints(::std::string* hints);

  // int32 State = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:go.GameCowcowBetResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hints_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cowcow_2eproto;
};
// -------------------------------------------------------------------

class GameCowcowOver final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameCowcowOver) */ {
 public:
  GameCowcowOver();
  virtual ~GameCowcowOver();

  GameCowcowOver(const GameCowcowOver& from);

  inline GameCowcowOver& operator=(const GameCowcowOver& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCowcowOver(GameCowcowOver&& from) noexcept
    : GameCowcowOver() {
    *this = ::std::move(from);
  }

  inline GameCowcowOver& operator=(GameCowcowOver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameCowcowOver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCowcowOver* internal_default_instance() {
    return reinterpret_cast<const GameCowcowOver*>(
               &_GameCowcowOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GameCowcowOver* other);
  friend void swap(GameCowcowOver& a, GameCowcowOver& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCowcowOver* New() const final {
    return CreateMaybeMessage<GameCowcowOver>(nullptr);
  }

  GameCowcowOver* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameCowcowOver>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameCowcowOver& from);
  void MergeFrom(const GameCowcowOver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameCowcowOver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes AwardArea = 1;
  void clear_awardarea();
  static const int kAwardAreaFieldNumber = 1;
  const ::std::string& awardarea() const;
  void set_awardarea(const ::std::string& value);
  #if LANG_CXX11
  void set_awardarea(::std::string&& value);
  #endif
  void set_awardarea(const char* value);
  void set_awardarea(const void* value, size_t size);
  ::std::string* mutable_awardarea();
  ::std::string* release_awardarea();
  void set_allocated_awardarea(::std::string* awardarea);

  // bytes BankerCard = 2;
  void clear_bankercard();
  static const int kBankerCardFieldNumber = 2;
  const ::std::string& bankercard() const;
  void set_bankercard(const ::std::string& value);
  #if LANG_CXX11
  void set_bankercard(::std::string&& value);
  #endif
  void set_bankercard(const char* value);
  void set_bankercard(const void* value, size_t size);
  ::std::string* mutable_bankercard();
  ::std::string* release_bankercard();
  void set_allocated_bankercard(::std::string* bankercard);

  // bytes TianCard = 3;
  void clear_tiancard();
  static const int kTianCardFieldNumber = 3;
  const ::std::string& tiancard() const;
  void set_tiancard(const ::std::string& value);
  #if LANG_CXX11
  void set_tiancard(::std::string&& value);
  #endif
  void set_tiancard(const char* value);
  void set_tiancard(const void* value, size_t size);
  ::std::string* mutable_tiancard();
  ::std::string* release_tiancard();
  void set_allocated_tiancard(::std::string* tiancard);

  // bytes XuanCard = 4;
  void clear_xuancard();
  static const int kXuanCardFieldNumber = 4;
  const ::std::string& xuancard() const;
  void set_xuancard(const ::std::string& value);
  #if LANG_CXX11
  void set_xuancard(::std::string&& value);
  #endif
  void set_xuancard(const char* value);
  void set_xuancard(const void* value, size_t size);
  ::std::string* mutable_xuancard();
  ::std::string* release_xuancard();
  void set_allocated_xuancard(::std::string* xuancard);

  // bytes DiCard = 5;
  void clear_dicard();
  static const int kDiCardFieldNumber = 5;
  const ::std::string& dicard() const;
  void set_dicard(const ::std::string& value);
  #if LANG_CXX11
  void set_dicard(::std::string&& value);
  #endif
  void set_dicard(const char* value);
  void set_dicard(const void* value, size_t size);
  ::std::string* mutable_dicard();
  ::std::string* release_dicard();
  void set_allocated_dicard(::std::string* dicard);

  // bytes HuangCard = 6;
  void clear_huangcard();
  static const int kHuangCardFieldNumber = 6;
  const ::std::string& huangcard() const;
  void set_huangcard(const ::std::string& value);
  #if LANG_CXX11
  void set_huangcard(::std::string&& value);
  #endif
  void set_huangcard(const char* value);
  void set_huangcard(const void* value, size_t size);
  ::std::string* mutable_huangcard();
  ::std::string* release_huangcard();
  void set_allocated_huangcard(::std::string* huangcard);

  // bytes CardValue = 7;
  void clear_cardvalue();
  static const int kCardValueFieldNumber = 7;
  const ::std::string& cardvalue() const;
  void set_cardvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_cardvalue(::std::string&& value);
  #endif
  void set_cardvalue(const char* value);
  void set_cardvalue(const void* value, size_t size);
  ::std::string* mutable_cardvalue();
  ::std::string* release_cardvalue();
  void set_allocated_cardvalue(::std::string* cardvalue);

  // @@protoc_insertion_point(class_scope:go.GameCowcowOver)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr awardarea_;
  ::google::protobuf::internal::ArenaStringPtr bankercard_;
  ::google::protobuf::internal::ArenaStringPtr tiancard_;
  ::google::protobuf::internal::ArenaStringPtr xuancard_;
  ::google::protobuf::internal::ArenaStringPtr dicard_;
  ::google::protobuf::internal::ArenaStringPtr huangcard_;
  ::google::protobuf::internal::ArenaStringPtr cardvalue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cowcow_2eproto;
};
// -------------------------------------------------------------------

class GameCowcowCheckout final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.GameCowcowCheckout) */ {
 public:
  GameCowcowCheckout();
  virtual ~GameCowcowCheckout();

  GameCowcowCheckout(const GameCowcowCheckout& from);

  inline GameCowcowCheckout& operator=(const GameCowcowCheckout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCowcowCheckout(GameCowcowCheckout&& from) noexcept
    : GameCowcowCheckout() {
    *this = ::std::move(from);
  }

  inline GameCowcowCheckout& operator=(GameCowcowCheckout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameCowcowCheckout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCowcowCheckout* internal_default_instance() {
    return reinterpret_cast<const GameCowcowCheckout*>(
               &_GameCowcowCheckout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GameCowcowCheckout* other);
  friend void swap(GameCowcowCheckout& a, GameCowcowCheckout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCowcowCheckout* New() const final {
    return CreateMaybeMessage<GameCowcowCheckout>(nullptr);
  }

  GameCowcowCheckout* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameCowcowCheckout>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameCowcowCheckout& from);
  void MergeFrom(const GameCowcowCheckout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameCowcowCheckout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 Acquire = 1;
  void clear_acquire();
  static const int kAcquireFieldNumber = 1;
  ::google::protobuf::int64 acquire() const;
  void set_acquire(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:go.GameCowcowCheckout)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 acquire_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cowcow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameCowcowEnter

// .go.PlayerInfo UserInfo = 1;
inline bool GameCowcowEnter::has_userinfo() const {
  return this != internal_default_instance() && userinfo_ != nullptr;
}
inline const ::go::PlayerInfo& GameCowcowEnter::userinfo() const {
  const ::go::PlayerInfo* p = userinfo_;
  // @@protoc_insertion_point(field_get:go.GameCowcowEnter.UserInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::go::PlayerInfo*>(
      &::go::_PlayerInfo_default_instance_);
}
inline ::go::PlayerInfo* GameCowcowEnter::release_userinfo() {
  // @@protoc_insertion_point(field_release:go.GameCowcowEnter.UserInfo)
  
  ::go::PlayerInfo* temp = userinfo_;
  userinfo_ = nullptr;
  return temp;
}
inline ::go::PlayerInfo* GameCowcowEnter::mutable_userinfo() {
  
  if (userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::go::PlayerInfo>(GetArenaNoVirtual());
    userinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.GameCowcowEnter.UserInfo)
  return userinfo_;
}
inline void GameCowcowEnter::set_allocated_userinfo(::go::PlayerInfo* userinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(userinfo_);
  }
  if (userinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      userinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:go.GameCowcowEnter.UserInfo)
}

// int64 TimeStamp = 2;
inline void GameCowcowEnter::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCowcowEnter::timestamp() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowEnter.TimeStamp)
  return timestamp_;
}
inline void GameCowcowEnter::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowEnter.TimeStamp)
}

// repeated int32 Chips = 3;
inline int GameCowcowEnter::chips_size() const {
  return chips_.size();
}
inline void GameCowcowEnter::clear_chips() {
  chips_.Clear();
}
inline ::google::protobuf::int32 GameCowcowEnter::chips(int index) const {
  // @@protoc_insertion_point(field_get:go.GameCowcowEnter.Chips)
  return chips_.Get(index);
}
inline void GameCowcowEnter::set_chips(int index, ::google::protobuf::int32 value) {
  chips_.Set(index, value);
  // @@protoc_insertion_point(field_set:go.GameCowcowEnter.Chips)
}
inline void GameCowcowEnter::add_chips(::google::protobuf::int32 value) {
  chips_.Add(value);
  // @@protoc_insertion_point(field_add:go.GameCowcowEnter.Chips)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameCowcowEnter::chips() const {
  // @@protoc_insertion_point(field_list:go.GameCowcowEnter.Chips)
  return chips_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameCowcowEnter::mutable_chips() {
  // @@protoc_insertion_point(field_mutable_list:go.GameCowcowEnter.Chips)
  return &chips_;
}

// repeated bytes AwardAreas = 4;
inline int GameCowcowEnter::awardareas_size() const {
  return awardareas_.size();
}
inline void GameCowcowEnter::clear_awardareas() {
  awardareas_.Clear();
}
inline const ::std::string& GameCowcowEnter::awardareas(int index) const {
  // @@protoc_insertion_point(field_get:go.GameCowcowEnter.AwardAreas)
  return awardareas_.Get(index);
}
inline ::std::string* GameCowcowEnter::mutable_awardareas(int index) {
  // @@protoc_insertion_point(field_mutable:go.GameCowcowEnter.AwardAreas)
  return awardareas_.Mutable(index);
}
inline void GameCowcowEnter::set_awardareas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:go.GameCowcowEnter.AwardAreas)
  awardareas_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GameCowcowEnter::set_awardareas(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:go.GameCowcowEnter.AwardAreas)
  awardareas_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GameCowcowEnter::set_awardareas(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  awardareas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:go.GameCowcowEnter.AwardAreas)
}
inline void GameCowcowEnter::set_awardareas(int index, const void* value, size_t size) {
  awardareas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:go.GameCowcowEnter.AwardAreas)
}
inline ::std::string* GameCowcowEnter::add_awardareas() {
  // @@protoc_insertion_point(field_add_mutable:go.GameCowcowEnter.AwardAreas)
  return awardareas_.Add();
}
inline void GameCowcowEnter::add_awardareas(const ::std::string& value) {
  awardareas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:go.GameCowcowEnter.AwardAreas)
}
#if LANG_CXX11
inline void GameCowcowEnter::add_awardareas(::std::string&& value) {
  awardareas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:go.GameCowcowEnter.AwardAreas)
}
#endif
inline void GameCowcowEnter::add_awardareas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  awardareas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:go.GameCowcowEnter.AwardAreas)
}
inline void GameCowcowEnter::add_awardareas(const void* value, size_t size) {
  awardareas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:go.GameCowcowEnter.AwardAreas)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GameCowcowEnter::awardareas() const {
  // @@protoc_insertion_point(field_list:go.GameCowcowEnter.AwardAreas)
  return awardareas_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GameCowcowEnter::mutable_awardareas() {
  // @@protoc_insertion_point(field_mutable_list:go.GameCowcowEnter.AwardAreas)
  return &awardareas_;
}

// uint32 FreeTime = 5;
inline void GameCowcowEnter::clear_freetime() {
  freetime_ = 0u;
}
inline ::google::protobuf::uint32 GameCowcowEnter::freetime() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowEnter.FreeTime)
  return freetime_;
}
inline void GameCowcowEnter::set_freetime(::google::protobuf::uint32 value) {
  
  freetime_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowEnter.FreeTime)
}

// uint32 BetTime = 6;
inline void GameCowcowEnter::clear_bettime() {
  bettime_ = 0u;
}
inline ::google::protobuf::uint32 GameCowcowEnter::bettime() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowEnter.BetTime)
  return bettime_;
}
inline void GameCowcowEnter::set_bettime(::google::protobuf::uint32 value) {
  
  bettime_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowEnter.BetTime)
}

// uint32 OpenTime = 7;
inline void GameCowcowEnter::clear_opentime() {
  opentime_ = 0u;
}
inline ::google::protobuf::uint32 GameCowcowEnter::opentime() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowEnter.OpenTime)
  return opentime_;
}
inline void GameCowcowEnter::set_opentime(::google::protobuf::uint32 value) {
  
  opentime_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowEnter.OpenTime)
}

// -------------------------------------------------------------------

// GameCowcowHost

// uint64 UserID = 1;
inline void GameCowcowHost::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameCowcowHost::userid() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowHost.UserID)
  return userid_;
}
inline void GameCowcowHost::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowHost.UserID)
}

// bool IsWant = 2;
inline void GameCowcowHost::clear_iswant() {
  iswant_ = false;
}
inline bool GameCowcowHost::iswant() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowHost.IsWant)
  return iswant_;
}
inline void GameCowcowHost::set_iswant(bool value) {
  
  iswant_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowHost.IsWant)
}

// -------------------------------------------------------------------

// GameCowcowSuperHost

// uint64 UserID = 1;
inline void GameCowcowSuperHost::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameCowcowSuperHost::userid() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowSuperHost.UserID)
  return userid_;
}
inline void GameCowcowSuperHost::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowSuperHost.UserID)
}

// bool IsWant = 2;
inline void GameCowcowSuperHost::clear_iswant() {
  iswant_ = false;
}
inline bool GameCowcowSuperHost::iswant() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowSuperHost.IsWant)
  return iswant_;
}
inline void GameCowcowSuperHost::set_iswant(bool value) {
  
  iswant_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowSuperHost.IsWant)
}

// -------------------------------------------------------------------

// GameCowcowPlaying

// int32 BetArea = 1;
inline void GameCowcowPlaying::clear_betarea() {
  betarea_ = 0;
}
inline ::google::protobuf::int32 GameCowcowPlaying::betarea() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowPlaying.BetArea)
  return betarea_;
}
inline void GameCowcowPlaying::set_betarea(::google::protobuf::int32 value) {
  
  betarea_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowPlaying.BetArea)
}

// int64 BetScore = 2;
inline void GameCowcowPlaying::clear_betscore() {
  betscore_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCowcowPlaying::betscore() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowPlaying.BetScore)
  return betscore_;
}
inline void GameCowcowPlaying::set_betscore(::google::protobuf::int64 value) {
  
  betscore_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowPlaying.BetScore)
}

// -------------------------------------------------------------------

// GameCowcowBetResult

// int32 State = 1;
inline void GameCowcowBetResult::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 GameCowcowBetResult::state() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowBetResult.State)
  return state_;
}
inline void GameCowcowBetResult::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowBetResult.State)
}

// string Hints = 2;
inline void GameCowcowBetResult::clear_hints() {
  hints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameCowcowBetResult::hints() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowBetResult.Hints)
  return hints_.GetNoArena();
}
inline void GameCowcowBetResult::set_hints(const ::std::string& value) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameCowcowBetResult.Hints)
}
#if LANG_CXX11
inline void GameCowcowBetResult::set_hints(::std::string&& value) {
  
  hints_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameCowcowBetResult.Hints)
}
#endif
inline void GameCowcowBetResult::set_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameCowcowBetResult.Hints)
}
inline void GameCowcowBetResult::set_hints(const char* value, size_t size) {
  
  hints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameCowcowBetResult.Hints)
}
inline ::std::string* GameCowcowBetResult::mutable_hints() {
  
  // @@protoc_insertion_point(field_mutable:go.GameCowcowBetResult.Hints)
  return hints_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameCowcowBetResult::release_hints() {
  // @@protoc_insertion_point(field_release:go.GameCowcowBetResult.Hints)
  
  return hints_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameCowcowBetResult::set_allocated_hints(::std::string* hints) {
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hints);
  // @@protoc_insertion_point(field_set_allocated:go.GameCowcowBetResult.Hints)
}

// -------------------------------------------------------------------

// GameCowcowOver

// bytes AwardArea = 1;
inline void GameCowcowOver::clear_awardarea() {
  awardarea_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameCowcowOver::awardarea() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowOver.AwardArea)
  return awardarea_.GetNoArena();
}
inline void GameCowcowOver::set_awardarea(const ::std::string& value) {
  
  awardarea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameCowcowOver.AwardArea)
}
#if LANG_CXX11
inline void GameCowcowOver::set_awardarea(::std::string&& value) {
  
  awardarea_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameCowcowOver.AwardArea)
}
#endif
inline void GameCowcowOver::set_awardarea(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  awardarea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameCowcowOver.AwardArea)
}
inline void GameCowcowOver::set_awardarea(const void* value, size_t size) {
  
  awardarea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameCowcowOver.AwardArea)
}
inline ::std::string* GameCowcowOver::mutable_awardarea() {
  
  // @@protoc_insertion_point(field_mutable:go.GameCowcowOver.AwardArea)
  return awardarea_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameCowcowOver::release_awardarea() {
  // @@protoc_insertion_point(field_release:go.GameCowcowOver.AwardArea)
  
  return awardarea_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameCowcowOver::set_allocated_awardarea(::std::string* awardarea) {
  if (awardarea != nullptr) {
    
  } else {
    
  }
  awardarea_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), awardarea);
  // @@protoc_insertion_point(field_set_allocated:go.GameCowcowOver.AwardArea)
}

// bytes BankerCard = 2;
inline void GameCowcowOver::clear_bankercard() {
  bankercard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameCowcowOver::bankercard() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowOver.BankerCard)
  return bankercard_.GetNoArena();
}
inline void GameCowcowOver::set_bankercard(const ::std::string& value) {
  
  bankercard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameCowcowOver.BankerCard)
}
#if LANG_CXX11
inline void GameCowcowOver::set_bankercard(::std::string&& value) {
  
  bankercard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameCowcowOver.BankerCard)
}
#endif
inline void GameCowcowOver::set_bankercard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bankercard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameCowcowOver.BankerCard)
}
inline void GameCowcowOver::set_bankercard(const void* value, size_t size) {
  
  bankercard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameCowcowOver.BankerCard)
}
inline ::std::string* GameCowcowOver::mutable_bankercard() {
  
  // @@protoc_insertion_point(field_mutable:go.GameCowcowOver.BankerCard)
  return bankercard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameCowcowOver::release_bankercard() {
  // @@protoc_insertion_point(field_release:go.GameCowcowOver.BankerCard)
  
  return bankercard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameCowcowOver::set_allocated_bankercard(::std::string* bankercard) {
  if (bankercard != nullptr) {
    
  } else {
    
  }
  bankercard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankercard);
  // @@protoc_insertion_point(field_set_allocated:go.GameCowcowOver.BankerCard)
}

// bytes TianCard = 3;
inline void GameCowcowOver::clear_tiancard() {
  tiancard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameCowcowOver::tiancard() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowOver.TianCard)
  return tiancard_.GetNoArena();
}
inline void GameCowcowOver::set_tiancard(const ::std::string& value) {
  
  tiancard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameCowcowOver.TianCard)
}
#if LANG_CXX11
inline void GameCowcowOver::set_tiancard(::std::string&& value) {
  
  tiancard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameCowcowOver.TianCard)
}
#endif
inline void GameCowcowOver::set_tiancard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tiancard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameCowcowOver.TianCard)
}
inline void GameCowcowOver::set_tiancard(const void* value, size_t size) {
  
  tiancard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameCowcowOver.TianCard)
}
inline ::std::string* GameCowcowOver::mutable_tiancard() {
  
  // @@protoc_insertion_point(field_mutable:go.GameCowcowOver.TianCard)
  return tiancard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameCowcowOver::release_tiancard() {
  // @@protoc_insertion_point(field_release:go.GameCowcowOver.TianCard)
  
  return tiancard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameCowcowOver::set_allocated_tiancard(::std::string* tiancard) {
  if (tiancard != nullptr) {
    
  } else {
    
  }
  tiancard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tiancard);
  // @@protoc_insertion_point(field_set_allocated:go.GameCowcowOver.TianCard)
}

// bytes XuanCard = 4;
inline void GameCowcowOver::clear_xuancard() {
  xuancard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameCowcowOver::xuancard() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowOver.XuanCard)
  return xuancard_.GetNoArena();
}
inline void GameCowcowOver::set_xuancard(const ::std::string& value) {
  
  xuancard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameCowcowOver.XuanCard)
}
#if LANG_CXX11
inline void GameCowcowOver::set_xuancard(::std::string&& value) {
  
  xuancard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameCowcowOver.XuanCard)
}
#endif
inline void GameCowcowOver::set_xuancard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xuancard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameCowcowOver.XuanCard)
}
inline void GameCowcowOver::set_xuancard(const void* value, size_t size) {
  
  xuancard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameCowcowOver.XuanCard)
}
inline ::std::string* GameCowcowOver::mutable_xuancard() {
  
  // @@protoc_insertion_point(field_mutable:go.GameCowcowOver.XuanCard)
  return xuancard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameCowcowOver::release_xuancard() {
  // @@protoc_insertion_point(field_release:go.GameCowcowOver.XuanCard)
  
  return xuancard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameCowcowOver::set_allocated_xuancard(::std::string* xuancard) {
  if (xuancard != nullptr) {
    
  } else {
    
  }
  xuancard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xuancard);
  // @@protoc_insertion_point(field_set_allocated:go.GameCowcowOver.XuanCard)
}

// bytes DiCard = 5;
inline void GameCowcowOver::clear_dicard() {
  dicard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameCowcowOver::dicard() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowOver.DiCard)
  return dicard_.GetNoArena();
}
inline void GameCowcowOver::set_dicard(const ::std::string& value) {
  
  dicard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameCowcowOver.DiCard)
}
#if LANG_CXX11
inline void GameCowcowOver::set_dicard(::std::string&& value) {
  
  dicard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameCowcowOver.DiCard)
}
#endif
inline void GameCowcowOver::set_dicard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dicard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameCowcowOver.DiCard)
}
inline void GameCowcowOver::set_dicard(const void* value, size_t size) {
  
  dicard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameCowcowOver.DiCard)
}
inline ::std::string* GameCowcowOver::mutable_dicard() {
  
  // @@protoc_insertion_point(field_mutable:go.GameCowcowOver.DiCard)
  return dicard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameCowcowOver::release_dicard() {
  // @@protoc_insertion_point(field_release:go.GameCowcowOver.DiCard)
  
  return dicard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameCowcowOver::set_allocated_dicard(::std::string* dicard) {
  if (dicard != nullptr) {
    
  } else {
    
  }
  dicard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dicard);
  // @@protoc_insertion_point(field_set_allocated:go.GameCowcowOver.DiCard)
}

// bytes HuangCard = 6;
inline void GameCowcowOver::clear_huangcard() {
  huangcard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameCowcowOver::huangcard() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowOver.HuangCard)
  return huangcard_.GetNoArena();
}
inline void GameCowcowOver::set_huangcard(const ::std::string& value) {
  
  huangcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameCowcowOver.HuangCard)
}
#if LANG_CXX11
inline void GameCowcowOver::set_huangcard(::std::string&& value) {
  
  huangcard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameCowcowOver.HuangCard)
}
#endif
inline void GameCowcowOver::set_huangcard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  huangcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameCowcowOver.HuangCard)
}
inline void GameCowcowOver::set_huangcard(const void* value, size_t size) {
  
  huangcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameCowcowOver.HuangCard)
}
inline ::std::string* GameCowcowOver::mutable_huangcard() {
  
  // @@protoc_insertion_point(field_mutable:go.GameCowcowOver.HuangCard)
  return huangcard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameCowcowOver::release_huangcard() {
  // @@protoc_insertion_point(field_release:go.GameCowcowOver.HuangCard)
  
  return huangcard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameCowcowOver::set_allocated_huangcard(::std::string* huangcard) {
  if (huangcard != nullptr) {
    
  } else {
    
  }
  huangcard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), huangcard);
  // @@protoc_insertion_point(field_set_allocated:go.GameCowcowOver.HuangCard)
}

// bytes CardValue = 7;
inline void GameCowcowOver::clear_cardvalue() {
  cardvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameCowcowOver::cardvalue() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowOver.CardValue)
  return cardvalue_.GetNoArena();
}
inline void GameCowcowOver::set_cardvalue(const ::std::string& value) {
  
  cardvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.GameCowcowOver.CardValue)
}
#if LANG_CXX11
inline void GameCowcowOver::set_cardvalue(::std::string&& value) {
  
  cardvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.GameCowcowOver.CardValue)
}
#endif
inline void GameCowcowOver::set_cardvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cardvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.GameCowcowOver.CardValue)
}
inline void GameCowcowOver::set_cardvalue(const void* value, size_t size) {
  
  cardvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.GameCowcowOver.CardValue)
}
inline ::std::string* GameCowcowOver::mutable_cardvalue() {
  
  // @@protoc_insertion_point(field_mutable:go.GameCowcowOver.CardValue)
  return cardvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameCowcowOver::release_cardvalue() {
  // @@protoc_insertion_point(field_release:go.GameCowcowOver.CardValue)
  
  return cardvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameCowcowOver::set_allocated_cardvalue(::std::string* cardvalue) {
  if (cardvalue != nullptr) {
    
  } else {
    
  }
  cardvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardvalue);
  // @@protoc_insertion_point(field_set_allocated:go.GameCowcowOver.CardValue)
}

// -------------------------------------------------------------------

// GameCowcowCheckout

// int64 Acquire = 1;
inline void GameCowcowCheckout::clear_acquire() {
  acquire_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCowcowCheckout::acquire() const {
  // @@protoc_insertion_point(field_get:go.GameCowcowCheckout.Acquire)
  return acquire_;
}
inline void GameCowcowCheckout::set_acquire(::google::protobuf::int64 value) {
  
  acquire_ = value;
  // @@protoc_insertion_point(field_set:go.GameCowcowCheckout.Acquire)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace go

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_cowcow_2eproto
